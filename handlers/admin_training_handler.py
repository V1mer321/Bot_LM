import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from services.training_data_service import get_training_service
from services.model_training_service import get_model_training_service

logger = logging.getLogger(__name__)

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ config)
ADMIN_USER_IDS = [2093834331]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ª–æ–≥–æ–≤

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –±–æ—Ç–∞
    try:
        from toolbot.utils.access import is_allowed_user
        from toolbot.config import load_config
        
        config = load_config()
        if config:
            admin_ids = config.get('admin_users', []) or config.get('admin_ids', []) or config.get('admins', [])
            if user_id in admin_ids:
                return True
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É: {e}")
    
    # Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
    return user_id in ADMIN_USER_IDS

async def admin_training_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /admin_training_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    try:
        training_service = get_training_service()
        stats = training_service.get_training_statistics()
        
        stats_text = f"""
üß† **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π:**

üìä **–û–±—É—á–∞—é—â–∏–µ –ø—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {stats.get('total_examples', 0)}
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ: {stats.get('used_for_training', 0)}
‚Ä¢ –ù–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ: {stats.get('unused_examples', 0)}

üìã **–ü–æ —Ç–∏–ø–∞–º –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:**
"""
        
        feedback_types = stats.get('by_feedback_type', {})
        for feedback_type, count in feedback_types.items():
            emoji = "‚úÖ" if feedback_type == "correct" else "‚ùå" if feedback_type == "incorrect" else "‚ûï"
            stats_text += f"‚Ä¢ {emoji} {feedback_type}: {count}\n"
        
        stats_text += f"""

üÜï **–ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã:**
‚Ä¢ –ê–Ω–Ω–æ—Ç–∞—Ü–∏–π: {stats.get('new_products_annotations', 0)}
‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö: {stats.get('approved_new_products', 0)}

üéØ **–°–µ—Å—Å–∏–∏ –æ–±—É—á–µ–Ω–∏—è:**
‚Ä¢ –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {stats.get('training_sessions', 0)}

ü§ñ **–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å:**
‚Ä¢ –í–µ—Ä—Å–∏—è: {stats.get('current_model', {}).get('version', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')}
‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: {stats.get('current_model', {}).get('accuracy', '–ù/–î')}
‚Ä¢ –î–∞—Ç–∞: {stats.get('current_model', {}).get('date', '–ù/–î')}
"""
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="admin_refresh_training_stats")],
            [InlineKeyboardButton("üìù –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä—ã", callback_data="admin_view_examples")],
            [InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–æ–æ–±—É—á–µ–Ω–∏–µ", callback_data="admin_start_training")],
            [InlineKeyboardButton("‚ûï –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏", callback_data="admin_manage_new_products")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(stats_text, parse_mode='Markdown', reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def admin_start_training_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /admin_start_training - –∑–∞–ø—É—Å–∫ –¥–æ–æ–±—É—á–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    try:
        training_service = get_model_training_service()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = training_service.get_training_recommendations()
        
        if not recommendations.get('should_train', False):
            reasons_text = "\n".join([f"‚Ä¢ {reason}" for reason in recommendations.get('reasons', [])])
            await update.message.reply_text(
                f"‚ÑπÔ∏è –î–æ–æ–±—É—á–µ–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:\n\n{reasons_text}\n\n"
                f"–ù–∞–∫–æ–ø–∏—Ç–µ –±–æ–ª—å—à–µ –æ–±—É—á–∞—é—â–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."
            )
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è
        reasons_text = "\n".join([f"‚Ä¢ {reason}" for reason in recommendations.get('reasons', [])])
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–æ–æ–±—É—á–µ–Ω–∏–µ", callback_data="admin_confirm_training")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel_training")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"üöÄ **–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É –¥–æ–æ–±—É—á–µ–Ω–∏—è!**\n\n"
            f"üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n{reasons_text}\n\n"
            f"‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.\n"
            f"üîÑ –ë–æ—Ç –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è.\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø—É—Å–∫?",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –¥–æ–æ–±—É—á–µ–Ω–∏—é: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –¥–æ–æ–±—É—á–µ–Ω–∏—é")

async def admin_view_examples_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /admin_view_examples - –ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—É—á–∞—é—â–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    try:
        training_service = get_training_service()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
        correct_examples = training_service.get_training_examples(feedback_type='correct', limit=5)
        incorrect_examples = training_service.get_training_examples(feedback_type='incorrect', limit=5)
        unused_examples = training_service.get_training_examples(is_used=False, limit=10)
        
        examples_text = f"""
üìù **–û–±—É—á–∞—é—â–∏–µ –ø—Ä–∏–º–µ—Ä—ã:**

‚úÖ **–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã ({len(correct_examples)}):**
"""
        
        for ex in correct_examples[:3]:
            examples_text += f"‚Ä¢ ID: {ex['id']}, –¢–æ–≤–∞—Ä: {ex.get('target_item_id', '–ù/–î')}, –°—Ö–æ–∂–µ—Å—Ç—å: {ex.get('similarity_score', 0):.3f}\n"
        
        examples_text += f"""

‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã ({len(incorrect_examples)}):**
"""
        
        for ex in incorrect_examples[:3]:
            examples_text += f"‚Ä¢ ID: {ex['id']}, –¢–æ–≤–∞—Ä: {ex.get('target_item_id', '–ù/–î')}, –°—Ö–æ–∂–µ—Å—Ç—å: {ex.get('similarity_score', 0):.3f}\n"
        
        examples_text += f"""

üÜï **–ù–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã ({len(unused_examples)}):**
"""
        
        for ex in unused_examples[:5]:
            feedback_emoji = "‚úÖ" if ex['feedback_type'] == 'correct' else "‚ùå"
            examples_text += f"‚Ä¢ {feedback_emoji} ID: {ex['id']}, –¢–∏–ø: {ex['feedback_type']}\n"
        
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_refresh_training_stats")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="admin_refresh_examples")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(examples_text, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø—Ä–∏–º–µ—Ä–æ–≤: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤")

async def admin_manage_new_products_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /admin_new_products - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    try:
        training_service = get_training_service()
        pending_products = training_service.get_pending_new_products(limit=10)
        
        if not pending_products:
            await update.message.reply_text(
                "‚úÖ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è\n\n"
                "üìù –í—Å–µ –ø–æ—Å—Ç—É–ø–∏–≤—à–∏–µ –∑–∞—è–≤–∫–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã."
            )
            return
        
        products_text = f"‚ûï <b>–ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è ({len(pending_products)}):</b>\n\n"
        
        for i, product in enumerate(pending_products[:5], 1):
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã
            product_name = str(product['product_name']).replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
            category = str(product.get('product_category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')).replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
            description = str(product.get('product_description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')).replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
            username = str(product.get('username', '–ê–Ω–æ–Ω–∏–º')).replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
            
            products_text += f"""<b>{i}. {product_name}</b>
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}
üìã –û–ø–∏—Å–∞–Ω–∏–µ: {description}
üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username} (ID: {product['user_id']})
üìÖ –î–∞—Ç–∞: {product['created_at']}
üîó ID –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏: #{product['id']}

"""
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data="admin_approve_products")],
            [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data="admin_reject_products")],
            [InlineKeyboardButton("üìã –ü–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="admin_detailed_products")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(products_text, parse_mode='HTML', reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")

async def admin_model_backups_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /admin_model_backups - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏ –º–æ–¥–µ–ª–µ–π"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    try:
        model_service = get_model_training_service()
        backups = model_service.list_model_backups()
        
        if not backups:
            backups_text = """üíæ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏ –º–æ–¥–µ–ª–µ–π

üìÅ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã

–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
‚Ä¢ –ü–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –¥–æ–æ–±—É—á–µ–Ω–∏–µ–º
‚Ä¢ –ü—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
‚Ä¢ –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é –¥–ª—è —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏"""
        else:
            backups_text = f"""üíæ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏ –º–æ–¥–µ–ª–µ–π

üìÅ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {len(backups)}

"""
            
            for i, backup in enumerate(backups[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                size_mb = backup['file_size'] / (1024 * 1024)
                backup_type = backup['backup_type']
                
                emoji = "üîÑ" if backup_type == "manual" else "‚ö°" if backup_type == "auto" else "üîô"
                
                backups_text += f"""{emoji} {i}. {backup['backup_id']}
   üìÖ {backup['created_at'][:19]}
   üíæ {size_mb:.1f} MB ({backup_type})

"""
        
        keyboard = [
            [InlineKeyboardButton("üíæ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é", callback_data="admin_create_backup")],
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–ø–∏–π", callback_data="admin_list_backups")],
            [InlineKeyboardButton("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –∫–æ–ø–∏–∏", callback_data="admin_restore_backup")],
            [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∫–æ–ø–∏–∏", callback_data="admin_cleanup_backups")],
            [InlineKeyboardButton("üìä –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="admin_refresh_training_stats")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(backups_text, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏")

# ================= CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =================

async def handle_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    logger.info(f"üîë Admin callback –ø–æ–ª—É—á–µ–Ω: {query.data} –æ—Ç {user_id}")
    
    if not is_admin(user_id):
        logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º")
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    logger.info(f"‚úÖ –ê–¥–º–∏–Ω {user_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {query.data}")
    await query.answer()
    
    try:
        if query.data == "admin_refresh_training_stats":
            await refresh_training_stats(query, context)
        
        elif query.data == "admin_view_examples":
            await view_training_examples(query, context)
        
        elif query.data == "admin_start_training":
            await start_training_process(query, context)
        
        elif query.data == "admin_confirm_training":
            await confirm_training_start(query, context)
        
        elif query.data == "admin_cancel_training":
            await query.edit_message_text("‚ùå –î–æ–æ–±—É—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        
        elif query.data == "admin_manage_new_products":
            await manage_new_products(query, context)
        
        elif query.data == "admin_approve_products":
            await approve_new_products(query, context)
        
        elif query.data == "admin_detailed_products":
            await manage_new_products(query, context)
        
        elif query.data == "admin_refresh_examples":
            await view_training_examples(query, context)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
        elif query.data == "admin_create_backup":
            await create_model_backup(query, context)
        
        elif query.data == "admin_list_backups":
            await list_model_backups(query, context)
        
        elif query.data == "admin_restore_backup":
            await restore_backup_menu(query, context)
        
        elif query.data == "admin_cleanup_backups":
            await cleanup_old_backups(query, context)
        
        elif query.data.startswith("admin_restore_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            backup_id = query.data.replace("admin_restore_", "")
            await restore_specific_backup(query, context, backup_id)
            
        elif query.data.startswith("fill_product_data_"):
            # –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—à–∞–≥–æ–≤–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞
            annotation_id = int(query.data.replace("fill_product_data_", ""))
            await start_product_data_filling(query, context, annotation_id)
            
        elif query.data.startswith("reject_product_"):
            # –û—Ç–∫–ª–æ–Ω—è–µ–º —Ç–æ–≤–∞—Ä
            annotation_id = int(query.data.replace("reject_product_", ""))
            await reject_single_product(query, context, annotation_id)
        
        else:
            await query.edit_message_text("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin callback: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")

async def confirm_training_start(query, context):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –¥–æ–æ–±—É—á–µ–Ω–∏—è"""
    await query.edit_message_text("üöÄ –ó–∞–ø—É—Å–∫ –¥–æ–æ–±—É—á–µ–Ω–∏—è...\n\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    
    try:
        training_service = get_model_training_service()
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        train_data, val_data = training_service.prepare_training_data(min_examples=10)
        
        if not train_data:
            await query.edit_message_text(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–æ–æ–±—É—á–µ–Ω–∏—è.\n\n"
                "üìä –ù–∞–∫–æ–ø–∏—Ç–µ –±–æ–ª—å—à–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ–æ–±—É—á–µ–Ω–∏–µ
        result = training_service.fine_tune_model(train_data, val_data)
        
        if result.get('success'):
            success_text = f"""
‚úÖ **–î–æ–æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!**

ü§ñ –ú–æ–¥–µ–ª—å: {result.get('model_version')}
üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {result.get('examples_used')}
‚è±Ô∏è –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {result.get('training_duration')} —Å–µ–∫
üìà –¢–æ—á–Ω–æ—Å—Ç—å –¥–æ: {result.get('accuracy_before', '–ù/–î'):.3f}
üìà –¢–æ—á–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ: {result.get('accuracy_after', '–ù/–î'):.3f}

üéØ –ú–æ–¥–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!
"""
            await query.edit_message_text(success_text, parse_mode='Markdown')
        else:
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–æ–±—É—á–µ–Ω–∏–∏:\n\n{result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            await query.edit_message_text(error_text)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–æ–±—É—á–µ–Ω–∏–∏: {e}")
        await query.edit_message_text(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–æ–±—É—á–µ–Ω–∏–∏:\n\n{str(e)}")

async def refresh_training_stats(query, context):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è"""
    training_service = get_training_service()
    stats = training_service.get_training_statistics()
    
    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ admin_training_stats_command, –Ω–æ —á–µ—Ä–µ–∑ edit_message
    stats_text = f"""
üß† **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–æ–±—É—á–µ–Ω–∏—è (–æ–±–Ω–æ–≤–ª–µ–Ω–æ):**

üìä –í—Å–µ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {stats.get('total_examples', 0)}
üìà –ù–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ: {stats.get('unused_examples', 0)}
üÜï –ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {stats.get('new_products_annotations', 0)}
"""
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_refresh_training_stats")],
        [InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–æ–æ–±—É—á–µ–Ω–∏–µ", callback_data="admin_start_training")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(stats_text, reply_markup=reply_markup)

async def view_training_examples(query, context):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—É—á–∞—é—â–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ callback"""
    try:
        training_service = get_training_service()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
        correct_examples = training_service.get_training_examples(feedback_type='correct', limit=5)
        incorrect_examples = training_service.get_training_examples(feedback_type='incorrect', limit=5)
        unused_examples = training_service.get_training_examples(is_used=False, limit=10)
        
        examples_text = f"""
üìù **–û–±—É—á–∞—é—â–∏–µ –ø—Ä–∏–º–µ—Ä—ã (–æ–±–Ω–æ–≤–ª–µ–Ω–æ):**

‚úÖ **–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã ({len(correct_examples)}):**
"""
        
        for ex in correct_examples[:3]:
            examples_text += f"‚Ä¢ ID: {ex['id']}, –¢–æ–≤–∞—Ä: {ex.get('target_item_id', '–ù/–î')}, –°—Ö–æ–∂–µ—Å—Ç—å: {ex.get('similarity_score', 0):.3f}\n"
        
        examples_text += f"""

‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã ({len(incorrect_examples)}):**
"""
        
        for ex in incorrect_examples[:3]:
            examples_text += f"‚Ä¢ ID: {ex['id']}, –¢–æ–≤–∞—Ä: {ex.get('target_item_id', '–ù/–î')}, –°—Ö–æ–∂–µ—Å—Ç—å: {ex.get('similarity_score', 0):.3f}\n"
        
        examples_text += f"""

üÜï **–ù–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã ({len(unused_examples)}):**
"""
        
        for ex in unused_examples[:5]:
            feedback_emoji = "‚úÖ" if ex['feedback_type'] == 'correct' else "‚ùå"
            examples_text += f"‚Ä¢ {feedback_emoji} ID: {ex['id']}, –¢–∏–ø: {ex['feedback_type']}\n"
        
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_refresh_training_stats")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="admin_refresh_examples")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(examples_text, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø—Ä–∏–º–µ—Ä–æ–≤: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤")

async def start_training_process(query, context):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–æ–±—É—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ callback"""
    try:
        training_service = get_training_service()
        stats = training_service.get_training_statistics()
        
        total_examples = stats.get('total_examples', 0)
        unused_examples = stats.get('unused_examples', 0)
        
        if total_examples < 10:
            await query.edit_message_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è!\n\n"
                f"üìä –ï—Å—Ç—å –ø—Ä–∏–º–µ—Ä–æ–≤: {total_examples}\n"
                f"üéØ –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º: 10\n\n"
                f"üìà –ù–∞–∫–æ–ø–∏—Ç–µ –±–æ–ª—å—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return
        
        confirmation_text = f"""
ü§ñ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏**

üìä **–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è:**
‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {total_examples}
‚Ä¢ –ù–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö: {unused_examples}

‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:**
‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–π–º–µ—Ç 5-15 –º–∏–Ω—É—Ç
‚Ä¢ –ë–æ—Ç –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–µ–ª–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é

üöÄ –ù–∞—á–∞—Ç—å –¥–æ–æ–±—É—á–µ–Ω–∏–µ?
"""
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, –∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="admin_confirm_training")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel_training")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(confirmation_text, reply_markup=reply_markup, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–æ–æ–±—É—á–µ–Ω–∏—è: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–æ–æ–±—É—á–µ–Ω–∏—è")

async def manage_new_products(query, context):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ —á–µ—Ä–µ–∑ callback"""
    try:
        training_service = get_training_service()
        pending_products = training_service.get_pending_new_products(limit=10)
        
        if not pending_products:
            await query.edit_message_text(
                "‚úÖ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è\n\n"
                "üìù –í—Å–µ –ø–æ—Å—Ç—É–ø–∏–≤—à–∏–µ –∑–∞—è–≤–∫–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã."
            )
            return
        
        products_text = f"‚ûï <b>–ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è ({len(pending_products)}):</b>\n\n"
        
        for i, product in enumerate(pending_products[:3], 1):
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML-—Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞
            product_name = str(product['product_name']).replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
            username = str(product.get('username', '–ê–Ω–æ–Ω–∏–º')).replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
            category = str(product.get('product_category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')).replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
            
            products_text += f"""<b>{i}. {product_name}</b>
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}
üë§ –û—Ç: {username}
üìÖ {product['created_at']}

"""
        
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        for product in pending_products[:3]:
            keyboard.append([
                InlineKeyboardButton(f"üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å #{product['id']}", 
                                   callback_data=f"fill_product_data_{product['id']}"),
                InlineKeyboardButton(f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å #{product['id']}", 
                                   callback_data=f"reject_product_{product['id']}")
            ])
        
        keyboard.extend([
            [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –≤—Å–µ –≥–æ—Ç–æ–≤—ã–µ", callback_data="admin_approve_products")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="admin_manage_new_products")]
        ])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(products_text, parse_mode='HTML', reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞–º–∏: {e}")
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:\n\n{str(e)}\n\n"
        error_msg += "üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
        error_msg += "‚Ä¢ –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö\n"
        error_msg += "‚Ä¢ –°–æ–∑–¥–∞–Ω–∞ –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ new_product_annotations\n"
        error_msg += "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω—ã –ª–∏ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è"
        await query.edit_message_text(error_msg)

async def approve_new_products(query, context):
    """–û–¥–æ–±—Ä–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –∫–∞—Ç–∞–ª–æ–≥"""
    try:
        training_service = get_training_service()
        pending_products = training_service.get_pending_new_products(limit=10)
        
        if not pending_products:
            await query.edit_message_text("‚úÖ –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await query.edit_message_text(
            f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {len(pending_products)} —Ç–æ–≤–∞—Ä–æ–≤...\n\n"
            "‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫\n"
            "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–∞—Ç–∞–ª–æ–≥\n"
            "‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
        )
        
        approved_count = 0
        catalog_added_count = 0
        
        for i, product in enumerate(pending_products, 1):
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            await query.edit_message_text(
                f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–æ–≤–∞—Ä {i}/{len(pending_products)}: {product['product_name'][:30]}...\n\n"
                f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {approved_count}\n"
                f"üì¶ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞—Ç–∞–ª–æ–≥: {catalog_added_count}"
            )
            
            # –û–¥–æ–±—Ä—è–µ–º —Ç–æ–≤–∞—Ä
            success = training_service.approve_new_product(
                annotation_id=product['id'],
                admin_id=query.from_user.id
            )
            
            if success:
                approved_count += 1
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞—Ç–∞–ª–æ–≥ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –≤–µ–∫—Ç–æ—Ä–æ–≤
                catalog_success = await add_approved_product_to_catalog(product['id'])
                
                if catalog_success:
                    catalog_added_count += 1
                    logger.info(f"‚úÖ –¢–æ–≤–∞—Ä #{product['id']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥: {product['product_name']}")
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä #{product['id']} –≤ –∫–∞—Ç–∞–ª–æ–≥")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_text = f"""<b>‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(pending_products)}
‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–æ –∑–∞—è–≤–æ–∫: {approved_count}
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞—Ç–∞–ª–æ–≥: {catalog_added_count}

<b>üì¶ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:</b>
"""
        
        for i, product in enumerate(pending_products[:approved_count], 1):
            status = "üì¶‚úÖ" if i <= catalog_added_count else "‚ö†Ô∏èüìù"
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            product_name = str(product['product_name']).replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
            result_text += f"{status} {i}. {product_name}\n"
        
        admin_name = str(query.from_user.first_name).replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
        result_text += f"""

<b>üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> {admin_name}
<b>üìÖ –î–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:</b> {datetime.now().strftime('%Y-%m-%d %H:%M')}

üîç –¢–æ–≤–∞—Ä—ã —Å –≤–µ–∫—Ç–æ—Ä–∞–º–∏ –≥–æ—Ç–æ–≤—ã –¥–ª—è –ø–æ–∏—Å–∫–∞!
‚ö†Ô∏è –¢–æ–≤–∞—Ä—ã –±–µ–∑ –≤–µ–∫—Ç–æ—Ä–æ–≤ —Ç—Ä–µ–±—É—é—Ç —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.
"""
        
        keyboard = [
            [InlineKeyboardButton("üìä –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="admin_refresh_training_stats")],
            [InlineKeyboardButton("‚ûï –ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã", callback_data="admin_manage_new_products")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(result_text, parse_mode='HTML', reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–æ–≤:\n\n{str(e)}\n\n"
            "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ–∑–∂–µ."
        )

async def create_model_backup(query, context):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –º–æ–¥–µ–ª–∏"""
    await query.edit_message_text("üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...\n\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    
    try:
        model_service = get_model_training_service()
        result = model_service.create_model_backup()
        
        if result.get('success'):
            size_mb = result.get('size', 0) / (1024 * 1024)
            success_text = f"""‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!

üíæ ID —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {result.get('backup_id')}
üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {result.get('created_at', '')[:19]}
üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {size_mb:.1f} MB
üìÅ –ü—É—Ç—å: models/backups/

–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é."""
            
            keyboard = [
                [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π", callback_data="admin_list_backups")],
                [InlineKeyboardButton("üìä –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="admin_refresh_training_stats")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(success_text, reply_markup=reply_markup)
        else:
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:\n\n{result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            await query.edit_message_text(error_text)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:\n\n{str(e)}")

async def list_model_backups(query, context):
    """–ü–æ–¥—Ä–æ–±–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
    try:
        model_service = get_model_training_service()
        backups = model_service.list_model_backups()
        
        if not backups:
            await query.edit_message_text(
                "üìÅ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏."
            )
            return
        
        backups_text = f"üìã –í—Å–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ ({len(backups)}):\n\n"
        
        for i, backup in enumerate(backups, 1):
            size_mb = backup['file_size'] / (1024 * 1024)
            backup_type = backup['backup_type']
            
            emoji = "üîÑ" if backup_type == "manual" else "‚ö°" if backup_type == "auto" else "üîô"
            
            backups_text += f"""{emoji} {i}. {backup['backup_id']}
üìÖ {backup['created_at'][:19]}
üíæ {size_mb:.1f} MB
üè∑Ô∏è –¢–∏–ø: {backup_type}
üìÅ {backup['model_type']}

"""
        
        keyboard = [
            [InlineKeyboardButton("üíæ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–ø–∏—é", callback_data="admin_create_backup")],
            [InlineKeyboardButton("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="admin_restore_backup")],
            [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ", callback_data="admin_cleanup_backups")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(backups_text, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–ø–∏–π: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π")

async def restore_backup_menu(query, context):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
    try:
        model_service = get_model_training_service()
        backups = model_service.list_model_backups()
        
        if not backups:
            await query.edit_message_text("üìÅ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
            return
        
        restore_text = "üîÑ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:\n\n"
        
        keyboard = []
        for backup in backups[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
            size_mb = backup['file_size'] / (1024 * 1024)
            button_text = f"{backup['backup_id'][:20]}... ({size_mb:.1f}MB)"
            callback_data = f"admin_restore_{backup['backup_id']}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_list_backups")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        restore_text += "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–∞!\n–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏."
        
        await query.edit_message_text(restore_text, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –º–µ–Ω—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")

async def restore_specific_backup(query, context, backup_id: str):
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    await query.edit_message_text(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...\n\n‚è≥ ID: {backup_id}")
    
    try:
        model_service = get_model_training_service()
        result = model_service.restore_model_from_backup(backup_id)
        
        if result.get('success'):
            success_text = f"""‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!

üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ–ø–∏—è: {backup_id}
üìÖ –í—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {result.get('restored_at', '')[:19]}
üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏

–ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é."""
            
            keyboard = [
                [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–æ–ø–∏–π", callback_data="admin_list_backups")],
                [InlineKeyboardButton("üìä –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="admin_refresh_training_stats")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(success_text, reply_markup=reply_markup)
        else:
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏:\n\n{result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            await query.edit_message_text(error_text)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏:\n\n{str(e)}")

async def cleanup_old_backups(query, context):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
    await query.edit_message_text("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π...\n\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    
    try:
        model_service = get_model_training_service()
        result = model_service.cleanup_old_backups(keep_count=10)  # –û—Å—Ç–∞–≤–ª—è–µ–º 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
        
        if result.get('success'):
            cleanup_text = f"""‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∫–æ–ø–∏–π: {result.get('deleted_count', 0)}
üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–æ–ø–∏–π: {result.get('kept_count', 0)}

{result.get('message', '')}"""
            
            keyboard = [
                [InlineKeyboardButton("üìã –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="admin_list_backups")],
                [InlineKeyboardButton("üìä –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="admin_refresh_training_stats")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(cleanup_text, reply_markup=reply_markup)
        else:
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:\n\n{result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            await query.edit_message_text(error_text)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:\n\n{str(e)}")

# ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –¢–û–í–ê–†–ê–ú–ò ====================

async def save_extended_product_data(annotation_id: int, product_data: dict):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞"""
    try:
        import sqlite3
        import json
        
        db_path = 'data/search_stats.db'
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS extended_product_data (
                annotation_id INTEGER PRIMARY KEY,
                item_id TEXT,
                url TEXT,
                picture_url TEXT,
                additional_data TEXT,
                FOREIGN KEY (annotation_id) REFERENCES new_product_annotations (id)
            )
        ''')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        additional_data = json.dumps({
            'created_via': 'admin_step_by_step_form',
            'version': '2.1.0'
        })
        
        cursor.execute('''
            INSERT OR REPLACE INTO extended_product_data 
            (annotation_id, item_id, url, picture_url, additional_data)
            VALUES (?, ?, ?, ?, ?)
        ''', (annotation_id, product_data['item_id'], product_data['url'],
              product_data['picture_url'], additional_data))
        
        conn.commit()
        conn.close()
        
        logger.info(f"üíæ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –∑–∞—è–≤–∫–∏ #{annotation_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")

async def add_approved_product_to_catalog(annotation_id: int):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–∞–ª–æ–≥ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –≤–µ–∫—Ç–æ—Ä–æ–≤"""
    try:
        import sqlite3
        import json
        import requests
        from datetime import datetime
        import numpy as np
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
        db_path = 'data/search_stats.db'
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        cursor.execute('''
            SELECT npa.product_name, npa.product_description, npa.image_path,
                   epd.item_id, epd.url, epd.picture_url
            FROM new_product_annotations npa
            LEFT JOIN extended_product_data epd ON npa.id = epd.annotation_id
            WHERE npa.id = ? AND npa.admin_approved = 1
        ''', (annotation_id,))
        
        row = cursor.fetchone()
        if not row:
            logger.error(f"‚ùå –¢–æ–≤–∞—Ä #{annotation_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω")
            return False
            
        product_name, description, image_path, item_id, url, picture_url = row
        conn.close()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–µ–∫—Ç–æ—Ä—ã —á–µ—Ä–µ–∑ CLIP
        from handlers.photo_handler import generate_product_vectors
        vectors = await generate_product_vectors(picture_url or image_path, product_name, description)
        if not vectors:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ç–æ–≤–∞—Ä–∞ #{annotation_id}")
            return False
            
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω—É—é –ë–î
        unified_db_path = 'data/unified_products.db'
        conn = sqlite3.connect(unified_db_path)
        cursor = conn.cursor()
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        timestamp = datetime.now().isoformat()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π item_id –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
        if not item_id:
            import uuid
            item_id = f"USER_{annotation_id}_{uuid.uuid4().hex[:8]}"
        
        cursor.execute('''
            INSERT OR REPLACE INTO products 
            (item_id, url, picture, vector)
            VALUES (?, ?, ?, ?)
        ''', (item_id, url, picture_url, vectors))
        
        product_row_id = cursor.lastrowid
        
        conn.commit()
        conn.close()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è—Ö
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        cursor.execute('''
            UPDATE new_product_annotations 
            SET added_to_catalog = 1 
            WHERE id = ?
        ''', (annotation_id,))
        conn.commit()
        conn.close()
        
        logger.info(f"‚úÖ –¢–æ–≤–∞—Ä #{annotation_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥ —Å ID {product_row_id}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥: {e}")
        return False

# ==================== –ü–û–®–ê–ì–û–í–û–ï –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• –¢–û–í–ê–†–ê ====================

async def handle_admin_product_step(update: Update, context: ContextTypes.DEFAULT_TYPE, user_input: str):
    """–ü–æ—à–∞–≥–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ –∞–¥–º–∏–Ω–æ–º"""
    try:
        product_data = context.user_data['admin_adding_product']
        current_step = product_data['step']
        annotation_id = product_data['annotation_id']
        
        if current_step == 'item_id':
            # –®–∞–≥ 1: –ü–æ–ª—É—á–∏–ª–∏ –õ–ú —Ç–æ–≤–∞—Ä–∞
            product_data['data']['item_id'] = user_input.strip()
            product_data['step'] = 'url'
            
            await update.message.reply_text(
                "‚úÖ –õ–ú —Ç–æ–≤–∞—Ä–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n\n"
                "üìù *–®–∞–≥ 2/5:* –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä\n\n"
                "üí° –ü—Ä–∏–º–µ—Ä: `https://lmpro.ru/catalog/item/12345`\n\n"
                "‚úçÔ∏è –í—Å—Ç–∞–≤—å—Ç–µ URL —Ç–æ–≤–∞—Ä–∞:",
                parse_mode='Markdown'
            )
            
        elif current_step == 'url':
            # –®–∞–≥ 2: –ü–æ–ª—É—á–∏–ª–∏ URL
            product_data['data']['url'] = user_input.strip()
            product_data['step'] = 'picture_url'
            
            await update.message.reply_text(
                "‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
                "üìù *–®–∞–≥ 3/5:* –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é\n\n"
                "üí° –ü—Ä–∏–º–µ—Ä: `https://lmpro.ru/images/product/abc123.jpg`\n\n"
                "‚úçÔ∏è –í—Å—Ç–∞–≤—å—Ç–µ URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:",
                parse_mode='Markdown'
            )
            
        elif current_step == 'picture_url':
            # –®–∞–≥ 3: –ü–æ–ª—É—á–∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ
            product_data['data']['picture_url'] = user_input.strip()
            product_data['step'] = 'name'
            
            await update.message.reply_text(
                "‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
                "üìù *–®–∞–≥ 4/5:* –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n\n"
                "üí° –ü—Ä–∏–º–µ—Ä: `–î—Ä–µ–ª—å —É–¥–∞—Ä–Ω–∞—è Makita HP2050H 720–í—Ç`\n\n"
                "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
                parse_mode='Markdown'
            )
            
        elif current_step == 'name':
            # –®–∞–≥ 4: –ü–æ–ª—É—á–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
            product_data['data']['name'] = user_input.strip()
            product_data['step'] = 'description'
            
            await update.message.reply_text(
                "‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
                "üìù *–®–∞–≥ 5/5:* –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n\n"
                "üí° –ü—Ä–∏–º–µ—Ä: `–≠–ª–µ–∫—Ç—Ä–æ–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–≤–µ—Ä–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ä—Å—Ç–∏–π –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö. –ú–æ—â–Ω–æ—Å—Ç—å 720 –í—Ç, —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞—Ä–∞, –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä —Å–≤–µ—Ä–ª–µ–Ω–∏—è 20–º–º.`\n\n"
                "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
                parse_mode='Markdown'
            )
            
        elif current_step == 'description':
            # –®–∞–≥ 5: –§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥ - –ø–æ–ª—É—á–∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ
            product_data['data']['description'] = user_input.strip()
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
            await finalize_admin_product(update, context, annotation_id, product_data['data'])
            
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ."
            )
            del context.user_data['admin_adding_product']
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —à–∞–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
        )
        if 'admin_adding_product' in context.user_data:
            del context.user_data['admin_adding_product']

async def finalize_admin_product(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                               annotation_id: int, product_data: dict):
    """–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∞–¥–º–∏–Ω–æ–º"""
    try:
        from services.training_data_service import get_training_service
        training_service = get_training_service()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
        training_service.update_product_annotation(
            annotation_id=annotation_id,
            product_name=product_data['name'],
            product_description=product_data['description']
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await save_extended_product_data(annotation_id, product_data)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞—Ç–∞–ª–æ–≥
        training_service.approve_new_product(
            annotation_id=annotation_id,
            admin_id=update.effective_user.id
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–∞–ª–æ–≥
        success = await add_approved_product_to_catalog(annotation_id)
        
        if success:
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            safe_item_id = str(product_data.get('item_id', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')).replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(']', '\\]').replace('`', '\\`')
            safe_url = str(product_data.get('url', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')).replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(']', '\\]').replace('`', '\\`')
            safe_picture_url = str(product_data.get('picture_url', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')).replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(']', '\\]').replace('`', '\\`')
            safe_name = str(product_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')).replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(']', '\\]').replace('`', '\\`')
            safe_description = str(product_data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')).replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(']', '\\]').replace('`', '\\`')
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—é–º–µ
            summary = (
                "‚úÖ *–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥!*\n\n"
                f"üìù *ID –∑–∞—è–≤–∫–∏:* #{annotation_id}\n"
                f"üè∑Ô∏è *–õ–ú —Ç–æ–≤–∞—Ä–∞:* `{safe_item_id}`\n"
                f"üîó *URL —Ç–æ–≤–∞—Ä–∞:* {safe_url}\n"
                f"üñºÔ∏è *URL —Ñ–æ—Ç–æ:* {safe_picture_url}\n"
                f"üì¶ *–ù–∞–∑–≤–∞–Ω–∏–µ:* {safe_name}\n"
                f"üìÑ *–û–ø–∏—Å–∞–Ω–∏–µ:* {safe_description}\n\n"
                "üéØ *–¢–æ–≤–∞—Ä —Å—Ä–∞–∑—É –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞!*\n"
                "‚úÖ –í–µ–∫—Ç–æ—Ä—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã\n"
                "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–∞–ª–æ–≥\n\n"
                "üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞!"
            )
            
            await update.message.reply_text(summary, parse_mode='Markdown')
            logger.info(f"‚úÖ –ê–¥–º–∏–Ω –¥–æ–±–∞–≤–∏–ª —Ç–æ–≤–∞—Ä #{annotation_id}: {product_data['name']}")
        else:
            await update.message.reply_text(
                f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ #{annotation_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥.\n\n"
                "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –æ–¥–æ–±—Ä–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤."
            )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        del context.user_data['admin_adding_product']
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ –∞–¥–º–∏–Ω–æ–º: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.\n\n"
            "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        if 'admin_adding_product' in context.user_data:
            del context.user_data['admin_adding_product'] 

async def start_product_data_filling(query, context, annotation_id: int):
    """–ù–∞—á–∞–ª–æ –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞"""
    try:
        from services.training_data_service import get_training_service
        training_service = get_training_service()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
        product_info = training_service.get_product_annotation(annotation_id)
        if not product_info or product_info['admin_approved'] != 0:
            await query.edit_message_text(
                f"‚ùå –¢–æ–≤–∞—Ä #{annotation_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω"
            )
            return
        
        ann_id = product_info['id']
        user_id = product_info['user_id'] 
        username = product_info['username']
        product_name = product_info['product_name']
        product_description = product_info['product_description']
        image_path = product_info['image_path']
        created_at = product_info['created_at']
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        safe_username = str(username or user_id).replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(']', '\\]').replace('`', '\\`')
        safe_description = str(product_description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ').replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(']', '\\]').replace('`', '\\`')
        safe_image_path = str(image_path or '–ù–µ —É–∫–∞–∑–∞–Ω–æ').replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(']', '\\]').replace('`', '\\`')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
        user_info = (
            f"üìù *–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ #{ann_id}*\n\n"
            f"üë§ *–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* {safe_username}\n"
            f"üì¶ *–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* {safe_description}\n"
            f"üìÖ *–î–∞—Ç–∞:* {created_at}\n\n"
            f"üñºÔ∏è *–§–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:* {safe_image_path}\n\n"
            f"üìù *–®–∞–≥ 1/5:* –í–≤–µ–¥–∏—Ç–µ –õ–ú —Ç–æ–≤–∞—Ä–∞ \\(–∞—Ä—Ç–∏–∫—É–ª\\)\n\n"
            f"üí° –ü—Ä–∏–º–µ—Ä: `–õ–ú-12345` –∏–ª–∏ `ABC-789`\n\n"
            f"‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
        context.user_data['admin_adding_product'] = {
            'annotation_id': annotation_id,
            'step': 'item_id',
            'data': {}
        }
        
        await query.edit_message_text(user_info, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def reject_single_product(query, context, annotation_id: int):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    try:
        from services.training_data_service import get_training_service
        training_service = get_training_service()
        
        # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–π
        training_service.reject_product_annotation(
            annotation_id=annotation_id,
            admin_id=query.from_user.id
        )
        
        await query.edit_message_text(
            f"‚ùå –¢–æ–≤–∞—Ä #{annotation_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω\n\n"
            f"üìù –ó–∞—è–≤–∫–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–∞—è –∏ –Ω–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥.\n\n"
            f"üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {query.from_user.first_name}\n"
            f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M')}"
        )
        
        logger.info(f"‚ùå –ê–¥–º–∏–Ω {query.from_user.id} –æ—Ç–∫–ª–æ–Ω–∏–ª —Ç–æ–≤–∞—Ä #{annotation_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}") 