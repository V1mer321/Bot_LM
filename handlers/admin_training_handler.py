import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from services.training_data_service import get_training_service
from services.model_training_service import get_model_training_service

logger = logging.getLogger(__name__)

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ config)
ADMIN_USER_IDS = [2093834331]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ª–æ–≥–æ–≤

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –±–æ—Ç–∞
    try:
        from toolbot.utils.access import is_allowed_user
        from toolbot.config import load_config
        
        config = load_config()
        if config:
            admin_ids = config.get('admin_users', []) or config.get('admin_ids', []) or config.get('admins', [])
            if user_id in admin_ids:
                return True
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É: {e}")
    
    # Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
    return user_id in ADMIN_USER_IDS

async def admin_training_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /admin_training_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    try:
        training_service = get_training_service()
        stats = training_service.get_training_statistics()
        
        stats_text = f"""
üß† **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π:**

üìä **–û–±—É—á–∞—é—â–∏–µ –ø—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {stats.get('total_examples', 0)}
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ: {stats.get('used_for_training', 0)}
‚Ä¢ –ù–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ: {stats.get('unused_examples', 0)}

üìã **–ü–æ —Ç–∏–ø–∞–º –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:**
"""
        
        feedback_types = stats.get('by_feedback_type', {})
        for feedback_type, count in feedback_types.items():
            emoji = "‚úÖ" if feedback_type == "correct" else "‚ùå" if feedback_type == "incorrect" else "‚ûï"
            stats_text += f"‚Ä¢ {emoji} {feedback_type}: {count}\n"
        
        stats_text += f"""

üÜï **–ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã:**
‚Ä¢ –ê–Ω–Ω–æ—Ç–∞—Ü–∏–π: {stats.get('new_products_annotations', 0)}
‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö: {stats.get('approved_new_products', 0)}

üéØ **–°–µ—Å—Å–∏–∏ –æ–±—É—á–µ–Ω–∏—è:**
‚Ä¢ –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {stats.get('training_sessions', 0)}

ü§ñ **–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å:**
‚Ä¢ –í–µ—Ä—Å–∏—è: {stats.get('current_model', {}).get('version', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')}
‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: {stats.get('current_model', {}).get('accuracy', '–ù/–î')}
‚Ä¢ –î–∞—Ç–∞: {stats.get('current_model', {}).get('date', '–ù/–î')}
"""
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="admin_refresh_training_stats")],
            [InlineKeyboardButton("üìù –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä—ã", callback_data="admin_view_examples")],
            [InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–æ–æ–±—É—á–µ–Ω–∏–µ", callback_data="admin_start_training")],
            [InlineKeyboardButton("‚ûï –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏", callback_data="admin_manage_new_products")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(stats_text, parse_mode='Markdown', reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def admin_start_training_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /admin_start_training - –∑–∞–ø—É—Å–∫ –¥–æ–æ–±—É—á–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    try:
        training_service = get_model_training_service()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = training_service.get_training_recommendations()
        
        if not recommendations.get('should_train', False):
            reasons_text = "\n".join([f"‚Ä¢ {reason}" for reason in recommendations.get('reasons', [])])
            await update.message.reply_text(
                f"‚ÑπÔ∏è –î–æ–æ–±—É—á–µ–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:\n\n{reasons_text}\n\n"
                f"–ù–∞–∫–æ–ø–∏—Ç–µ –±–æ–ª—å—à–µ –æ–±—É—á–∞—é—â–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."
            )
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è
        reasons_text = "\n".join([f"‚Ä¢ {reason}" for reason in recommendations.get('reasons', [])])
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–æ–æ–±—É—á–µ–Ω–∏–µ", callback_data="admin_confirm_training")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel_training")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"üöÄ **–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É –¥–æ–æ–±—É—á–µ–Ω–∏—è!**\n\n"
            f"üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n{reasons_text}\n\n"
            f"‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.\n"
            f"üîÑ –ë–æ—Ç –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è.\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø—É—Å–∫?",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –¥–æ–æ–±—É—á–µ–Ω–∏—é: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –¥–æ–æ–±—É—á–µ–Ω–∏—é")

async def admin_view_examples_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /admin_view_examples - –ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—É—á–∞—é—â–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    try:
        training_service = get_training_service()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
        correct_examples = training_service.get_training_examples(feedback_type='correct', limit=5)
        incorrect_examples = training_service.get_training_examples(feedback_type='incorrect', limit=5)
        unused_examples = training_service.get_training_examples(is_used=False, limit=10)
        
        examples_text = f"""
üìù **–û–±—É—á–∞—é—â–∏–µ –ø—Ä–∏–º–µ—Ä—ã:**

‚úÖ **–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã ({len(correct_examples)}):**
"""
        
        for ex in correct_examples[:3]:
            examples_text += f"‚Ä¢ ID: {ex['id']}, –¢–æ–≤–∞—Ä: {ex.get('target_item_id', '–ù/–î')}, –°—Ö–æ–∂–µ—Å—Ç—å: {ex.get('similarity_score', 0):.3f}\n"
        
        examples_text += f"""

‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã ({len(incorrect_examples)}):**
"""
        
        for ex in incorrect_examples[:3]:
            examples_text += f"‚Ä¢ ID: {ex['id']}, –¢–æ–≤–∞—Ä: {ex.get('target_item_id', '–ù/–î')}, –°—Ö–æ–∂–µ—Å—Ç—å: {ex.get('similarity_score', 0):.3f}\n"
        
        examples_text += f"""

üÜï **–ù–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã ({len(unused_examples)}):**
"""
        
        for ex in unused_examples[:5]:
            feedback_emoji = "‚úÖ" if ex['feedback_type'] == 'correct' else "‚ùå"
            examples_text += f"‚Ä¢ {feedback_emoji} ID: {ex['id']}, –¢–∏–ø: {ex['feedback_type']}\n"
        
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_refresh_training_stats")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="admin_refresh_examples")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(examples_text, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø—Ä–∏–º–µ—Ä–æ–≤: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤")

async def admin_manage_new_products_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /admin_new_products - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    try:
        training_service = get_training_service()
        pending_products = training_service.get_pending_new_products(limit=10)
        
        if not pending_products:
            await update.message.reply_text(
                "‚úÖ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è\n\n"
                "üìù –í—Å–µ –ø–æ—Å—Ç—É–ø–∏–≤—à–∏–µ –∑–∞—è–≤–∫–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã."
            )
            return
        
        products_text = f"‚ûï **–ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è ({len(pending_products)}):**\n\n"
        
        for i, product in enumerate(pending_products[:5], 1):
            products_text += f"""
**{i}. {product['product_name']}**
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product.get('product_category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
üìã –û–ø–∏—Å–∞–Ω–∏–µ: {product.get('product_description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {product.get('username', '–ê–Ω–æ–Ω–∏–º')} (ID: {product['user_id']})
üìÖ –î–∞—Ç–∞: {product['created_at']}
üîó ID –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏: #{product['id']}

"""
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data="admin_approve_products")],
            [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data="admin_reject_products")],
            [InlineKeyboardButton("üìã –ü–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="admin_detailed_products")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(products_text, parse_mode='Markdown', reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")

async def admin_model_backups_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /admin_model_backups - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏ –º–æ–¥–µ–ª–µ–π"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    try:
        model_service = get_model_training_service()
        backups = model_service.list_model_backups()
        
        if not backups:
            backups_text = """üíæ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏ –º–æ–¥–µ–ª–µ–π

üìÅ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã

–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
‚Ä¢ –ü–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –¥–æ–æ–±—É—á–µ–Ω–∏–µ–º
‚Ä¢ –ü—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
‚Ä¢ –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é –¥–ª—è —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏"""
        else:
            backups_text = f"""üíæ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏ –º–æ–¥–µ–ª–µ–π

üìÅ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {len(backups)}

"""
            
            for i, backup in enumerate(backups[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                size_mb = backup['file_size'] / (1024 * 1024)
                backup_type = backup['backup_type']
                
                emoji = "üîÑ" if backup_type == "manual" else "‚ö°" if backup_type == "auto" else "üîô"
                
                backups_text += f"""{emoji} {i}. {backup['backup_id']}
   üìÖ {backup['created_at'][:19]}
   üíæ {size_mb:.1f} MB ({backup_type})

"""
        
        keyboard = [
            [InlineKeyboardButton("üíæ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é", callback_data="admin_create_backup")],
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–ø–∏–π", callback_data="admin_list_backups")],
            [InlineKeyboardButton("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –∫–æ–ø–∏–∏", callback_data="admin_restore_backup")],
            [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∫–æ–ø–∏–∏", callback_data="admin_cleanup_backups")],
            [InlineKeyboardButton("üìä –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="admin_refresh_training_stats")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(backups_text, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏")

# ================= CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =================

async def handle_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    await query.answer()
    
    try:
        if query.data == "admin_refresh_training_stats":
            await refresh_training_stats(query, context)
        
        elif query.data == "admin_view_examples":
            await view_training_examples(query, context)
        
        elif query.data == "admin_start_training":
            await start_training_process(query, context)
        
        elif query.data == "admin_confirm_training":
            await confirm_training_start(query, context)
        
        elif query.data == "admin_cancel_training":
            await query.edit_message_text("‚ùå –î–æ–æ–±—É—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        
        elif query.data == "admin_manage_new_products":
            await manage_new_products(query, context)
        
        elif query.data == "admin_approve_products":
            await approve_new_products(query, context)
        
        elif query.data == "admin_refresh_examples":
            await view_training_examples(query, context)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
        elif query.data == "admin_create_backup":
            await create_model_backup(query, context)
        
        elif query.data == "admin_list_backups":
            await list_model_backups(query, context)
        
        elif query.data == "admin_restore_backup":
            await restore_backup_menu(query, context)
        
        elif query.data == "admin_cleanup_backups":
            await cleanup_old_backups(query, context)
        
        elif query.data.startswith("admin_restore_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            backup_id = query.data.replace("admin_restore_", "")
            await restore_specific_backup(query, context, backup_id)
        
        else:
            await query.edit_message_text("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin callback: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")

async def confirm_training_start(query, context):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –¥–æ–æ–±—É—á–µ–Ω–∏—è"""
    await query.edit_message_text("üöÄ –ó–∞–ø—É—Å–∫ –¥–æ–æ–±—É—á–µ–Ω–∏—è...\n\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    
    try:
        training_service = get_model_training_service()
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        train_data, val_data = training_service.prepare_training_data(min_examples=10)
        
        if not train_data:
            await query.edit_message_text(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–æ–æ–±—É—á–µ–Ω–∏—è.\n\n"
                "üìä –ù–∞–∫–æ–ø–∏—Ç–µ –±–æ–ª—å—à–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ–æ–±—É—á–µ–Ω–∏–µ
        result = training_service.fine_tune_model(train_data, val_data)
        
        if result.get('success'):
            success_text = f"""
‚úÖ **–î–æ–æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!**

ü§ñ –ú–æ–¥–µ–ª—å: {result.get('model_version')}
üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {result.get('examples_used')}
‚è±Ô∏è –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {result.get('training_duration')} —Å–µ–∫
üìà –¢–æ—á–Ω–æ—Å—Ç—å –¥–æ: {result.get('accuracy_before', '–ù/–î'):.3f}
üìà –¢–æ—á–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ: {result.get('accuracy_after', '–ù/–î'):.3f}

üéØ –ú–æ–¥–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!
"""
            await query.edit_message_text(success_text, parse_mode='Markdown')
        else:
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–æ–±—É—á–µ–Ω–∏–∏:\n\n{result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            await query.edit_message_text(error_text)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–æ–±—É—á–µ–Ω–∏–∏: {e}")
        await query.edit_message_text(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–æ–±—É—á–µ–Ω–∏–∏:\n\n{str(e)}")

async def refresh_training_stats(query, context):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è"""
    training_service = get_training_service()
    stats = training_service.get_training_statistics()
    
    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ admin_training_stats_command, –Ω–æ —á–µ—Ä–µ–∑ edit_message
    stats_text = f"""
üß† **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–æ–±—É—á–µ–Ω–∏—è (–æ–±–Ω–æ–≤–ª–µ–Ω–æ):**

üìä –í—Å–µ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {stats.get('total_examples', 0)}
üìà –ù–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ: {stats.get('unused_examples', 0)}
üÜï –ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {stats.get('new_products_annotations', 0)}
"""
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_refresh_training_stats")],
        [InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–æ–æ–±—É—á–µ–Ω–∏–µ", callback_data="admin_start_training")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(stats_text, reply_markup=reply_markup)

async def view_training_examples(query, context):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—É—á–∞—é—â–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ callback"""
    try:
        training_service = get_training_service()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
        correct_examples = training_service.get_training_examples(feedback_type='correct', limit=5)
        incorrect_examples = training_service.get_training_examples(feedback_type='incorrect', limit=5)
        unused_examples = training_service.get_training_examples(is_used=False, limit=10)
        
        examples_text = f"""
üìù **–û–±—É—á–∞—é—â–∏–µ –ø—Ä–∏–º–µ—Ä—ã (–æ–±–Ω–æ–≤–ª–µ–Ω–æ):**

‚úÖ **–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã ({len(correct_examples)}):**
"""
        
        for ex in correct_examples[:3]:
            examples_text += f"‚Ä¢ ID: {ex['id']}, –¢–æ–≤–∞—Ä: {ex.get('target_item_id', '–ù/–î')}, –°—Ö–æ–∂–µ—Å—Ç—å: {ex.get('similarity_score', 0):.3f}\n"
        
        examples_text += f"""

‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã ({len(incorrect_examples)}):**
"""
        
        for ex in incorrect_examples[:3]:
            examples_text += f"‚Ä¢ ID: {ex['id']}, –¢–æ–≤–∞—Ä: {ex.get('target_item_id', '–ù/–î')}, –°—Ö–æ–∂–µ—Å—Ç—å: {ex.get('similarity_score', 0):.3f}\n"
        
        examples_text += f"""

üÜï **–ù–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã ({len(unused_examples)}):**
"""
        
        for ex in unused_examples[:5]:
            feedback_emoji = "‚úÖ" if ex['feedback_type'] == 'correct' else "‚ùå"
            examples_text += f"‚Ä¢ {feedback_emoji} ID: {ex['id']}, –¢–∏–ø: {ex['feedback_type']}\n"
        
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_refresh_training_stats")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="admin_refresh_examples")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(examples_text, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø—Ä–∏–º–µ—Ä–æ–≤: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤")

async def start_training_process(query, context):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–æ–±—É—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ callback"""
    try:
        training_service = get_training_service()
        stats = training_service.get_training_statistics()
        
        total_examples = stats.get('total_examples', 0)
        unused_examples = stats.get('unused_examples', 0)
        
        if total_examples < 10:
            await query.edit_message_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è!\n\n"
                f"üìä –ï—Å—Ç—å –ø—Ä–∏–º–µ—Ä–æ–≤: {total_examples}\n"
                f"üéØ –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º: 10\n\n"
                f"üìà –ù–∞–∫–æ–ø–∏—Ç–µ –±–æ–ª—å—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return
        
        confirmation_text = f"""
ü§ñ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏**

üìä **–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è:**
‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {total_examples}
‚Ä¢ –ù–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö: {unused_examples}

‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:**
‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–π–º–µ—Ç 5-15 –º–∏–Ω—É—Ç
‚Ä¢ –ë–æ—Ç –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–µ–ª–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é

üöÄ –ù–∞—á–∞—Ç—å –¥–æ–æ–±—É—á–µ–Ω–∏–µ?
"""
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, –∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="admin_confirm_training")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel_training")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(confirmation_text, reply_markup=reply_markup, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–æ–æ–±—É—á–µ–Ω–∏—è: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–æ–æ–±—É—á–µ–Ω–∏—è")

async def manage_new_products(query, context):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ —á–µ—Ä–µ–∑ callback"""
    try:
        training_service = get_training_service()
        pending_products = training_service.get_pending_new_products(limit=10)
        
        if not pending_products:
            await query.edit_message_text(
                "‚úÖ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è\n\n"
                "üìù –í—Å–µ –ø–æ—Å—Ç—É–ø–∏–≤—à–∏–µ –∑–∞—è–≤–∫–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã."
            )
            return
        
        products_text = f"‚ûï **–ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è ({len(pending_products)}):**\n\n"
        
        for i, product in enumerate(pending_products[:3], 1):
            products_text += f"""
**{i}. {product['product_name']}**
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product.get('product_category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
üë§ –û—Ç: {product.get('username', '–ê–Ω–æ–Ω–∏–º')}
üìÖ {product['created_at']}

"""
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data="admin_approve_products")],
            [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data="admin_reject_products")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="admin_manage_new_products")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(products_text, parse_mode='Markdown', reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞–º–∏: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤")

async def approve_new_products(query, context):
    """–û–¥–æ–±—Ä–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        training_service = get_training_service()
        pending_products = training_service.get_pending_new_products(limit=5)
        
        if not pending_products:
            await query.edit_message_text("‚úÖ –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è")
            return
        
        approved_count = 0
        for product in pending_products:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–¥–æ–±—Ä–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ –ë–î
            try:
                training_service.approve_new_product(product['id'])
                approved_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ {product['id']}: {e}")
        
        result_text = f"""
‚úÖ **–¢–æ–≤–∞—Ä—ã –æ–¥–æ–±—Ä–µ–Ω—ã!**

üì¶ –û–¥–æ–±—Ä–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {approved_count}
üìß –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
üîÑ –¢–æ–≤–∞—Ä—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–∞—Ç–∞–ª–æ–≥

üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –∫–∞—Ç–∞–ª–æ–≥–∞.
"""
        
        await query.edit_message_text(result_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤")

async def create_model_backup(query, context):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –º–æ–¥–µ–ª–∏"""
    await query.edit_message_text("üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...\n\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    
    try:
        model_service = get_model_training_service()
        result = model_service.create_model_backup()
        
        if result.get('success'):
            size_mb = result.get('size', 0) / (1024 * 1024)
            success_text = f"""‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!

üíæ ID —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {result.get('backup_id')}
üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {result.get('created_at', '')[:19]}
üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {size_mb:.1f} MB
üìÅ –ü—É—Ç—å: models/backups/

–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é."""
            
            keyboard = [
                [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π", callback_data="admin_list_backups")],
                [InlineKeyboardButton("üìä –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="admin_refresh_training_stats")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(success_text, reply_markup=reply_markup)
        else:
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:\n\n{result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            await query.edit_message_text(error_text)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:\n\n{str(e)}")

async def list_model_backups(query, context):
    """–ü–æ–¥—Ä–æ–±–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
    try:
        model_service = get_model_training_service()
        backups = model_service.list_model_backups()
        
        if not backups:
            await query.edit_message_text(
                "üìÅ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏."
            )
            return
        
        backups_text = f"üìã –í—Å–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ ({len(backups)}):\n\n"
        
        for i, backup in enumerate(backups, 1):
            size_mb = backup['file_size'] / (1024 * 1024)
            backup_type = backup['backup_type']
            
            emoji = "üîÑ" if backup_type == "manual" else "‚ö°" if backup_type == "auto" else "üîô"
            
            backups_text += f"""{emoji} {i}. {backup['backup_id']}
üìÖ {backup['created_at'][:19]}
üíæ {size_mb:.1f} MB
üè∑Ô∏è –¢–∏–ø: {backup_type}
üìÅ {backup['model_type']}

"""
        
        keyboard = [
            [InlineKeyboardButton("üíæ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–ø–∏—é", callback_data="admin_create_backup")],
            [InlineKeyboardButton("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="admin_restore_backup")],
            [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ", callback_data="admin_cleanup_backups")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(backups_text, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–ø–∏–π: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π")

async def restore_backup_menu(query, context):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
    try:
        model_service = get_model_training_service()
        backups = model_service.list_model_backups()
        
        if not backups:
            await query.edit_message_text("üìÅ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
            return
        
        restore_text = "üîÑ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:\n\n"
        
        keyboard = []
        for backup in backups[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
            size_mb = backup['file_size'] / (1024 * 1024)
            button_text = f"{backup['backup_id'][:20]}... ({size_mb:.1f}MB)"
            callback_data = f"admin_restore_{backup['backup_id']}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_list_backups")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        restore_text += "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–∞!\n–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏."
        
        await query.edit_message_text(restore_text, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –º–µ–Ω—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")

async def restore_specific_backup(query, context, backup_id: str):
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    await query.edit_message_text(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...\n\n‚è≥ ID: {backup_id}")
    
    try:
        model_service = get_model_training_service()
        result = model_service.restore_model_from_backup(backup_id)
        
        if result.get('success'):
            success_text = f"""‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!

üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ–ø–∏—è: {backup_id}
üìÖ –í—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {result.get('restored_at', '')[:19]}
üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏

–ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é."""
            
            keyboard = [
                [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–æ–ø–∏–π", callback_data="admin_list_backups")],
                [InlineKeyboardButton("üìä –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="admin_refresh_training_stats")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(success_text, reply_markup=reply_markup)
        else:
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏:\n\n{result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            await query.edit_message_text(error_text)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏:\n\n{str(e)}")

async def cleanup_old_backups(query, context):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
    await query.edit_message_text("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π...\n\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    
    try:
        model_service = get_model_training_service()
        result = model_service.cleanup_old_backups(keep_count=10)  # –û—Å—Ç–∞–≤–ª—è–µ–º 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
        
        if result.get('success'):
            cleanup_text = f"""‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∫–æ–ø–∏–π: {result.get('deleted_count', 0)}
üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–æ–ø–∏–π: {result.get('kept_count', 0)}

{result.get('message', '')}"""
            
            keyboard = [
                [InlineKeyboardButton("üìã –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="admin_list_backups")],
                [InlineKeyboardButton("üìä –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="admin_refresh_training_stats")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(cleanup_text, reply_markup=reply_markup)
        else:
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:\n\n{result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            await query.edit_message_text(error_text)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:\n\n{str(e)}") 