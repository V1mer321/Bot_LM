import os
import logging
import hashlib
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

logger = logging.getLogger(__name__)

# –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–∏—Å–∫–∞ (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏)
_unified_db_service = None

def get_unified_db_service():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞ —Å –ª–µ–Ω–∏–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    global _unified_db_service
    if _unified_db_service is None:
        try:
            logger.info("–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UnifiedDatabaseService...")
            from services.unified_database_search import UnifiedDatabaseService
            _unified_db_service = UnifiedDatabaseService()
            logger.info("‚úì UnifiedDatabaseService —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UnifiedDatabaseService: {e}")
            raise
    return _unified_db_service

def get_stats_service():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        from services.search_statistics import get_stats_service
        return get_stats_service()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return None

def get_short_id(photo_file_id):
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π —Ö–µ—à –∏–∑ photo_file_id –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ callback_data"""
    return hashlib.md5(photo_file_id.encode()).hexdigest()[:8]

def safe_callback_data(data):
    """–°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π callback_data —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–ª–∏–Ω—ã"""
    if len(data.encode('utf-8')) > 64:
        logger.warning(f"Callback data —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π: {len(data)} —Å–∏–º–≤–æ–ª–æ–≤, –æ–±—Ä–µ–∑–∞–µ–º")
        return data[:60] + "..."
    return data

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–æ–≤
DEPARTMENTS = [
    "üß± –°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
    "ü™ë –°—Ç–æ–ª—è—Ä–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è", 
    "‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞",
    "üîß –°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞",
    "üé® –ö—Ä–∞—Å–∫–∏ –∏ –ª–∞–∫–∏",
    "üî© –ö—Ä–µ–ø—ë–∂ –∏ –º–µ—Ç–∏–∑—ã",
    "üö™ –î–≤–µ—Ä–∏, –æ–∫–Ω–∞",
    "üè† –ö—Ä–æ–≤–ª—è",
    "üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç",
    "üßΩ –•–æ–∑—Ç–æ–≤–∞—Ä—ã"
]

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    import time
    start_time = time.time()
    
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
        try:
            from toolbot.services.monitoring import monitoring
            user_id = update.effective_user.id
            monitoring.log_user_activity(user_id, 'photo_search', {
                'file_id': update.message.photo[-1].file_id[:20] + '...'  # –ö–æ—Ä–æ—Ç–∫–∏–π ID –¥–ª—è –ª–æ–≥–æ–≤
            })
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
        
        photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        file = await context.bot.get_file(photo.file_id)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        os.makedirs('temp', exist_ok=True)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        photo_path = f'temp/{photo.file_id}.jpg'
        await file.download_to_drive(photo_path)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
        loading_message = await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∏—â—É –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã...")
        
        # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        unified_db_service = get_unified_db_service()
        search_method = "stable"
        similar_products = unified_db_service.search_with_stability_check(photo_path, top_k=5)
        
        # –ï—Å–ª–∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ —Å –ø–æ–Ω–∏–∂–µ–Ω–Ω—ã–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏
        if not similar_products:
            logger.info("–°—Ç–∞–±–∏–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫...")
            search_method = "threshold"
            similar_products = unified_db_service.search_with_multiple_thresholds(photo_path, top_k=5)
        
        # –ï—Å–ª–∏ –∏ –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø—Ä–æ–±—É–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
        if not similar_products:
            logger.info("–û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø—Ä–æ–±—É–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫...")
            search_method = "aggressive"
            similar_products = unified_db_service.aggressive_search(photo_path, top_k=5)
            
            # –ï—Å–ª–∏ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
            if similar_products:
                await update.message.reply_text(
                    "‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –Ω–∞–π–¥–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –Ω–∏–∑–∫–æ–π —Å—Ö–æ–∂–µ—Å—Ç—å—é.\n"
                    "–í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–∏ —Ç–æ–≤–∞—Ä—ã –Ω–µ —Å–æ–≤—Å–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É."
                )
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –ø–æ–∏—Å–∫–∞
        stats_service = get_stats_service()
        if stats_service:
            user_id = update.effective_user.id
            username = update.effective_user.username or update.effective_user.first_name
            session_id = stats_service.log_search_session(
                user_id=user_id,
                username=username,
                photo_file_id=photo.file_id,
                results=similar_products or [],
                search_method=search_method
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–∏—Å–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–≠—Ç–æ –Ω–µ –º–æ–π —Ç–æ–≤–∞—Ä"
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π ID –¥–ª—è callback_data, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            short_id = get_short_id(photo.file_id)
            context.user_data[f'search_session_{short_id}'] = {
                'session_id': session_id,
                'user_id': user_id,
                'username': username,
                'photo_file_id': photo.file_id,  # –ü–æ–ª–Ω—ã–π file_id –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                'results': similar_products or [],
                'search_method': search_method
            }
        
        # –í—ã–≤–æ–¥–∏–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –≤ –ª–æ–≥–∏
        if similar_products:
            similarities = [p['similarity'] for p in similar_products]
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(similar_products)} —Ç–æ–≤–∞—Ä–æ–≤, —Å—Ö–æ–∂–µ—Å—Ç–∏: {similarities}")
        else:
            logger.warning("–ù–∏ –æ–¥–∏–Ω –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            stats = unified_db_service.get_database_stats()
            logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î: {stats}")
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(photo_path):
            os.remove(photo_path)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await loading_message.delete()
        
        if not similar_products:
            await update.message.reply_text(
                "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã.\n\n"
                "üéØ –î–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:\n"
                "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä\n"
                "‚Ä¢ –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –±–æ–ª–µ–µ —á—ë—Ç–∫–∏–º –∏ –∫—Ä—É–ø–Ω—ã–º\n"
                "‚Ä¢ –£–±–µ—Ä–∏—Ç–µ –ª–∏—à–Ω–∏–µ –æ–±—ä–µ–∫—Ç—ã –∏–∑ –∫–∞–¥—Ä–∞\n"
                "‚Ä¢ –£–ª—É—á—à–∏—Ç–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ\n"
                "‚Ä¢ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —Ç–æ–≤–∞—Ä —Å —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∫—É—Ä—Å–æ–≤\n\n"
                "üí° –ë–æ—Ç –∏—â–µ—Ç —Ç–æ–ª—å–∫–æ —Å—Ä–µ–¥–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–æ–º–∞.\n\n"
                "üêõ –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–µ–π '–°–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–µ' –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ—Ä–æ–≥–∏ –ø–æ–Ω–∏–∂–µ–Ω—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞)
        best_similarity = similar_products[0]['similarity']
        if best_similarity < 0.3:  # –ü–æ–Ω–∏–∂–µ–Ω —Å 0.5 –¥–æ 0.3
            quality_warning = "\n‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –Ω–∏–∑–∫–æ–π —Å—Ö–æ–∂–µ—Å—Ç—å—é - –≤–æ–∑–º–æ–∂–Ω–æ, —Ç–æ–≤–∞—Ä –Ω–µ –∏–∑ –Ω–∞—à–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞"
        elif best_similarity < 0.5:  # –ü–æ–Ω–∏–∂–µ–Ω —Å 0.7 –¥–æ 0.5
            quality_warning = "\nüìù –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —É–º–µ—Ä–µ–Ω–Ω–æ–π —Å—Ö–æ–∂–µ—Å—Ç—å—é"
        else:
            quality_warning = "\n‚úÖ –ù–∞–π–¥–µ–Ω—ã –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã!"
        
        await update.message.reply_text(
            f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(similar_products)} —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤{quality_warning}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await send_search_results(update, context, similar_products, get_short_id(photo.file_id))
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        try:
            from toolbot.services.monitoring import monitoring
            response_time = (time.time() - start_time) * 1000  # –í –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            monitoring.log_response_time('photo_search', response_time, success=True)
            monitoring.log_model_performance('image_search', response_time, accuracy=best_similarity if similar_products else 0)
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
        try:
            from toolbot.services.monitoring import monitoring
            response_time = (time.time() - start_time) * 1000
            monitoring.log_response_time('photo_search', response_time, success=False)
        except:
            pass
            
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

async def send_search_results(update: Update, context: ContextTypes.DEFAULT_TYPE, products, short_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    try:
        for i, product in enumerate(products, 1):
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º similarity –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
            similarity_percent = int(product['similarity'] * 100)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å
            stability = product.get('stability', 1.0)
            stability_percent = int(stability * 100)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (–ø–æ–Ω–∏–∂–µ–Ω—ã –ø–æ—Ä–æ–≥–∏)
            if similarity_percent >= 70:  # –ü–æ–Ω–∏–∂–µ–Ω —Å 80
                quality_emoji = "üéØ"
                quality_text = "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ"
            elif similarity_percent >= 50:  # –ü–æ–Ω–∏–∂–µ–Ω —Å 65
                quality_emoji = "‚úÖ"
                quality_text = "–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ"
            elif similarity_percent >= 35:  # –ü–æ–Ω–∏–∂–µ–Ω —Å 50
                quality_emoji = "üìù"
                quality_text = "–•–æ—Ä–æ—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ"
            elif similarity_percent >= 20:  # –ü–æ–Ω–∏–∂–µ–Ω —Å 35
                quality_emoji = "üîç"
                quality_text = "–£–º–µ—Ä–µ–Ω–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ"
            else:
                quality_emoji = "‚ùì"
                quality_text = "–í–æ–∑–º–æ–∂–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ"
            
            caption = (
                f"{quality_emoji} –†–µ–∑—É–ª—å—Ç–∞—Ç {i} - {quality_text}\n"
                f"üìä –°—Ö–æ–∂–µ—Å—Ç—å: {similarity_percent}% (—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {stability_percent}%)\n"
                f"üè∑Ô∏è –ê—Ä—Ç–∏–∫—É–ª: {product['item_id']}\n"
                f"üåê –°—Å—ã–ª–∫–∞: {product['url']}"
            )
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
            keyboard = [
                [InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å —Ç–æ–≤–∞—Ä", url=product['url'])],
                [InlineKeyboardButton("üìã –í—ã–±—Ä–∞—Ç—å –æ—Ç–¥–µ–ª", callback_data=safe_callback_data(f"select_dept_{product['item_id']}"))],
                [
                    InlineKeyboardButton("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ", callback_data=safe_callback_data(f"correct_{short_id}_{i}_{product['item_id']}")),
                    InlineKeyboardButton("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ", callback_data=safe_callback_data(f"incorrect_{short_id}_{i}_{product['item_id']}"))
                ],
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä", callback_data=safe_callback_data(f"new_item_{short_id}"))]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            try:
                await context.bot.send_photo(
                    chat_id=update.effective_chat.id,
                    photo=product['picture'],
                    caption=caption,
                    reply_markup=reply_markup
                )
            except Exception as e:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
                await update.message.reply_text(
                    text=caption,
                    reply_markup=reply_markup
                )
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞.")

async def handle_department_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç–¥–µ–ª–∞"""
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith("select_dept_"):
        item_id = query.data.replace("select_dept_", "")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç–¥–µ–ª–∞–º–∏
        keyboard = []
        for dept in DEPARTMENTS:
            keyboard.append([InlineKeyboardButton(dept, callback_data=f"dept_{dept}_{item_id}")])
        
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_caption(
            caption=f"–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {item_id}:",
            reply_markup=reply_markup
        )
    
    elif query.data.startswith("dept_"):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        parts = query.data.split("_", 2)
        if len(parts) >= 3:
            dept_name = parts[1]
            item_id = parts[2]
            
            await query.edit_message_caption(
                caption=f"‚úÖ –¢–æ–≤–∞—Ä {item_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç–¥–µ–ª '{dept_name}'"
            )
    
    elif query.data == "cancel":
        await query.edit_message_caption(
            caption="‚ùå –í—ã–±–æ—Ä –æ—Ç–¥–µ–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω"
        )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î
async def get_database_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    unified_db_service = get_unified_db_service()
    return unified_db_service.get_database_stats()

async def handle_not_my_item_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–≠—Ç–æ –Ω–µ –º–æ–π —Ç–æ–≤–∞—Ä'"""
    query = update.callback_query
    await query.answer()
    
    try:
        # –ü–∞—Ä—Å–∏–º callback_data: not_my_item_{short_id}_{result_index}
        data_parts = query.data.split('_')
        if len(data_parts) >= 4:
            short_id = data_parts[3]  # –ö–æ—Ä–æ—Ç–∫–∏–π ID
            result_index = int(data_parts[4])
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É ID
            search_key = f'search_session_{short_id}'
            search_context = context.user_data.get(search_key)
            
            if search_context:
                stats_service = get_stats_service()
                if stats_service:
                    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–π –ø–æ–∏—Å–∫
                    stats_service.log_failed_search(
                        user_id=search_context['user_id'],
                        username=search_context['username'],
                        photo_file_id=search_context['photo_file_id'],
                        search_results=search_context['results'],
                        feedback_type='not_my_product'
                    )
                    
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {search_context['user_id']} –æ—Ç–º–µ—Ç–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç {result_index} –∫–∞–∫ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π")
                
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                keyboard = [
                    [InlineKeyboardButton("üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"add_comment_{short_id}")],
                    [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ", callback_data="try_another_photo")],
                    [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", callback_data="contact_support")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_caption(
                    caption="‚ùå –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!\n\n"
                           "üìä –í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–∞.\n\n"
                           "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
                    reply_markup=reply_markup
                )
            else:
                await query.edit_message_caption(
                    caption="‚ùå –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!\n\n"
                           "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–∏—Å–∫–∞."
                )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ '–Ω–µ –º–æ–π —Ç–æ–≤–∞—Ä': {e}")
        await query.edit_message_caption(
            caption="‚ùå –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!\n\n"
                   "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –Ω–æ –≤–∞—à –æ—Ç–∑—ã–≤ —É—á—Ç–µ–Ω."
        )

async def handle_add_comment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    query = update.callback_query
    await query.answer()
    
    try:
        # –ü–∞—Ä—Å–∏–º callback_data: add_comment_{short_id}
        short_id = query.data.replace('add_comment_', '')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        context.user_data['awaiting_comment_for'] = short_id
        
        await query.edit_message_caption(
            caption="üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ —Ç–æ–º, –∫–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤—ã –∏—Å–∫–∞–ª–∏.\n\n"
                   "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–∞!"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)

async def handle_try_another_photo_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ '–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ'"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_caption(
        caption="üì∏ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ:\n\n"
               "üéØ –°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:\n"
               "‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ\n"
               "‚Ä¢ –ß–µ—Ç–∫–∏–π —Ñ–æ–∫—É—Å –Ω–∞ —Ç–æ–≤–∞—Ä–µ\n"
               "‚Ä¢ –£–±—Ä–∞—Ç—å –ª–∏—à–Ω–∏–µ –æ–±—ä–µ–∫—Ç—ã –∏–∑ –∫–∞–¥—Ä–∞\n"
               "‚Ä¢ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å —Å —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∫—É—Ä—Å–æ–≤\n"
               "‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–∏–∫–µ—Ç–∫—É –∏–ª–∏ —É–ø–∞–∫–æ–≤–∫—É\n\n"
               "üì§ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –≤ —á–∞—Ç!"
    )

async def handle_contact_support_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ '—Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π'"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_caption(
        caption="üìû –°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:\n\n"
               "ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin –¥–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
               "üìù –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è' —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n"
               "üí° –û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ —Ç–æ–≤–∞—Ä –≤—ã –∏—Å–∫–∞–ª–∏ - —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å –ø–æ–∏—Å–∫!"
    )

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ–∏—Å–∫—É –∏ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤)"""
    user_text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –≤–≤–æ–¥–∞
    awaiting_comment_for = context.user_data.get('awaiting_comment_for')
    awaiting_new_product_for = context.user_data.get('awaiting_new_product_for')
    awaiting_correct_item_for = context.user_data.get('awaiting_correct_item_for')
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –ø–æ–∏—Å–∫—É
    if awaiting_comment_for:
        search_key = f'search_session_{awaiting_comment_for}'
        search_context = context.user_data.get(search_key)
        
        if search_context:
            stats_service = get_stats_service()
            if stats_service:
                stats_service.log_failed_search(
                    user_id=search_context['user_id'],
                    username=search_context['username'],
                    photo_file_id=search_context['photo_file_id'],
                    search_results=search_context['results'],
                    feedback_type='not_my_product_with_comment',
                    user_comment=user_text
                )
        
        del context.user_data['awaiting_comment_for']
        
        await update.message.reply_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ä–æ–±–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π!\n\n"
            "üìä –í–∞—à–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–∞.\n"
            "üéØ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–∏—Å–∫–∞."
        )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    elif awaiting_new_product_for:
        await handle_new_product_description(update, context, awaiting_new_product_for, user_text)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    elif awaiting_correct_item_for:
        await handle_correct_item_specification(update, context, awaiting_correct_item_for, user_text)
        return
    
    # –ï—Å–ª–∏ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É —Ç–µ–∫—Å—Ç–∞
    try:
        from toolbot.handlers.text_handler import text_handler
        await text_handler(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}")
        await update.message.reply_text(
            "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
        )

# ==================== –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –î–û–û–ë–£–ß–ï–ù–ò–Ø ====================

async def handle_correct_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    try:
        # –ü–∞—Ä—Å–∏–º callback_data: correct_{short_id}_{result_index}_{item_id}
        data_parts = query.data.split('_')
        if len(data_parts) >= 4:
            short_id = data_parts[1]
            result_index = int(data_parts[2])
            item_id = data_parts[3]
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–∏—Å–∫–∞
            search_key = f'search_session_{short_id}'
            search_context = context.user_data.get(search_key)
            
            if search_context:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                photo_file_id = search_context['photo_file_id']
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
                photo_path = await save_training_image(context, photo_file_id, short_id)
                
                # –ü–æ–ª—É—á–∞–µ–º similarity_score –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                results = search_context.get('results', [])
                similarity_score = 0.5
                if result_index-1 < len(results):
                    similarity_score = results[result_index-1].get('similarity', 0.5)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—É—á–∞—é—â–∏–π –ø—Ä–∏–º–µ—Ä
                from services.training_data_service import get_training_service
                training_service = get_training_service()
                
                example_id = training_service.add_training_example(
                    photo_file_id=photo_file_id,
                    user_id=search_context['user_id'],
                    username=search_context['username'],
                    feedback_type='correct',
                    target_item_id=item_id,
                    similarity_score=similarity_score,
                    image_path=photo_path,
                    quality_rating=5  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç = –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                )
                
                if example_id:
                    logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä –æ–±—É—á–µ–Ω–∏—è #{example_id}")
                    
                    await query.edit_message_caption(
                        caption="‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞.\n\n"
                               "üéØ –≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏.\n"
                               f"üìù ID –æ–±—É—á–∞—é—â–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞: #{example_id}",
                        reply_markup=None
                    )
                else:
                    await query.edit_message_caption(
                        caption="‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!\n\n"
                               "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏–º–µ—Ä –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.",
                        reply_markup=None
                    )
            else:
                await query.edit_message_caption(
                    caption="‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!",
                    reply_markup=None
                )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
        await query.edit_message_caption(
            caption="‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!",
            reply_markup=None
        )

async def handle_incorrect_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    try:
        # –ü–∞—Ä—Å–∏–º callback_data: incorrect_{short_id}_{result_index}_{item_id}
        data_parts = query.data.split('_')
        if len(data_parts) >= 4:
            short_id = data_parts[1]
            result_index = int(data_parts[2])
            item_id = data_parts[3]
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–∏—Å–∫–∞
            search_key = f'search_session_{short_id}'
            search_context = context.user_data.get(search_key)
            
            if search_context:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                photo_file_id = search_context['photo_file_id']
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
                photo_path = await save_training_image(context, photo_file_id, short_id)
                
                # –ü–æ–ª—É—á–∞–µ–º similarity_score –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                results = search_context.get('results', [])
                similarity_score = 0.5
                if result_index-1 < len(results):
                    similarity_score = results[result_index-1].get('similarity', 0.5)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ–±—É—á–∞—é—â–∏–π –ø—Ä–∏–º–µ—Ä
                from services.training_data_service import get_training_service
                training_service = get_training_service()
                
                example_id = training_service.add_training_example(
                    photo_file_id=photo_file_id,
                    user_id=search_context['user_id'],
                    username=search_context['username'],
                    feedback_type='incorrect',
                    target_item_id=item_id,
                    similarity_score=similarity_score,
                    image_path=photo_path,
                    quality_rating=2  # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç = –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                )
                
                if example_id:
                    logger.info(f"‚ùå –î–æ–±–∞–≤–ª–µ–Ω –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä –æ–±—É—á–µ–Ω–∏—è #{example_id}")
                    
                    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —É–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä
                    keyboard = [
                        [InlineKeyboardButton("‚ûï –£–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä", callback_data=f"specify_correct_{short_id}")],
                        [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ", callback_data="try_another_photo")]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await query.edit_message_caption(
                        caption="‚ùå –ü–æ–Ω—è—Ç–Ω–æ, —ç—Ç–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç.\n\n"
                               "üéØ –í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞.\n"
                               f"üìù ID –æ–±—É—á–∞—é—â–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞: #{example_id}\n\n"
                               "üí° –•–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä?",
                        reply_markup=reply_markup
                    )
                else:
                    await query.edit_message_caption(
                        caption="‚ùå –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!\n\n"
                               "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏–º–µ—Ä –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.",
                        reply_markup=None
                    )
            else:
                await query.edit_message_caption(
                    caption="‚ùå –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!",
                    reply_markup=None
                )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
        await query.edit_message_caption(
            caption="‚ùå –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!",
            reply_markup=None
        )

async def handle_new_item_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    query = update.callback_query
    await query.answer()
    
    try:
        # –ü–∞—Ä—Å–∏–º callback_data: new_item_{short_id}
        short_id = query.data.replace('new_item_', '')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        context.user_data['awaiting_new_product_for'] = short_id
        
        await query.edit_message_caption(
            caption="‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥\n\n"
                   "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Ç–æ–≤–∞—Ä:\n"
                   "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ\n"
                   "‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è (–µ—Å–ª–∏ –∑–Ω–∞–µ—Ç–µ)\n"
                   "‚Ä¢ –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n\n"
                   "üí° –ü—Ä–∏–º–µ—Ä: '–î—Ä–µ–ª—å —É–¥–∞—Ä–Ω–∞—è, —ç–ª–µ–∫—Ç—Ä–æ–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, 850W'\n\n"
                   "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
            reply_markup=None
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)

async def handle_specify_correct_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    query = update.callback_query
    await query.answer()
    
    try:
        # –ü–∞—Ä—Å–∏–º callback_data: specify_correct_{short_id}
        short_id = query.data.replace('specify_correct_', '')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        context.user_data['awaiting_correct_item_for'] = short_id
        
        await query.edit_message_caption(
            caption="üéØ –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä\n\n"
                   "üìù –ù–∞–ø–∏—à–∏—Ç–µ:\n"
                   "‚Ä¢ –ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ (–µ—Å–ª–∏ –∑–Ω–∞–µ—Ç–µ)\n"
                   "‚Ä¢ –ò–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ\n\n"
                   "üí° –ü—Ä–∏–º–µ—Ä: '–ê—Ä—Ç–∏–∫—É–ª: ABC123' –∏–ª–∏ '–°–∞–º–æ—Ä–µ–∑—ã 4x50 –æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–µ'\n\n"
                   "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ:",
            reply_markup=None
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)

async def save_training_image(context, photo_file_id: str, short_id: str) -> str:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
    try:
        import os
        from datetime import datetime
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ–±—É—á–∞—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        training_dir = 'temp/training_images'
        os.makedirs(training_dir, exist_ok=True)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f'training_{short_id}_{timestamp}.jpg'
        file_path = os.path.join(training_dir, filename)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        file = await context.bot.get_file(photo_file_id)
        await file.download_to_drive(file_path)
        
        logger.info(f"üíæ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {file_path}")
        return file_path
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {e}")
        return ""

async def handle_new_product_description(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                       short_id: str, description: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–∏—Å–∫–∞
        search_key = f'search_session_{short_id}'
        search_context = context.user_data.get(search_key)
        
        if search_context:
            photo_file_id = search_context['photo_file_id']
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
            photo_path = await save_training_image(context, photo_file_id, short_id)
            
            # –ü–∞—Ä—Å–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            parts = description.split(',')
            product_name = parts[0].strip() if parts else description
            product_category = parts[1].strip() if len(parts) > 1 else ""
            product_description = parts[2].strip() if len(parts) > 2 else description
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            from services.training_data_service import get_training_service
            training_service = get_training_service()
            
            annotation_id = training_service.add_new_product_annotation(
                photo_file_id=photo_file_id,
                user_id=search_context['user_id'],
                username=search_context['username'],
                product_name=product_name,
                product_category=product_category,
                product_description=product_description,
                image_path=photo_path
            )
            
            if annotation_id:
                logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ #{annotation_id}")
                
                await update.message.reply_text(
                    f"‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.\n\n"
                    f"üìù ID –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏: #{annotation_id}\n"
                    f"üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {product_name}\n"
                    f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product_category or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
                    f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {product_description}\n\n"
                    f"üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –∑–∞—è–≤–∫—É –∏ –¥–æ–±–∞–≤–∏—Ç —Ç–æ–≤–∞—Ä –≤ –∫–∞—Ç–∞–ª–æ–≥.\n"
                    f"üìß –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ."
                )
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é —Ç–æ–≤–∞—Ä–∞.\n\n"
                    "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–∏—Å–∫–∞.\n\n"
                "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫."
            )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        del context.user_data['awaiting_new_product_for']
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.\n\n"
            "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        if 'awaiting_new_product_for' in context.user_data:
            del context.user_data['awaiting_new_product_for']

async def handle_correct_item_specification(update: Update, context: ContextTypes.DEFAULT_TYPE,
                                          short_id: str, specification: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–∏—Å–∫–∞
        search_key = f'search_session_{short_id}'
        search_context = context.user_data.get(search_key)
        
        if search_context:
            photo_file_id = search_context['photo_file_id']
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            photo_path = await save_training_image(context, photo_file_id, short_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–±—É—á–∞—é—â–∏–π –ø—Ä–∏–º–µ—Ä
            from services.training_data_service import get_training_service
            training_service = get_training_service()
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∞—Ä—Ç–∏–∫—É–ª –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
            target_item_id = None
            if specification.lower().startswith('–∞—Ä—Ç–∏–∫—É–ª'):
                parts = specification.split(':', 1)
                if len(parts) > 1:
                    target_item_id = parts[1].strip()
            
            example_id = training_service.add_training_example(
                photo_file_id=photo_file_id,
                user_id=search_context['user_id'],
                username=search_context['username'],
                feedback_type='correct',
                target_item_id=target_item_id,
                similarity_score=1.0,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è
                user_comment=specification,
                image_path=photo_path,
                quality_rating=5
            )
            
            if example_id:
                logger.info(f"üéØ –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä –æ–±—É—á–µ–Ω–∏—è #{example_id}")
                
                await update.message.reply_text(
                    f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ.\n\n"
                    f"üìù ID –ø—Ä–∏–º–µ—Ä–∞: #{example_id}\n"
                    f"üéØ –£–∫–∞–∑–∞–Ω–∏–µ: {specification}\n"
                    f"üè∑Ô∏è –ê—Ä—Ç–∏–∫—É–ª: {target_item_id or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
                    f"üß† –≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞.\n"
                    f"üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å –≤ –æ–±—É—á–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã!"
                )
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—É—á–∞—é—â–∏–π –ø—Ä–∏–º–µ—Ä.\n\n"
                    "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–∏—Å–∫–∞.\n\n"
                "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫."
            )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        del context.user_data['awaiting_correct_item_for']
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–∫–∞–∑–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.\n\n"
            "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        if 'awaiting_correct_item_for' in context.user_data:
            del context.user_data['awaiting_correct_item_for']