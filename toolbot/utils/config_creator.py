#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –±–æ—Ç–∞.
"""

import os
import json
import logging
import argparse
from pathlib import Path
from cryptography.fernet import Fernet

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


def generate_and_save_key(key_path="key.key"):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    
    Args:
        key_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–∞
        
    Returns:
        –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á
    """
    try:
        key = Fernet.generate_key()
        with open(key_path, "wb") as key_file:
            key_file.write(key)
        logger.info(f"‚úÖ –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {key_path}")
        return key
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞: {e}")
        return None


def load_key(key_path="key.key"):
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    
    Args:
        key_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–ª—é—á–∞
        
    Returns:
        –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∫–ª—é—á –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        if not os.path.exists(key_path):
            logger.error(f"‚ùå –§–∞–π–ª –∫–ª—é—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {key_path}")
            return None
            
        with open(key_path, "rb") as key_file:
            key = key_file.read()
        logger.info(f"‚úÖ –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ {key_path}")
        return key
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–ª—é—á–∞: {e}")
        return None


def encrypt_config(config_data, key=None, key_path="key.key", output_path="config.encrypted"):
    """
    –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    
    Args:
        config_data: –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        key: –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ None, –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ —Ñ–∞–π–ª–∞)
        key_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–ª—é—á–∞
        output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        
    Returns:
        True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        # –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ –∏–∑ —Ñ–∞–π–ª–∞
        if key is None:
            key = load_key(key_path)
            if key is None:
                logger.info("üîë –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è...")
                key = generate_and_save_key(key_path)
                if key is None:
                    return False
        
        f = Fernet(key)
        encrypted_data = f.encrypt(json.dumps(config_data).encode())
        
        with open(output_path, "wb") as config_file:
            config_file.write(encrypted_data)
            
        logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∞ –≤ {output_path}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False


def create_default_config():
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    """
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_data = {
        "telegram_token": "TELEGRAM_BOT_TOKEN",
        "photos_folder": "data/instruments",
        "admin_ids": [123456789],  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        "whitelist": [123456789],  # ID —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        "similarity_threshold": 0.25,
        "top_n_results": 5,
        "contrast_weight": 0.8,
        "sharpness_weight": 0.8,
        "brightness_weight": 0.7,
        "brand_bonus": 2.0,
        "type_bonus": 1.5,
        "brand_type_bonus": 2.5,
        
        # –ü—É—Ç–∏ –∫ —Å–ø—Ä–∞–≤–æ—á–Ω—ã–º —Ç–∞–±–ª–∏—Ü–∞–º –∏ —Ñ–∞–π–ª–∞–º
        "data_files": {
            "table_2": "data/table_2.xlsx",
            "table_3": "data/table_3.xlsx",
            "les_ega_pdf": "data/les_ega.pdf",
            "skobyanka_table": "data/skobyanka.xlsx"
        }
    }
    
    return config_data


def main():
    # –†–∞–∑–±–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(description="–°–æ–∑–¥–∞–Ω–∏–µ –∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞")
    parser.add_argument(
        "--token", 
        type=str, 
        help="–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞"
    )
    parser.add_argument(
        "--photos", 
        type=str, 
        help="–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"
    )
    parser.add_argument(
        "--admins", 
        type=str, 
        help="–°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—è—Ç—ã–º–∏"
    )
    parser.add_argument(
        "--whitelist", 
        type=str, 
        help="–°–ø–∏—Å–æ–∫ ID —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—è—Ç—ã–º–∏"
    )
    parser.add_argument(
        "--key", 
        type=str, 
        default="key.key", 
        help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–ª—é—á–∞"
    )
    parser.add_argument(
        "--output", 
        type=str, 
        default="config.encrypted", 
        help="–ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    )
    
    args = parser.parse_args()
    
    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è ToolBot...")
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = create_default_config()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if args.token:
        config["telegram_token"] = args.token
        
    if args.photos:
        config["photos_folder"] = args.photos
        
    if args.admins:
        try:
            admin_ids = [int(x.strip()) for x in args.admins.split(',')]
            config["admin_ids"] = admin_ids
        except ValueError:
            logger.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
            
    if args.whitelist:
        try:
            whitelist = [int(x.strip()) for x in args.whitelist.split(',')]
            config["whitelist"] = whitelist
        except ValueError:
            logger.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ")
    
    # –®–∏—Ñ—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if encrypt_config(config, key_path=args.key, output_path=args.output):
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {args.output}")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")


if __name__ == "__main__":
    main() 