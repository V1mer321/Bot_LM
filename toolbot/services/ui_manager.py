#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –±–æ—Ç–∞.
–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö UI-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –µ–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –º–∞—Å—Ç–µ—Ä–æ–≤ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤.
"""

import logging
import json
import os
from typing import List, Dict, Any, Optional, Callable, Union
from telebot import TeleBot
from telebot.types import Message, CallbackQuery

from toolbot.utils.ui_components import (
    InteractiveButtons, 
    StepByStepWizard, 
    ProgressIndicator,
    create_quick_action_buttons,
    create_tool_selection_buttons,
    create_brand_selection_buttons
)
from toolbot.utils.brand_recognition import get_known_brands
from toolbot.data.tool_categories import get_tool_categories

logger = logging.getLogger(__name__)

class UIManager:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –±–æ—Ç–∞.
    """
    
    _instance = None
    
    @classmethod
    def get_instance(cls, bot=None):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ UI (—Å–∏–Ω–≥–ª—Ç–æ–Ω).
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ)
            
        Returns:
            –≠–∫–∑–µ–º–ø–ª—è—Ä UIManager
        """
        if cls._instance is None:
            if bot is None:
                raise ValueError("–ü—Ä–∏ –ø–µ—Ä–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UIManager —Ç—Ä–µ–±—É–µ—Ç—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞")
            cls._instance = cls(bot)
        return cls._instance
    
    def __init__(self, bot: TeleBot):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ UI.
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
        """
        self.bot = bot
        self.active_wizards = {}  # –°–ª–æ–≤–∞—Ä—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.progress_indicators = {}  # –°–ª–æ–≤–∞—Ä—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ ID —á–∞—Ç–∞
        
    def send_main_menu(self, chat_id: int, message_text: str = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:") -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –±—ã—Å—Ç—Ä—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏.
        
        Args:
            chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é
            message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        markup = create_quick_action_buttons()
        self.bot.send_message(chat_id, message_text, reply_markup=markup, parse_mode='HTML')
    
    def send_tool_selection(self, chat_id: int, message_text: str = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:") -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.
        
        Args:
            chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é
            message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        tool_categories = get_tool_categories()
        markup = create_tool_selection_buttons(list(tool_categories.keys()))
        self.bot.send_message(chat_id, message_text, reply_markup=markup, parse_mode='HTML')
    
    def send_brand_selection(self, chat_id: int, message_text: str = "–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥:") -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –±—Ä–µ–Ω–¥–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.
        
        Args:
            chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é
            message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        brands = get_known_brands()
        markup = create_brand_selection_buttons(brands)
        self.bot.send_message(chat_id, message_text, reply_markup=markup, parse_mode='HTML')
    
    def create_wizard(self, user_id: int, wizard_type: str, 
                     initial_message: str, on_complete: Callable = None) -> None:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—à–∞–≥–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            wizard_type: –¢–∏–ø –º–∞—Å—Ç–µ—Ä–∞ ('tool_selection', 'order', 'comparison')
            initial_message: –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞
            on_complete: –§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–∞
        """
        steps = self._get_wizard_steps(wizard_type)
        if not steps:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–∞—Å—Ç–µ—Ä–∞: {wizard_type}")
            return
        
        # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Ç–µ—Ä
        wizard = StepByStepWizard(
            bot=self.bot,
            steps=steps,
            user_id=user_id,
            initial_message_text=initial_message,
            on_complete=on_complete
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Å—Ç–µ—Ä –≤ —Å–ª–æ–≤–∞—Ä–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
        self.active_wizards[user_id] = wizard
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞—Å—Ç–µ—Ä
        wizard.start()
    
    def _get_wizard_steps(self, wizard_type: str) -> List[Dict[str, Any]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —à–∞–≥–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –º–∞—Å—Ç–µ—Ä–∞.
        
        Args:
            wizard_type: –¢–∏–ø –º–∞—Å—Ç–µ—Ä–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ —à–∞–≥–æ–≤ –º–∞—Å—Ç–µ—Ä–∞
        """
        if wizard_type == 'tool_selection':
            return self._get_tool_selection_wizard_steps()
        elif wizard_type == 'order':
            return self._get_order_wizard_steps()
        elif wizard_type == 'comparison':
            return self._get_comparison_wizard_steps()
        else:
            return []
    
    def _get_tool_selection_wizard_steps(self) -> List[Dict[str, Any]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —à–∞–≥–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ –ø–æ–¥–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.
        
        Returns:
            –°–ø–∏—Å–æ–∫ —à–∞–≥–æ–≤ –º–∞—Å—Ç–µ—Ä–∞
        """
        steps = [
            # –®–∞–≥ 1: –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç
            {
                'text': "–î–ª—è –∫–∞–∫–∏—Ö —Ä–∞–±–æ—Ç –≤–∞–º –Ω—É–∂–µ–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç?",
                'buttons': [
                    {'text': 'üè† –ë—ã—Ç–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã', 'callback_data': 'wizard_work_home'},
                    {'text': 'üî® –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ', 'callback_data': 'wizard_work_pro'},
                    {'text': 'üèóÔ∏è –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ', 'callback_data': 'wizard_work_industrial'},
                    {'text': 'üå≥ –°–∞–¥–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã', 'callback_data': 'wizard_work_garden'}
                ],
                'process_input': lambda query, data: data.update({'work_type': query.data.replace('wizard_work_', '')})
            },
            # –®–∞–≥ 2: –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            {
                'text': "–ö–∞–∫–æ–π —Ç–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                'get_text': lambda data: self._get_tool_type_text(data),
                'buttons': [
                    {'text': 'üîå –≠–ª–µ–∫—Ç—Ä–æ–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç', 'callback_data': 'wizard_tool_electric'},
                    {'text': 'üîã –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä–Ω—ã–π', 'callback_data': 'wizard_tool_cordless'},
                    {'text': '‚öôÔ∏è –†—É—á–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç', 'callback_data': 'wizard_tool_hand'},
                    {'text': 'üîß –ò–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π', 'callback_data': 'wizard_tool_measuring'}
                ],
                'process_input': lambda query, data: data.update({'tool_type': query.data.replace('wizard_tool_', '')})
            },
            # –®–∞–≥ 3: –í—ã–±–æ—Ä –±—Ä–µ–Ω–¥–∞
            {
                'text': "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –±—Ä–µ–Ω–¥ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:",
                'get_text': lambda data: self._get_brand_text(data),
                'buttons': [
                    {'text': 'Makita', 'callback_data': 'wizard_brand_Makita'},
                    {'text': 'Bosch', 'callback_data': 'wizard_brand_Bosch'},
                    {'text': 'DeWalt', 'callback_data': 'wizard_brand_DeWalt'},
                    {'text': 'Milwaukee', 'callback_data': 'wizard_brand_Milwaukee'},
                    {'text': '–ò–Ω—Ç–µ—Ä—Å–∫–æ–ª', 'callback_data': 'wizard_brand_–ò–Ω—Ç–µ—Ä—Å–∫–æ–ª'},
                    {'text': '–õ—é–±–æ–π –±—Ä–µ–Ω–¥', 'callback_data': 'wizard_brand_any'}
                ],
                'process_input': lambda query, data: data.update({'brand': query.data.replace('wizard_brand_', '')})
            },
            # –®–∞–≥ 4: –í—ã–±–æ—Ä —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            {
                'text': "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω:",
                'get_text': lambda data: self._get_price_text(data),
                'buttons': [
                    {'text': 'üí∞ –≠–∫–æ–Ω–æ–º (–¥–æ 5000‚ÇΩ)', 'callback_data': 'wizard_price_low'},
                    {'text': 'üí∞üí∞ –°—Ä–µ–¥–Ω–∏–π (5000-15000‚ÇΩ)', 'callback_data': 'wizard_price_medium'},
                    {'text': 'üí∞üí∞üí∞ –ü—Ä–µ–º–∏—É–º (–æ—Ç 15000‚ÇΩ)', 'callback_data': 'wizard_price_high'},
                    {'text': 'üîÑ –õ—é–±–∞—è —Ü–µ–Ω–∞', 'callback_data': 'wizard_price_any'}
                ],
                'process_input': lambda query, data: data.update({'price_range': query.data.replace('wizard_price_', '')})
            },
            # –®–∞–≥ 5: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
            {
                'text': "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:",
                'get_text': lambda data: self._get_confirmation_text(data),
                'buttons': [
                    {'text': '‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ', 'callback_data': 'wizard_confirm_yes'},
                    {'text': 'üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã', 'callback_data': 'wizard_confirm_no'}
                ],
                'process_input': lambda query, data: data.update({'confirmed': query.data == 'wizard_confirm_yes'})
            }
        ]
        return steps
    
    def _get_order_wizard_steps(self) -> List[Dict[str, Any]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —à–∞–≥–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞.
        
        Returns:
            –°–ø–∏—Å–æ–∫ —à–∞–≥–æ–≤ –º–∞—Å—Ç–µ—Ä–∞
        """
        # –ó–¥–µ—Å—å –±—É–¥—É—Ç —à–∞–≥–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
        # –ü—Ä–∏–º–µ—Ä —à–∞–≥–æ–≤ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        steps = [
            # –®–∞–≥ 1: –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–∫–∞–∑–∞
            {
                'text': "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–∫–∞–∑–∞:",
                'buttons': [
                    {'text': 'üõí –ó–∞–∫–∞–∑ —Ç–æ–≤–∞—Ä–∞', 'callback_data': 'wizard_order_product'},
                    {'text': 'üîÑ –û–±–º–µ–Ω/–≤–æ–∑–≤—Ä–∞—Ç', 'callback_data': 'wizard_order_exchange'},
                    {'text': 'üõ†Ô∏è –°–µ—Ä–≤–∏—Å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ', 'callback_data': 'wizard_order_service'}
                ],
                'process_input': lambda query, data: data.update({'order_type': query.data.replace('wizard_order_', '')})
            },
            # –®–∞–≥ 2: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
            {
                'text': "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö:",
                'get_text': lambda data: "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö:",
                'buttons': [
                    {'text': 'üë§ –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç', 'callback_data': 'wizard_client_new'},
                    {'text': 'üîç –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É', 'callback_data': 'wizard_client_search'}
                ],
                'process_input': lambda query, data: data.update({'client_action': query.data.replace('wizard_client_', '')})
            },
            # –®–∞–≥ 3: –í—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            {
                'text': "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–∞:",
                'get_text': lambda data: "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–∞:",
                'buttons': [
                    {'text': 'üîé –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É', 'callback_data': 'wizard_add_catalog'},
                    {'text': 'üì∑ –ü–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ç–æ', 'callback_data': 'wizard_add_photo'},
                    {'text': 'üìã –í–≤–æ–¥ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É', 'callback_data': 'wizard_add_article'}
                ],
                'process_input': lambda query, data: data.update({'add_method': query.data.replace('wizard_add_', '')})
            },
            # –®–∞–≥ 4: –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
            {
                'text': "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
                'get_text': lambda data: "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
                'buttons': [
                    {'text': 'üíµ –ù–∞–ª–∏—á–Ω—ã–º–∏', 'callback_data': 'wizard_payment_cash'},
                    {'text': 'üí≥ –ö–∞—Ä—Ç–æ–π', 'callback_data': 'wizard_payment_card'},
                    {'text': 'üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥', 'callback_data': 'wizard_payment_transfer'},
                    {'text': 'üìÉ –°—á–µ—Ç —é—Ä. –ª–∏—Ü—É', 'callback_data': 'wizard_payment_invoice'}
                ],
                'process_input': lambda query, data: data.update({'payment_method': query.data.replace('wizard_payment_', '')})
            },
            # –®–∞–≥ 5: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
            {
                'text': "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:",
                'get_text': lambda data: self._get_order_confirmation_text(data),
                'buttons': [
                    {'text': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑', 'callback_data': 'wizard_order_confirm'},
                    {'text': 'üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏', 'callback_data': 'wizard_order_edit'}
                ],
                'process_input': lambda query, data: data.update({'order_confirmed': query.data == 'wizard_order_confirm'})
            }
        ]
        return steps
    
    def _get_comparison_wizard_steps(self) -> List[Dict[str, Any]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —à–∞–≥–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.
        
        Returns:
            –°–ø–∏—Å–æ–∫ —à–∞–≥–æ–≤ –º–∞—Å—Ç–µ—Ä–∞
        """
        # –ó–¥–µ—Å—å –±—É–¥—É—Ç —à–∞–≥–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        steps = [
            # –®–∞–≥ 1: –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            {
                'text': "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:",
                'buttons': [
                    {'text': 'üîå –î—Ä–µ–ª–∏', 'callback_data': 'wizard_compare_drills'},
                    {'text': 'üîå –ü–µ—Ä—Ñ–æ—Ä–∞—Ç–æ—Ä—ã', 'callback_data': 'wizard_compare_hammers'},
                    {'text': 'üîå –®—É—Ä—É–ø–æ–≤–µ—Ä—Ç—ã', 'callback_data': 'wizard_compare_screwdrivers'},
                    {'text': 'üîå –ë–æ–ª–≥–∞—Ä–∫–∏', 'callback_data': 'wizard_compare_grinders'},
                    {'text': 'üîå –ü–∏–ª—ã', 'callback_data': 'wizard_compare_saws'}
                ],
                'process_input': lambda query, data: data.update({'compare_category': query.data.replace('wizard_compare_', '')})
            },
            # –®–∞–≥ 2: –í—ã–±–æ—Ä –ø–µ—Ä–≤–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            {
                'text': "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:",
                'get_text': lambda data: f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {data.get('compare_category', '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã')}:",
                'buttons': [
                    {'text': 'üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é', 'callback_data': 'wizard_first_search'},
                    {'text': 'üì∑ –í—ã–±–æ—Ä –ø–æ —Ñ–æ—Ç–æ', 'callback_data': 'wizard_first_photo'},
                    {'text': 'üìã –í—ã–±–æ—Ä –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞', 'callback_data': 'wizard_first_catalog'}
                ],
                'process_input': lambda query, data: data.update({'first_tool_method': query.data.replace('wizard_first_', '')})
            },
            # –®–∞–≥ 3: –í—ã–±–æ—Ä –≤—Ç–æ—Ä–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            {
                'text': "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:",
                'get_text': lambda data: f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {data.get('compare_category', '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã')}:",
                'buttons': [
                    {'text': 'üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é', 'callback_data': 'wizard_second_search'},
                    {'text': 'üì∑ –í—ã–±–æ—Ä –ø–æ —Ñ–æ—Ç–æ', 'callback_data': 'wizard_second_photo'},
                    {'text': 'üìã –í—ã–±–æ—Ä –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞', 'callback_data': 'wizard_second_catalog'}
                ],
                'process_input': lambda query, data: data.update({'second_tool_method': query.data.replace('wizard_second_', '')})
            },
            # –®–∞–≥ 4: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            {
                'text': "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:",
                'get_text': lambda data: "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:",
                'buttons': [
                    {'text': '‚ö° –ú–æ—â–Ω–æ—Å—Ç—å', 'callback_data': 'wizard_param_power'},
                    {'text': '‚öôÔ∏è –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª', 'callback_data': 'wizard_param_features'},
                    {'text': 'üí∞ –¶–µ–Ω–∞', 'callback_data': 'wizard_param_price'},
                    {'text': 'üîã –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä', 'callback_data': 'wizard_param_battery'},
                    {'text': 'üîÑ –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã', 'callback_data': 'wizard_param_all'}
                ],
                'process_input': lambda query, data: self._process_comparison_params(query, data)
            },
            # –®–∞–≥ 5: –§–æ—Ä–º–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            {
                'text': "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:",
                'get_text': lambda data: "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:",
                'buttons': [
                    {'text': 'üìä –¢–∞–±–ª–∏—Ü–∞', 'callback_data': 'wizard_format_table'},
                    {'text': 'üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç', 'callback_data': 'wizard_format_text'},
                    {'text': 'üìä –ì—Ä–∞—Ñ–∏–∫–∏', 'callback_data': 'wizard_format_charts'}
                ],
                'process_input': lambda query, data: data.update({'comparison_format': query.data.replace('wizard_format_', '')})
            }
        ]
        return steps
    
    def _process_comparison_params(self, query: CallbackQuery, data: Dict[str, Any]) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.
        
        Args:
            query: –û–±—ä–µ–∫—Ç callback –∑–∞–ø—Ä–æ—Å–∞
            data: –°–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–∞
        """
        param = query.data.replace('wizard_param_', '')
        
        if 'comparison_params' not in data:
            data['comparison_params'] = []
        
        if param == 'all':
            data['comparison_params'] = ['power', 'features', 'price', 'battery']
        else:
            if param not in data['comparison_params']:
                data['comparison_params'].append(param)
    
    def _get_tool_type_text(self, data: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–≥–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.
        
        Args:
            data: –°–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–∞
            
        Returns:
            –¢–µ–∫—Å—Ç –¥–ª—è —à–∞–≥–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        """
        work_type = data.get('work_type', '')
        
        intro_text = "–ö–∞–∫–æ–π —Ç–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
        
        if work_type == 'home':
            return f"{intro_text}\n\n–î–ª—è –±—ã—Ç–æ–≤—ã—Ö —Ä–∞–±–æ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å—Ä–µ–¥–Ω–µ–π –º–æ—â–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."
        elif work_type == 'pro':
            return f"{intro_text}\n\n–î–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç—Å—è –Ω–∞–¥–µ–∂–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏ —Å –¥–ª–∏—Ç–µ–ª—å–Ω—ã–º —Å—Ä–æ–∫–æ–º —Å–ª—É–∂–±—ã."
        elif work_type == 'industrial':
            return f"{intro_text}\n\n–î–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∏ —Ä–µ—Å—É—Ä—Å–æ–º."
        elif work_type == 'garden':
            return f"{intro_text}\n\n–î–ª—è —Å–∞–¥–æ–≤—ã—Ö —Ä–∞–±–æ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∞–¥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –≤–ª–∞–≥–∏ –∏ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–π."
        else:
            return intro_text
    
    def _get_brand_text(self, data: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–≥–∞ –≤—ã–±–æ—Ä–∞ –±—Ä–µ–Ω–¥–∞.
        
        Args:
            data: –°–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–∞
            
        Returns:
            –¢–µ–∫—Å—Ç –¥–ª—è —à–∞–≥–∞ –≤—ã–±–æ—Ä–∞ –±—Ä–µ–Ω–¥–∞
        """
        tool_type = data.get('tool_type', '')
        work_type = data.get('work_type', '')
        
        base_text = "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –±—Ä–µ–Ω–¥ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:"
        
        brand_recommendations = {
            'electric': {
                'home': ["Bosch (–∑–µ–ª–µ–Ω–∞—è –ª–∏–Ω–∏—è)", "–ò–Ω—Ç–µ—Ä—Å–∫–æ–ª", "Makita"],
                'pro': ["Bosch (—Å–∏–Ω—è—è –ª–∏–Ω–∏—è)", "Makita", "DeWalt", "Milwaukee"],
                'industrial': ["Hilti", "Milwaukee", "Metabo", "Makita"],
                'garden': ["Bosch", "Makita", "Stihl", "Patriot"]
            },
            'cordless': {
                'home': ["Bosch (–∑–µ–ª–µ–Ω–∞—è –ª–∏–Ω–∏—è)", "Makita", "AEG"],
                'pro': ["Makita", "DeWalt", "Milwaukee", "Bosch (—Å–∏–Ω—è—è –ª–∏–Ω–∏—è)"],
                'industrial': ["Milwaukee", "DeWalt", "Hilti"],
                'garden': ["Bosch", "Ryobi", "Makita"]
            },
            'hand': {
                'home': ["–ó—É–±—Ä", "Stayer", "Kraftool"],
                'pro': ["Stanley", "–ó—É–±—Ä Pro", "Knipex"],
                'industrial': ["Knipex", "Gedore", "Stanley"],
                'garden': ["Fiskars", "Gardena", "–ó—É–±—Ä"]
            },
            'measuring': {
                'home': ["Bosch", "ADA", "–ó—É–±—Ä"],
                'pro': ["Bosch", "ADA", "Leica", "CONDTROL"],
                'industrial': ["Leica", "Hilti", "CONDTROL"],
                'garden': ["ADA", "Bosch", "CONDTROL"]
            }
        }
        
        if tool_type in brand_recommendations and work_type in brand_recommendations[tool_type]:
            recommendations = brand_recommendations[tool_type][work_type]
            recommendation_text = ", ".join(recommendations)
            return f"{base_text}\n\n–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º: {recommendation_text}"
        
        return base_text
    
    def _get_price_text(self, data: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–≥–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.
        
        Args:
            data: –°–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–∞
            
        Returns:
            –¢–µ–∫—Å—Ç –¥–ª—è —à–∞–≥–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        """
        tool_type = data.get('tool_type', '')
        brand = data.get('brand', '')
        
        base_text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω:"
        
        price_recommendations = {
            'electric': {
                'Makita': "medium",
                'Bosch': "medium",
                'DeWalt': "high",
                'Milwaukee': "high",
                '–ò–Ω—Ç–µ—Ä—Å–∫–æ–ª': "low"
            },
            'cordless': {
                'Makita': "high",
                'Bosch': "medium",
                'DeWalt': "high",
                'Milwaukee': "high",
                '–ò–Ω—Ç–µ—Ä—Å–∫–æ–ª': "medium"
            }
        }
        
        if tool_type in price_recommendations and brand in price_recommendations[tool_type]:
            recommended_range = price_recommendations[tool_type][brand]
            
            range_texts = {
                'low': "—ç–∫–æ–Ω–æ–º (–¥–æ 5000‚ÇΩ)",
                'medium': "—Å—Ä–µ–¥–Ω–∏–π (5000-15000‚ÇΩ)",
                'high': "–ø—Ä–µ–º–∏—É–º (–æ—Ç 15000‚ÇΩ)"
            }
            
            recommendation = range_texts.get(recommended_range, "")
            
            if recommendation:
                return f"{base_text}\n\n–î–ª—è –±—Ä–µ–Ω–¥–∞ {brand} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {tool_type} —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {recommendation}"
        
        return base_text
    
    def _get_confirmation_text(self, data: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–≥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞.
        
        Args:
            data: –°–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–∞
            
        Returns:
            –¢–µ–∫—Å—Ç –¥–ª—è —à–∞–≥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞
        """
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–∞—Å—Ç–µ—Ä–∞
        work_type_map = {
            'home': '–ë—ã—Ç–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã',
            'pro': '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã',
            'industrial': '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã',
            'garden': '–°–∞–¥–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã'
        }
        
        tool_type_map = {
            'electric': '–≠–ª–µ–∫—Ç—Ä–æ–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç',
            'cordless': '–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç',
            'hand': '–†—É—á–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç',
            'measuring': '–ò–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç'
        }
        
        price_range_map = {
            'low': '–≠–∫–æ–Ω–æ–º (–¥–æ 5000‚ÇΩ)',
            'medium': '–°—Ä–µ–¥–Ω–∏–π (5000-15000‚ÇΩ)',
            'high': '–ü—Ä–µ–º–∏—É–º (–æ—Ç 15000‚ÇΩ)',
            'any': '–õ—é–±–∞—è —Ü–µ–Ω–∞'
        }
        
        work_type = work_type_map.get(data.get('work_type', ''), '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        tool_type = tool_type_map.get(data.get('tool_type', ''), '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        brand = data.get('brand', '–õ—é–±–æ–π')
        price_range = price_range_map.get(data.get('price_range', ''), '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = (
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n\n"
            f"üè† <b>–¢–∏–ø —Ä–∞–±–æ—Ç:</b> {work_type}\n"
            f"üî® <b>–¢–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:</b> {tool_type}\n"
            f"üè≠ <b>–ë—Ä–µ–Ω–¥:</b> {brand}\n"
            f"üí∞ <b>–¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω:</b> {price_range}\n\n"
            "–í—Å—ë –≤–µ—Ä–Ω–æ? –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ '–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã'."
        )
        
        return text
    
    def _get_order_confirmation_text(self, data: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–≥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.
        
        Args:
            data: –°–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
            
        Returns:
            –¢–µ–∫—Å—Ç –¥–ª—è —à–∞–≥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        """
        order_type_map = {
            'product': '–ó–∞–∫–∞–∑ —Ç–æ–≤–∞—Ä–∞',
            'exchange': '–û–±–º–µ–Ω/–≤–æ–∑–≤—Ä–∞—Ç',
            'service': '–°–µ—Ä–≤–∏—Å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ'
        }
        
        payment_method_map = {
            'cash': '–ù–∞–ª–∏—á–Ω—ã–º–∏',
            'card': '–ö–∞—Ä—Ç–æ–π',
            'transfer': '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥',
            'invoice': '–°—á–µ—Ç —é—Ä. –ª–∏—Ü—É'
        }
        
        order_type = order_type_map.get(data.get('order_type', ''), '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        client_action = data.get('client_action', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        payment_method = payment_method_map.get(data.get('payment_method', ''), '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = (
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:\n\n"
            f"üìù <b>–¢–∏–ø –∑–∞–∫–∞–∑–∞:</b> {order_type}\n"
            f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {client_action}\n"
            f"üí≥ <b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> {payment_method}\n\n"
            "–í—Å—ë –≤–µ—Ä–Ω–æ? –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ '–ò–∑–º–µ–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏'."
        )
        
        return text
    
    def process_callback(self, callback_query: CallbackQuery) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è UI-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
        
        Args:
            callback_query: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞
            
        Returns:
            True, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –∏–Ω–∞—á–µ False
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –º–∞—Å—Ç–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = callback_query.from_user.id
        callback_data = callback_query.data
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        if callback_data.startswith('quick_'):
            self._process_quick_action(callback_query)
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –º–∞—Å—Ç–µ—Ä
        if user_id in self.active_wizards:
            # –ü–µ—Ä–µ–¥–∞–µ–º callback –≤ –º–∞—Å—Ç–µ—Ä
            self.active_wizards[user_id].process_step_input(callback_query)
            
            # –ï—Å–ª–∏ –≤ callback –µ—Å—Ç—å "wizard_complete", —Ç–æ —É–¥–∞–ª—è–µ–º –º–∞—Å—Ç–µ—Ä
            if f"wizard_complete_{id(self.active_wizards[user_id])}" in callback_data or \
               f"wizard_cancel_{id(self.active_wizards[user_id])}" in callback_data:
                del self.active_wizards[user_id]
            
            return True
        
        return False
    
    def _process_quick_action(self, callback_query: CallbackQuery) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.
        
        Args:
            callback_query: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞
        """
        user_id = callback_query.from_user.id
        callback_data = callback_query.data
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'quick_'
        action = callback_data.replace('quick_', '')
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        if action == 'search_photo':
            self.bot.answer_callback_query(
                callback_query.id,
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞",
                show_alert=True
            )
        elif action == 'catalog':
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –∫–∞—Ç–∞–ª–æ–≥–∞
            self.send_tool_selection(user_id, "–ö–∞—Ç–∞–ª–æ–≥ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
        elif action == 'tool_wizard':
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞—Å—Ç–µ—Ä –ø–æ–¥–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            self.create_wizard(
                user_id,
                'tool_selection',
                "üßô‚Äç‚ôÇÔ∏è <b>–ú–∞—Å—Ç–µ—Ä –ø–æ–¥–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞</b>\n\n–Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≤–∞—à–∏—Ö –∑–∞–¥–∞—á. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç."
            )
        elif action == 'compare':
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞—Å—Ç–µ—Ä —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            self.create_wizard(
                user_id,
                'comparison',
                "üìä <b>–ú–∞—Å—Ç–µ—Ä —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤</b>\n\n–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å—Ä–∞–≤–Ω–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ä–∞–∑–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤. –î–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."
            )
        elif action == 'orders':
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞—Å—Ç–µ—Ä –∑–∞–∫–∞–∑–æ–≤
            self.create_wizard(
                user_id,
                'order',
                "üíº <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤</b>\n\n–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –∏–ª–∏ –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏."
            )
        elif action == 'help':
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–∫—É
            help_text = (
                "üîç <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
                "‚Ä¢ –î–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ —Ñ–æ—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /search –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–ü–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ç–æ'\n"
                "‚Ä¢ –î–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é –º–∞—Å—Ç–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /wizard –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–æ–±—Ä–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç'\n"
                "‚Ä¢ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /catalog –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–ö–∞—Ç–∞–ª–æ–≥'\n"
                "‚Ä¢ –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /compare –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π'\n"
                "‚Ä¢ –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /orders –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–ó–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–æ–≤'\n\n"
                "–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            self.bot.send_message(user_id, help_text, parse_mode='HTML')
    
    def start_progress(self, chat_id: int, operation_name: str = "–û–ø–µ—Ä–∞—Ü–∏—è") -> ProgressIndicator:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            operation_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            –°–æ–∑–¥–∞–Ω–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        """
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        indicator = ProgressIndicator(self.bot, chat_id, operation_name)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä–µ
        self.progress_indicators[chat_id] = indicator
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        indicator.start()
        
        return indicator
    
    def update_progress(self, chat_id: int, percent: int, status_text: str = "") -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            percent: –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (0-100)
            status_text: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
        """
        if chat_id in self.progress_indicators:
            self.progress_indicators[chat_id].update(percent, status_text)
    
    def complete_progress(self, chat_id: int, final_text: str = "–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞") -> None:
        """
        –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            final_text: –¢–µ–∫—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        """
        if chat_id in self.progress_indicators:
            self.progress_indicators[chat_id].complete(final_text)
            del self.progress_indicators[chat_id]


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ UI
def get_ui_manager(bot=None):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ UI.
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ)
        
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä UIManager
    """
    return UIManager.get_instance(bot) 