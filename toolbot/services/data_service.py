"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤ –∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö.
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –≤ Excel —Ñ–∞–π–ª–∞—Ö –∏ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö –¥–∞–Ω–Ω—ã—Ö.
"""
import os
import logging
import pandas as pd
from pathlib import Path

from toolbot.config import load_config

logger = logging.getLogger(__name__)


def format_numeric_value(value):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞, —É–¥–∞–ª—è—è –¥–µ—Å—è—Ç–∏—á–Ω—É—é —Ç–æ—á–∫—É –∏ –Ω—É–ª–∏ —É —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
    
    Args:
        value: –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
    """
    try:
        # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ - —á–∏—Å–ª–æ
        if isinstance(value, (int, float)):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ —Ü–µ–ª—ã–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 450.0)
            if value.is_integer():
                return str(int(value))  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–µ–∑ .0
            else:
                return str(value)  # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å –¥–ª—è –¥—Ä–æ–±–Ω—ã—Ö —á–∏—Å–µ–ª
        # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–ø, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        return str(value)
    except Exception:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        return str(value)


async def search_in_colors(query: str) -> list:
    """
    –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ —Ü–≤–µ—Ç–æ–≤ –ø–æ –∫–æ–ª–æ–Ω–∫–µ '–¶–≤–µ—Ç'
    
    Args:
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
    """
    try:
        config = load_config()
        if not config:
            logger.error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–≤–µ—Ç–æ–≤")
            return ["‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"]
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á table_3 –≤–º–µ—Å—Ç–æ colors_file
        colors_file = config.get('table_3')
        if not colors_file or not os.path.exists(colors_file):
            # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            colors_file = "C:\\Users\\PluxuryPC\\PycharmProjects\\PythonProject5\\data\\table_3.xlsx"
            if not os.path.exists(colors_file):
                logger.error(f"–§–∞–π–ª —Å –±–∞–∑–æ–π —Ü–≤–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {colors_file}")
                return ["‚ùå –§–∞–π–ª —Å –±–∞–∑–æ–π —Ü–≤–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω"]
        
        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        df = pd.read_excel(colors_file)
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Ü–≤–µ—Ç–æ–≤. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(df)}")
        logger.info(f"–ö–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ: {df.columns.tolist()}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ '–¶–≤–µ—Ç'
        if '–¶–≤–µ—Ç' not in df.columns:
            logger.error("‚ùå –í —Ç–∞–±–ª–∏—Ü–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ '–¶–≤–µ—Ç'")
            return ["‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–∞–±–ª–∏—Ü—ã"]

        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        query = query.lower().strip()
        logger.info(f"–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {query}")

        # –ü–æ–∏—Å–∫ –≤ –∫–æ–ª–æ–Ω–∫–µ '–¶–≤–µ—Ç'
        mask = df['–¶–≤–µ—Ç'].astype(str).str.lower().str.contains(query, na=False)
        matches = df[mask]
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(matches)}")
        
        if not matches.empty:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            results = []
            for _, row in matches.iterrows():
                result_parts = []
                for col in df.columns:
                    value = row[col]
                    if col == '–¶–≤–µ—Ç':
                        result_parts.append(f"üé® *{value}*")
                    else:
                        if pd.notna(value):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ NaN
                            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                            formatted_value = format_numeric_value(value)
                            result_parts.append(f"‚Ä¢ {col}: {formatted_value}")
                
                results.append("\n".join(result_parts))
            return results
        else:
            # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info("–ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã:")
            logger.info(df['–¶–≤–µ—Ç'].head().to_string())
            return ["‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å."]
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ü–≤–µ—Ç–æ–≤: {e}")
        return ["‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ"]


async def search_in_stores(query: str) -> list:
    """
    –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –º–∞–≥–∞–∑–∏–Ω–æ–≤/–æ—Ç–¥–µ–ª–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –æ—Ç–¥–µ–ª—É (SQLite)
    
    Args:
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
    """
    try:
        # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_path = "data/excel_data.db"
        if not os.path.exists(db_path):
            logger.error(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return ["‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"]
        
        import sqlite3
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        cursor.execute("""
            SELECT code, name, department, phone_numbers
            FROM stores 
            ORDER BY name
        """)
        
        all_results = cursor.fetchall()
        
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ 15 –º–∞–≥–∞–∑–∏–Ω–æ–≤
        if not query.strip():
            results = all_results[:15]
        else:
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Python (–ø–æ–∏—Å–∫ –ø–æ 2-–π –∏ 3-–π –∫–æ–ª–æ–Ω–∫–µ)
            query_lower = query.lower()
            filtered_results = []
            
            for row in all_results:
                code, name, dept, phones = row
                name_lower = (name or "").lower()
                dept_lower = (dept or "").lower()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–¥–µ–ª
                if query_lower in name_lower or query_lower in dept_lower:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∂–Ω–µ–µ –æ—Ç–¥–µ–ª–∞
                    priority = 1 if query_lower in name_lower else 2
                    filtered_results.append((priority, row))
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 20
            filtered_results.sort(key=lambda x: (x[0], x[1][1]))  # –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É, –ø–æ—Ç–æ–º –ø–æ –∏–º–µ–Ω–∏
            results = [row for _, row in filtered_results[:20]]
        conn.close()
        
        if results:
            formatted_results = []
            for code, name, dept, phones in results:
                # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                store_info = [f"üè™ *{name}*"]
                
                # –ö–æ–¥ –º–∞–≥–∞–∑–∏–Ω–∞
                if code:
                    store_info.append(f"üè∑Ô∏è –ö–æ–¥: {code}")
                
                # –û—Ç–¥–µ–ª (—ç—Ç–æ 3-—è –∫–æ–ª–æ–Ω–∫–∞ –ø–æ –∫–æ—Ç–æ—Ä–æ–π –∏—â–µ–º)
                if dept:
                    store_info.append(f"üìç –û—Ç–¥–µ–ª: {dept}")
                
                # –¢–µ–ª–µ—Ñ–æ–Ω—ã
                if phones:
                    store_info.append(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã: {phones}")
                else:
                    store_info.append(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã: –ù–µ —É–∫–∞–∑–∞–Ω—ã")
                
                formatted_results.append("\n".join(store_info))
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(formatted_results)} –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'")
            return formatted_results
        else:
            logger.info(f"–ú–∞–≥–∞–∑–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'")
            return [f"‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –º–∞–≥–∞–∑–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"]
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –≤ –ë–î: {e}")
        import traceback
        logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        return ["‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–∞–≥–∞–∑–∏–Ω–æ–≤"]


async def search_in_skobyanka(query: str) -> list:
    """
    –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ —Å–∫–æ–±—è–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π (SQLite)
    
    Args:
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
    """
    try:
        # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_path = "data/excel_data.db"
        if not os.path.exists(db_path):
            logger.error(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return ["‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∫–æ–±—è–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"]
        
        import sqlite3
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        cursor.execute("""
            SELECT article_code, name, quantity_kg
            FROM skobyanka_products 
            ORDER BY name
        """)
        
        all_results = cursor.fetchall()
        
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ 15 —Ç–æ–≤–∞—Ä–æ–≤
        if not query.strip():
            results = all_results[:15]
        else:
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Python (–ø–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏ –Ω–∞–∑–≤–∞–Ω–∏—é)
            query_lower = query.lower()
            filtered_results = []
            
            for row in all_results:
                article, name, quantity = row
                article_lower = (article or "").lower()
                name_lower = (name or "").lower()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –≤ –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
                if query_lower in article_lower or query_lower in name_lower:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –∞—Ä—Ç–∏–∫—É–ª –≤–∞–∂–Ω–µ–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                    priority = 1 if query_lower in article_lower else 2
                    filtered_results.append((priority, row))
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 20
            filtered_results.sort(key=lambda x: (x[0], x[1][1]))  # –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É, –ø–æ—Ç–æ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            results = [row for _, row in filtered_results[:20]]
        
        conn.close()
        
        if results:
            formatted_results = []
            for article, name, quantity in results:
                # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                product_info = [f"üîß *{name}*"]
                
                # –ê—Ä—Ç–∏–∫—É–ª
                if article:
                    product_info.append(f"üè∑Ô∏è –ê—Ä—Ç–∏–∫—É–ª: {article}")
                
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–≥
                if quantity is not None:
                    if quantity > 0:
                        product_info.append(f"üì¶ –í –Ω–∞–ª–∏—á–∏–∏: {format_numeric_value(quantity)} –∫–≥")
                    else:
                        product_info.append(f"‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏")
                else:
                    product_info.append(f"‚ùì –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
                
                formatted_results.append("\n".join(product_info))
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(formatted_results)} —Ç–æ–≤–∞—Ä–æ–≤ —Å–∫–æ–±—è–Ω–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'")
            return formatted_results
        else:
            logger.info(f"–¢–æ–≤–∞—Ä—ã —Å–∫–æ–±—è–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'")
            return [f"‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' —Ç–æ–≤–∞—Ä—ã —Å–∫–æ–±—è–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"]
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–∫–æ–±—è–Ω–∫–∏ –≤ –ë–î: {e}")
        import traceback
        logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        return ["‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–∫–æ–±—è–Ω–∫–∏"]