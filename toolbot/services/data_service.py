"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤ –∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö.
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –≤ Excel —Ñ–∞–π–ª–∞—Ö –∏ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö –¥–∞–Ω–Ω—ã—Ö.
"""
import os
import logging
import pandas as pd
from pathlib import Path

from toolbot.config import load_config

logger = logging.getLogger(__name__)


def format_numeric_value(value):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞, —É–¥–∞–ª—è—è –¥–µ—Å—è—Ç–∏—á–Ω—É—é —Ç–æ—á–∫—É –∏ –Ω—É–ª–∏ —É —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
    
    Args:
        value: –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
    """
    try:
        # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ - —á–∏—Å–ª–æ
        if isinstance(value, (int, float)):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ —Ü–µ–ª—ã–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 450.0)
            if value.is_integer():
                return str(int(value))  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–µ–∑ .0
            else:
                return str(value)  # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å –¥–ª—è –¥—Ä–æ–±–Ω—ã—Ö —á–∏—Å–µ–ª
        # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–ø, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        return str(value)
    except Exception:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        return str(value)


async def search_in_colors(query: str) -> list:
    """
    –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ —Ü–≤–µ—Ç–æ–≤ –ø–æ –∫–æ–ª–æ–Ω–∫–µ '–¶–≤–µ—Ç'
    
    Args:
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
    """
    try:
        config = load_config()
        if not config:
            logger.error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–≤–µ—Ç–æ–≤")
            return ["‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"]
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á table_3 –≤–º–µ—Å—Ç–æ colors_file
        colors_file = config.get('table_3')
        if not colors_file or not os.path.exists(colors_file):
            # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            colors_file = "C:\\Users\\PluxuryPC\\PycharmProjects\\PythonProject5\\data\\table_3.xlsx"
            if not os.path.exists(colors_file):
                logger.error(f"–§–∞–π–ª —Å –±–∞–∑–æ–π —Ü–≤–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {colors_file}")
                return ["‚ùå –§–∞–π–ª —Å –±–∞–∑–æ–π —Ü–≤–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω"]
        
        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        df = pd.read_excel(colors_file)
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Ü–≤–µ—Ç–æ–≤. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(df)}")
        logger.info(f"–ö–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ: {df.columns.tolist()}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ '–¶–≤–µ—Ç'
        if '–¶–≤–µ—Ç' not in df.columns:
            logger.error("‚ùå –í —Ç–∞–±–ª–∏—Ü–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ '–¶–≤–µ—Ç'")
            return ["‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–∞–±–ª–∏—Ü—ã"]

        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        query = query.lower().strip()
        logger.info(f"–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {query}")

        # –ü–æ–∏—Å–∫ –≤ –∫–æ–ª–æ–Ω–∫–µ '–¶–≤–µ—Ç'
        mask = df['–¶–≤–µ—Ç'].astype(str).str.lower().str.contains(query, na=False)
        matches = df[mask]
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(matches)}")
        
        if not matches.empty:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            results = []
            for _, row in matches.iterrows():
                result_parts = []
                for col in df.columns:
                    value = row[col]
                    if col == '–¶–≤–µ—Ç':
                        result_parts.append(f"üé® *{value}*")
                    else:
                        if pd.notna(value):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ NaN
                            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                            formatted_value = format_numeric_value(value)
                            result_parts.append(f"‚Ä¢ {col}: {formatted_value}")
                
                results.append("\n".join(result_parts))
            return results
        else:
            # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info("–ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã:")
            logger.info(df['–¶–≤–µ—Ç'].head().to_string())
            return ["‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å."]
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ü–≤–µ—Ç–æ–≤: {e}")
        return ["‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ"]


async def search_in_stores(query: str) -> list:
    """
    –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø–æ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∞–¥—Ä–µ—Å—É
    
    Args:
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
    """
    try:
        config = load_config()
        if not config:
            logger.error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤")
            return ["‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"]
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á table_2 –≤–º–µ—Å—Ç–æ stores_file
        excel_file = config.get('table_2')
        if not excel_file or not os.path.exists(excel_file):
            # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            excel_file = "C:\\Users\\PluxuryPC\\PycharmProjects\\PythonProject5\\data\\table_2.xlsx"
            if not os.path.exists(excel_file):
                logger.error(f"–§–∞–π–ª —Å –±–∞–∑–æ–π –º–∞–≥–∞–∑–∏–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {excel_file}")
                return ["‚ùå –§–∞–π–ª —Å –±–∞–∑–æ–π –º–∞–≥–∞–∑–∏–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω"]
        
        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        df = pd.read_excel(excel_file)
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(df)}")
        logger.info(f"–ö–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ: {df.columns.tolist()}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'
        if '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' not in df.columns:
            logger.error(f"‚ùå –í —Ç–∞–±–ª–∏—Ü–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'")
            return ["‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–∞–±–ª–∏—Ü—ã –º–∞–≥–∞–∑–∏–Ω–æ–≤"]

        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ 15 —Å—Ç—Ä–æ–∫
        if not query.strip():
            results = []
            for _, row in df.head(15).iterrows():
                store_info = [f"üè™ *{row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']}*"]
                
                for col in df.columns:
                    if col != '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ':
                        value = row[col]
                        if pd.notna(value):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ NaN
                            formatted_value = format_numeric_value(value)
                            store_info.append(f"‚Ä¢ {col}: {formatted_value}")
                
                results.append("\n".join(store_info))
            return results

        # –ü—Ä–∏–≤–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        query = query.lower().strip()
        logger.info(f"–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤: {query}")

        # –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–º –∫–æ–ª–æ–Ω–∫–∞–º
        matches = df.apply(
            lambda row: any(
                str(value).lower().find(query) != -1 
                for value in row if pd.notna(value) and isinstance(value, str)
            ), 
            axis=1
        )
        
        results_df = df[matches]
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(results_df)}")
        
        if not results_df.empty:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            results = []
            for _, row in results_df.iterrows():
                store_info = [f"üè™ *{row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']}*"]
                
                for col in df.columns:
                    if col != '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ':
                        value = row[col]
                        if pd.notna(value):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ NaN
                            formatted_value = format_numeric_value(value)
                            if col == '–û—Ç–¥–µ–ª':
                                store_info.append(f"üìç –û—Ç–¥–µ–ª: {formatted_value}")
                            else:
                                store_info.append(f"‚Ä¢ {col}: {formatted_value}")
                
                results.append("\n".join(store_info))
            
            return results
        else:
            # –í—ã–≤–æ–¥–∏–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info("–ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã:")
            logger.info(df['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'].head().to_string())
            return []
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–∞–≥–∞–∑–∏–Ω–æ–≤: {e}")
        import traceback
        logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        return ["‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–∞–≥–∞–∑–∏–Ω–æ–≤"]


async def search_in_skobyanka(query: str) -> list:
    """
    –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ —Å–∫–æ–±—è–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π
    
    Args:
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
    """
    try:
        config = load_config()
        if not config:
            logger.error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∫–æ–±—è–Ω–∫–∏")
            return ["‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"]
            
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º—è –∫–ª—é—á–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        excel_file = config.get('skobyanka_table')
        if not excel_file or not os.path.exists(excel_file):
            # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            excel_file = "C:\\Users\\PluxuryPC\\PycharmProjects\\PythonProject5\\data\\skobyanka.xlsx"
            if not os.path.exists(excel_file):
                logger.error(f"–§–∞–π–ª —Å–∫–æ–±—è–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {excel_file}")
                return ["‚ùå –§–∞–π–ª —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω"]
            
        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        df = pd.read_excel(excel_file)
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å–∫–æ–±—è–Ω–∫–∏. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(df)}")
        logger.info(f"–ö–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ: {df.columns.tolist()}")
        
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ 15 —Å—Ç—Ä–æ–∫
        if not query.strip():
            results = []
            for _, row in df.head(15).iterrows():
                result_parts = []
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ/–∞—Ä—Ç–∏–∫—É–ª
                name_column = next((col for col in ['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–¢–æ–≤–∞—Ä', '–ê—Ä—Ç–∏–∫—É–ª'] 
                                    if col in df.columns), df.columns[0])
                result_parts.append(f"üîß *{row[name_column]}*")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
                for col in df.columns:
                    if col != name_column:
                        value = row[col]
                        if pd.notna(value):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ NaN
                            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                            formatted_value = format_numeric_value(value)
                            result_parts.append(f"‚Ä¢ {col}: {formatted_value}")
                
                results.append("\n".join(result_parts))
            return results

        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        query = query.lower().strip()
        logger.info(f"–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–∫–æ–±—è–Ω–∫–∏: {query}")

        # –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –∫–æ–ª–æ–Ω–∫–∞–º
        matches = df.apply(
            lambda row: any(
                str(value).lower().find(query) != -1 
                for value in row if pd.notna(value)
            ), 
            axis=1
        )
        
        results_df = df[matches]
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(results_df)}")
        
        if not results_df.empty:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            results = []
            for _, row in results_df.iterrows():
                result_parts = []
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ/–∞—Ä—Ç–∏–∫—É–ª
                name_column = next((col for col in ['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–¢–æ–≤–∞—Ä', '–ê—Ä—Ç–∏–∫—É–ª'] 
                                    if col in df.columns), df.columns[0])
                result_parts.append(f"üîß *{row[name_column]}*")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
                for col in df.columns:
                    if col != name_column:
                        value = row[col]
                        if pd.notna(value):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ NaN
                            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                            formatted_value = format_numeric_value(value)
                            result_parts.append(f"‚Ä¢ {col}: {formatted_value}")
                
                results.append("\n".join(result_parts))
            
            return results[:10]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        else:
            return []
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–∫–æ–±—è–Ω–∫–∏: {e}")
        import traceback
        logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        return ["‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ"]