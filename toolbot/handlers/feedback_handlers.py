"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
"""
import logging
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, CallbackQueryHandler

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤—ã–º —Å–µ—Ä–≤–∏—Å–∞–º
import sys
import os
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

from services.feedback_database import get_feedback_service
from toolbot.utils.access import is_allowed_user
from toolbot.config import is_admin

logger = logging.getLogger(__name__)

async def report_error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ'
    """
    user_id = update.effective_user.id
    
    if not is_allowed_user(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
    context.user_data["state"] = "awaiting_error_report"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
    keyboard = [["‚ùå –û—Ç–º–µ–Ω–∞"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üêõ **–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ**\n\n"
        "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É, —Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å:\n\n"
        "üìù **–ß—Ç–æ –≤–∫–ª—é—á–∏—Ç—å –≤ –æ–ø–∏—Å–∞–Ω–∏–µ:**\n"
        "‚Ä¢ –ß—Ç–æ –≤—ã –ø—ã—Ç–∞–ª–∏—Å—å —Å–¥–µ–ª–∞—Ç—å\n"
        "‚Ä¢ –ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤–º–µ—Å—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ\n"
        "‚Ä¢ –ü—Ä–∏ –∫–∞–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞\n"
        "‚Ä¢ –°–∫—Ä–∏–Ω—à–æ—Ç—ã (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)\n\n"
        "üí° –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ –º—ã —Å–º–æ–∂–µ–º —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É!",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def suggest_improvement_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ'
    """
    user_id = update.effective_user.id
    
    if not is_allowed_user(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    context.user_data["state"] = "awaiting_improvement_suggestion"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
    keyboard = [["‚ùå –û—Ç–º–µ–Ω–∞"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üí° **–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ**\n\n"
        "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –∏–¥–µ—è–º–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "üéØ **–ß—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:**\n"
        "‚Ä¢ –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏\n"
        "‚Ä¢ –£–ª—É—á—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n"
        "‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –ø–æ–∏—Å–∫–∞\n"
        "‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã\n"
        "‚Ä¢ –£–ª—É—á—à–µ–Ω–∏—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n\n"
        "üöÄ –í–∞—à–∏ –∏–¥–µ–∏ –ø–æ–º–æ–≥–∞—é—Ç –Ω–∞–º –¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ –ª—É—á—à–µ!",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def process_error_report(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = update.effective_user.id
    username = update.effective_user.username or f"User_{user_id}"
    message = update.message.text
    
    if not is_allowed_user(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –ë–î
        feedback_service = get_feedback_service()
        report_id = feedback_service.add_error_report(user_id, username, message)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data["state"] = None
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
        keyboard = [
            ["üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "üì∏ –ü–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ç–æ"],
            ["‚ùì –ü–æ–º–æ—â—å"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            f"‚úÖ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—É—á–µ–Ω–æ**\n\n"
            f"üé´ –ù–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è: **#{report_id}**\n\n"
            f"üìã –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
            f"üí¨ –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.\n\n"
            f"üôè –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç–µ —É–ª—É—á—à–∞—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞!",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        await notify_admins_about_feedback(context, 'error', report_id, username, message)
        
        # –õ–æ–≥–∏—Ä—É–µ–º
        analytics = context.bot_data.get('analytics')
        if analytics:
            analytics.log_command("error_report", user_id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def process_improvement_suggestion(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = update.effective_user.id
    username = update.effective_user.username or f"User_{user_id}"
    message = update.message.text
    
    if not is_allowed_user(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –ë–î
        feedback_service = get_feedback_service()
        suggestion_id = feedback_service.add_improvement_suggestion(user_id, username, message)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data["state"] = None
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
        keyboard = [
            ["üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "üì∏ –ü–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ç–æ"],
            ["‚ùì –ü–æ–º–æ—â—å"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            f"‚úÖ **–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ**\n\n"
            f"üé´ –ù–æ–º–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: **#{suggestion_id}**\n\n"
            f"üí° –í–∞—à–∞ –∏–¥–µ—è –ø—Ä–∏–Ω—è—Ç–∞ –∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—é! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏–º –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.\n\n"
            f"üöÄ –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ, –º—ã –≤–∞—Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–≤–µ–¥–æ–º–∏–º.\n\n"
            f"üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ –±–æ—Ç–∞!",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        await notify_admins_about_feedback(context, 'suggestion', suggestion_id, username, message)
        
        # –õ–æ–≥–∏—Ä—É–µ–º
        analytics = context.bot_data.get('analytics')
        if analytics:
            analytics.log_command("improvement_suggestion", user_id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def cancel_feedback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    """
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data["state"] = None
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
    keyboard = [
        ["üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "üì∏ –ü–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ç–æ"],
        ["‚ùì –ü–æ–º–æ—â—å"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=reply_markup
    )

async def notify_admins_about_feedback(context: ContextTypes.DEFAULT_TYPE, feedback_type: str, 
                                     feedback_id: int, username: str, message: str) -> None:
    """
    –£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    """
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤
        from toolbot.config import get_admin_ids
        admin_ids = get_admin_ids()
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã
        safe_username = username.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
        safe_message = message[:500].replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
        if len(message) > 500:
            safe_message += '...'
        
        if feedback_type == 'error':
            emoji = "üêõ"
            title = "–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"
            notification = (
                f"{emoji} <b>{title}</b>\n\n"
                f"üé´ <b>–ù–æ–º–µ—Ä:</b> #{feedback_id}\n"
                f"üë§ <b>–û—Ç:</b> @{safe_username}\n"
                f"üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{safe_message}\n\n"
                f"üìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π."
            )
        else:  # suggestion
            emoji = "üí°"
            title = "–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"
            notification = (
                f"{emoji} <b>{title}</b>\n\n"
                f"üé´ <b>–ù–æ–º–µ—Ä:</b> #{feedback_id}\n"
                f"üë§ <b>–û—Ç:</b> @{safe_username}\n"
                f"üìù <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:</b>\n{safe_message}\n\n"
                f"üìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π."
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin_id in admin_ids:
            try:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=notification,
                    parse_mode='HTML'
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º: {e}")

async def view_feedback_stats_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    """
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    try:
        feedback_service = get_feedback_service()
        stats = feedback_service.get_statistics()
        
        stats_text = (
            "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏</b>\n\n"
            
            "<b>üêõ –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {stats['total_errors']}\n"
            f"‚Ä¢ –ù–æ–≤—ã—Ö: {stats['new_errors']}\n"
            f"‚Ä¢ –†–µ—à–µ–Ω–æ: {stats['resolved_errors']}\n\n"
            
            "<b>üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {stats['total_suggestions']}\n"
            f"‚Ä¢ –ù–æ–≤—ã—Ö: {stats['new_suggestions']}\n"
            f"‚Ä¢ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ: {stats['implemented_suggestions']}\n\n"
            
            "üìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π."
        )
        
        await update.message.reply_text(
            stats_text,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def view_errors_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    """
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    try:
        feedback_service = get_feedback_service()
        errors = feedback_service.get_error_reports(limit=5)  # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        if not errors:
            await update.message.reply_text("üìã –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö")
            return
        
        await update.message.reply_text("<b>üêõ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö:</b>", parse_mode='HTML')
        
        for error in errors:
            status_emoji = "üü¢" if error['status'] == '—Ä–µ—à–µ–Ω–æ' else "üî¥" if error['status'] == '–Ω–æ–≤—ã–π' else "üü°"
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã
            username = error['username'] or 'Unknown'
            message_preview = error['message'][:200]  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–µ–≤—å—é
            if len(error['message']) > 200:
                message_preview += '...'
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã
            username = username.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
            message_preview = message_preview.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
            status = error['status'].replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
            
            text = (
                f"{status_emoji} <b>–û—à–∏–±–∫–∞ #{error['id']}</b>\n"
                f"üë§ –û—Ç: @{username}\n"
                f"üìÖ {error['timestamp']}\n"
                f"üè∑Ô∏è –°—Ç–∞—Ç—É—Å: {status}\n\n"
                f"üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{message_preview}"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard = []
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —Ä–µ—à–µ–Ω–æ)
            if error['status'] != '—Ä–µ—à–µ–Ω–æ':
                status_buttons = []
                if error['status'] != '–≤ —Ä–∞–±–æ—Ç–µ':
                    status_buttons.append(InlineKeyboardButton("üü° –í —Ä–∞–±–æ—Ç–µ", callback_data=f"error_status_{error['id']}_–≤_—Ä–∞–±–æ—Ç–µ"))
                status_buttons.append(InlineKeyboardButton("üü¢ –†–µ—à–µ–Ω–æ", callback_data=f"error_status_{error['id']}_—Ä–µ—à–µ–Ω–æ"))
                keyboard.append(status_buttons)
            
            # –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            keyboard.append([InlineKeyboardButton("üìñ –ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"error_full_{error['id']}")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                text,
                parse_mode='HTML',
                reply_markup=reply_markup
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

async def view_suggestions_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    """
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    try:
        feedback_service = get_feedback_service()
        suggestions = feedback_service.get_improvement_suggestions(limit=5)  # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        
        if not suggestions:
            await update.message.reply_text("üìã –ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é")
            return
        
        await update.message.reply_text("<b>üí° –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:</b>", parse_mode='HTML')
        
        for suggestion in suggestions:
            status_emoji = "üü¢" if suggestion['status'] == '—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ' else "üî¥" if suggestion['status'] == '–Ω–æ–≤—ã–π' else "üü°"
            priority_emoji = "üî•" if suggestion['priority'] == '–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π' else "‚ö†Ô∏è" if suggestion['priority'] == '–≤—ã—Å–æ–∫–∏–π' else "‚≠ê" if suggestion['priority'] == '—Å—Ä–µ–¥–Ω–∏–π' else "üìù"
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã
            username = suggestion['username'] or 'Unknown'
            message_preview = suggestion['message'][:200]  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–µ–≤—å—é
            if len(suggestion['message']) > 200:
                message_preview += '...'
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã
            username = username.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
            message_preview = message_preview.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
            status = suggestion['status'].replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
            priority = suggestion['priority'].replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
            
            text = (
                f"{status_emoji} <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{suggestion['id']}</b> {priority_emoji}\n"
                f"üë§ –û—Ç: @{username}\n"
                f"üìÖ {suggestion['timestamp']}\n"
                f"üè∑Ô∏è –°—Ç–∞—Ç—É—Å: {status} | –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}\n\n"
                f"üí° <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:</b>\n{message_preview}"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard = []
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)
            if suggestion['status'] != '—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ':
                status_buttons = []
                if suggestion['status'] != '–≤ —Ä–∞–±–æ—Ç–µ':
                    status_buttons.append(InlineKeyboardButton("üü° –í —Ä–∞–±–æ—Ç–µ", callback_data=f"suggestion_status_{suggestion['id']}_–≤_—Ä–∞–±–æ—Ç–µ"))
                status_buttons.append(InlineKeyboardButton("üü¢ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ", callback_data=f"suggestion_status_{suggestion['id']}_—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ"))
                keyboard.append(status_buttons)
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            priority_buttons = []
            if suggestion['priority'] != '–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π':
                priority_buttons.append(InlineKeyboardButton("üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π", callback_data=f"suggestion_priority_{suggestion['id']}_–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π"))
            if suggestion['priority'] != '–≤—ã—Å–æ–∫–∏–π':
                priority_buttons.append(InlineKeyboardButton("‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π", callback_data=f"suggestion_priority_{suggestion['id']}_–≤—ã—Å–æ–∫–∏–π"))
            if suggestion['priority'] != '—Å—Ä–µ–¥–Ω–∏–π':
                priority_buttons.append(InlineKeyboardButton("‚≠ê –°—Ä–µ–¥–Ω–∏–π", callback_data=f"suggestion_priority_{suggestion['id']}_—Å—Ä–µ–¥–Ω–∏–π"))
            if suggestion['priority'] != '–æ–±—ã—á–Ω—ã–π':
                priority_buttons.append(InlineKeyboardButton("üìù –û–±—ã—á–Ω—ã–π", callback_data=f"suggestion_priority_{suggestion['id']}_–æ–±—ã—á–Ω—ã–π"))
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø–æ 2 –≤ —Ä—è–¥
            if priority_buttons:
                for i in range(0, len(priority_buttons), 2):
                    keyboard.append(priority_buttons[i:i+2])
            
            # –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            keyboard.append([InlineKeyboardButton("üìñ –ü–æ–ª–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data=f"suggestion_full_{suggestion['id']}")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                text,
                parse_mode='HTML',
                reply_markup=reply_markup
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞–º–∏

async def handle_error_status_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—à–∏–±–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if not is_admin(query.from_user.id):
        await query.edit_message_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data: "error_status_{id}_{status}"
        _, _, error_id, status = query.data.split('_', 3)
        error_id = int(error_id)
        
        feedback_service = get_feedback_service()
        success = feedback_service.update_error_status(error_id, status, query.from_user.id)
        
        if success:
            status_emoji = "üü¢" if status == '—Ä–µ—à–µ–Ω–æ' else "üü°"
            await query.edit_message_text(
                f"‚úÖ <b>–°—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏ #{error_id} –∏–∑–º–µ–Ω–µ–Ω</b>\n\n"
                f"{status_emoji} –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: <b>{status}</b>\n"
                f"üë§ –ò–∑–º–µ–Ω–µ–Ω–æ: @{query.from_user.username}\n"
                f"üìÖ {query.message.date.strftime('%Y-%m-%d %H:%M')}",
                parse_mode='HTML'
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
            error_details = feedback_service.get_error_by_id(error_id)
            if error_details:
                try:
                    await context.bot.send_message(
                        chat_id=error_details['user_id'],
                        text=f"üì¢ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—é #{error_id}</b>\n\n"
                             f"{status_emoji} –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: <b>{status}</b>\n\n"
                             f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ!",
                        parse_mode='HTML'
                    )
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {error_details['user_id']}: {e}")
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—à–∏–±–∫–∏: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

async def handle_suggestion_status_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    if not is_admin(query.from_user.id):
        await query.edit_message_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data: "suggestion_status_{id}_{status}"
        _, _, suggestion_id, status = query.data.split('_', 3)
        suggestion_id = int(suggestion_id)
        
        feedback_service = get_feedback_service()
        success = feedback_service.update_suggestion_status(suggestion_id, status, query.from_user.id)
        
        if success:
            status_emoji = "üü¢" if status == '—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ' else "üü°"
            await query.edit_message_text(
                f"‚úÖ <b>–°—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è #{suggestion_id} –∏–∑–º–µ–Ω–µ–Ω</b>\n\n"
                f"{status_emoji} –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: <b>{status}</b>\n"
                f"üë§ –ò–∑–º–µ–Ω–µ–Ω–æ: @{query.from_user.username}\n"
                f"üìÖ {query.message.date.strftime('%Y-%m-%d %H:%M')}",
                parse_mode='HTML'
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
            suggestion_details = feedback_service.get_suggestion_by_id(suggestion_id)
            if suggestion_details:
                try:
                    await context.bot.send_message(
                        chat_id=suggestion_details['user_id'],
                        text=f"üì¢ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é #{suggestion_id}</b>\n\n"
                             f"{status_emoji} –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: <b>{status}</b>\n\n"
                             f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!",
                        parse_mode='HTML'
                    )
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {suggestion_details['user_id']}: {e}")
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

async def handle_suggestion_priority_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    if not is_admin(query.from_user.id):
        await query.edit_message_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data: "suggestion_priority_{id}_{priority}"
        _, _, suggestion_id, priority = query.data.split('_', 3)
        suggestion_id = int(suggestion_id)
        
        feedback_service = get_feedback_service()
        success = feedback_service.update_suggestion_priority(suggestion_id, priority, query.from_user.id)
        
        if success:
            priority_emoji = "üî•" if priority == '–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π' else "‚ö†Ô∏è" if priority == '–≤—ã—Å–æ–∫–∏–π' else "‚≠ê" if priority == '—Å—Ä–µ–¥–Ω–∏–π' else "üìù"
            await query.edit_message_text(
                f"‚úÖ <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è #{suggestion_id} –∏–∑–º–µ–Ω–µ–Ω</b>\n\n"
                f"{priority_emoji} –ù–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: <b>{priority}</b>\n"
                f"üë§ –ò–∑–º–µ–Ω–µ–Ω–æ: @{query.from_user.username}\n"
                f"üìÖ {query.message.date.strftime('%Y-%m-%d %H:%M')}",
                parse_mode='HTML'
            )
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

async def handle_show_full_error_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –æ—à–∏–±–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if not is_admin(query.from_user.id):
        await query.edit_message_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data: "error_full_{id}"
        _, _, error_id = query.data.split('_', 2)
        error_id = int(error_id)
        
        feedback_service = get_feedback_service()
        error_details = feedback_service.get_error_by_id(error_id)
        
        if error_details:
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã
            username = error_details['username'] or 'Unknown'
            message = error_details['message']
            
            username = username.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
            message = message.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
            
            status_emoji = "üü¢" if error_details['status'] == '—Ä–µ—à–µ–Ω–æ' else "üî¥" if error_details['status'] == '–Ω–æ–≤—ã–π' else "üü°"
            
            full_text = (
                f"üêõ <b>–ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ #{error_id}</b>\n\n"
                f"üë§ –û—Ç: @{username}\n"
                f"üìÖ {error_details['timestamp']}\n"
                f"{status_emoji} –°—Ç–∞—Ç—É—Å: {error_details['status']}\n\n"
                f"üìù <b>–ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{message}"
            )
            
            # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_errors_list")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                full_text,
                parse_mode='HTML',
                reply_markup=reply_markup
            )
        else:
            await query.edit_message_text("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

async def handle_show_full_suggestion_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    if not is_admin(query.from_user.id):
        await query.edit_message_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data: "suggestion_full_{id}"
        _, _, suggestion_id = query.data.split('_', 2)
        suggestion_id = int(suggestion_id)
        
        feedback_service = get_feedback_service()
        suggestion_details = feedback_service.get_suggestion_by_id(suggestion_id)
        
        if suggestion_details:
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã
            username = suggestion_details['username'] or 'Unknown'
            message = suggestion_details['message']
            
            username = username.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
            message = message.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
            
            status_emoji = "üü¢" if suggestion_details['status'] == '—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ' else "üî¥" if suggestion_details['status'] == '–Ω–æ–≤—ã–π' else "üü°"
            priority_emoji = "üî•" if suggestion_details['priority'] == '–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π' else "‚ö†Ô∏è" if suggestion_details['priority'] == '–≤—ã—Å–æ–∫–∏–π' else "‚≠ê" if suggestion_details['priority'] == '—Å—Ä–µ–¥–Ω–∏–π' else "üìù"
            
            full_text = (
                f"üí° <b>–ü–æ–ª–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{suggestion_id}</b> {priority_emoji}\n\n"
                f"üë§ –û—Ç: @{username}\n"
                f"üìÖ {suggestion_details['timestamp']}\n"
                f"{status_emoji} –°—Ç–∞—Ç—É—Å: {suggestion_details['status']}\n"
                f"üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {suggestion_details['priority']}\n\n"
                f"üìù <b>–ü–æ–ª–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:</b>\n{message}"
            )
            
            # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_suggestions_list")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                full_text,
                parse_mode='HTML',
                reply_markup=reply_markup
            )
        else:
            await query.edit_message_text("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏") 