#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–ú–æ–¥—É–ª—å —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞.
"""

import os
import time
import logging
import asyncio
from typing import List, Dict, Any
from telegram import Update
from telegram.ext import ContextTypes

from toolbot.utils.error_handler import ErrorHandler, ErrorSeverity
from toolbot.utils.recovery import RecoveryManager, ComponentState
from toolbot.utils.enhanced_logging import get_logger, LogLevel
from toolbot.config import is_admin  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∞–¥–º–∏–Ω-–ø—Ä–æ–≤–µ—Ä–æ–∫

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –º–æ–¥—É–ª—è
logger = get_logger(__name__)


async def error_stats_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /error_stats - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    """
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not await is_admin_async(user_id):
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫."
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫
    error_handler = ErrorHandler.get_instance()
    stats = error_handler.get_error_stats()
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    total_errors = stats.get("total_errors", 0)
    error_counts = stats.get("error_counts", {})
    
    if not error_counts:
        await update.message.reply_text(
            "‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫\n\n"
            "–û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ."
        )
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
    sorted_errors = sorted(error_counts.items(), key=lambda x: x[1], reverse=True)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫\n\n"
    message += f"–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {total_errors}\n\n"
    message += "–¢–∏–ø—ã –æ—à–∏–±–æ–∫:\n"
    
    for error_type, count in sorted_errors[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 –æ—à–∏–±–æ–∫
        percentage = (count / total_errors) * 100
        message += f"‚Ä¢ {error_type}: {count} ({percentage:.1f}%)\n"
    
    if len(sorted_errors) > 10:
        message += f"\n... –∏ –µ—â–µ {len(sorted_errors) - 10} —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫"
    
    await update.message.reply_text(message)


async def components_status_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /components_status - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    """
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    recovery_manager = RecoveryManager.get_instance()
    components = recovery_manager.get_component_states()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    state_emoji = {
        ComponentState.RUNNING: "‚úÖ",
        ComponentState.STARTING: "üîÑ",
        ComponentState.WARNING: "‚ö†Ô∏è",
        ComponentState.ERROR: "‚ùå",
        ComponentState.RECOVERING: "üîß",
        ComponentState.STOPPED: "‚èπ"
    }
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    if not components:
        await update.message.reply_text(
            "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö\n\n"
            "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."
        )
        return
    
    message = "üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã\n\n"
    
    for name, data in components.items():
        state = data.get("state", ComponentState.STOPPED)
        emoji = state_emoji.get(state, "‚ùì")
        last_update = data.get("last_update")
        last_restart = data.get("last_restart")
        restart_count = data.get("restart_count", 0)
        last_error = data.get("last_error")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if last_update:
            time_ago = int(time.time() - last_update)
            if time_ago < 60:
                time_str = f"{time_ago} —Å–µ–∫. –Ω–∞–∑–∞–¥"
            elif time_ago < 3600:
                time_str = f"{time_ago // 60} –º–∏–Ω. –Ω–∞–∑–∞–¥"
            else:
                time_str = f"{time_ago // 3600} —á–∞—Å. –Ω–∞–∑–∞–¥"
        else:
            time_str = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
        message += f"{emoji} <b>{name}</b>: {state.value}\n"
        message += f"   –û–±–Ω–æ–≤–ª–µ–Ω–æ: {time_str}\n"
        
        if restart_count > 0:
            message += f"   –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤: {restart_count}\n"
        
        if last_error:
            message += f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_error[:50]}...\n"
        
        message += "\n"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_text(message, parse_mode="HTML")


async def test_recovery_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test_recovery - —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –º–µ—Ö–∞–Ω–∏–∑–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.
    –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    """
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not await is_admin_async(user_id):
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ö–∞–Ω–∏–∑–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è."
        )
        return
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if not context.args or context.args[0].lower() != "confirm":
        await update.message.reply_text(
            "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –º–µ—Ö–∞–Ω–∏–∑–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—É—Ç–µ–º —Å–∏–º—É–ª—è—Ü–∏–∏ —Å–±–æ—è.\n\n"
            "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º 'confirm':\n"
            "/test_recovery confirm"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    recovery_manager = RecoveryManager.get_instance()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ç–µ—Å—Ç–∞
    message = await update.message.reply_text(
        "üîÑ –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ö–∞–Ω–∏–∑–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...\n"
        "–°–∏–º—É–ª–∏—Ä—É—é —Å–±–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ 'telegram_bot'..."
    )
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–±–æ–π
    recovery_manager.set_component_state("telegram_bot", ComponentState.ERROR, 
                                       "–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ö–∞–Ω–∏–∑–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
    
    # –ñ–¥–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
    await asyncio.sleep(3)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    components = recovery_manager.get_component_states()
    bot_state = components.get("telegram_bot", {}).get("state", ComponentState.STOPPED)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if bot_state == ComponentState.RUNNING:
        status = "‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω! –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
    elif bot_state == ComponentState.RECOVERING:
        status = "‚è≥ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è. –ú–µ—Ö–∞–Ω–∏–∑–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω."
    else:
        status = f"‚ùå –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {bot_state.value}"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ç–µ—Å—Ç–∞
    await message.edit_text(
        f"üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ö–∞–Ω–∏–∑–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è\n\n"
        f"{status}"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    recovery_manager.set_component_state("telegram_bot", ComponentState.RUNNING)


async def logs_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /logs - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∂—É—Ä–Ω–∞–ª–∞.
    –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    """
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not await is_admin_async(user_id):
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∂—É—Ä–Ω–∞–ª—ã."
        )
        return
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    log_type = "main"  # –¢–∏–ø –∂—É—Ä–Ω–∞–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    lines = 20  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    if context.args:
        for arg in context.args:
            if arg in ["main", "error", "recovery", "json"]:
                log_type = arg
            elif arg.isdigit():
                lines = int(arg)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∂—É—Ä–Ω–∞–ª–∞
    log_files = {
        "main": os.path.join("logs", "toolbot.log"),
        "error": os.path.join("logs", "errors.log"),
        "recovery": os.path.join("logs", "recovery.log"),
        "json": os.path.join("logs", "toolbot_json.log")
    }
    
    log_file = log_files.get(log_type)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not log_file or not os.path.exists(log_file):
        await update.message.reply_text(
            f"‚ùå –§–∞–π–ª –∂—É—Ä–Ω–∞–ª–∞ '{log_type}' –Ω–µ –Ω–∞–π–¥–µ–Ω."
        )
        return
    
    # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ñ–∞–π–ª–∞
    try:
        with open(log_file, 'r', encoding='utf-8') as f:
            # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫
            last_lines = read_last_lines(f, lines)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∂—É—Ä–Ω–∞–ª–∞: {e}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∂—É—Ä–Ω–∞–ª–∞: {e}"
        )
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(last_lines)} —Å—Ç—Ä–æ–∫ –∂—É—Ä–Ω–∞–ª–∞ '{log_type}':\n\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
    log_content = "\n".join(last_lines)
    if len(message) + len(log_content) > 4000:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open("temp_log.txt", "w", encoding="utf-8") as temp_file:
            temp_file.write(log_content)
        
        with open("temp_log.txt", "rb") as temp_file:
            await update.message.reply_document(
                document=temp_file,
                filename=f"{log_type}_last_{len(last_lines)}_lines.txt",
                caption=f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(last_lines)} —Å—Ç—Ä–æ–∫ –∂—É—Ä–Ω–∞–ª–∞ '{log_type}'"
            )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove("temp_log.txt")
    else:
        # –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message += f"```\n{log_content}\n```"
        await update.message.reply_text(message, parse_mode="Markdown")


def read_last_lines(file, num_lines: int) -> List[str]:
    """
    –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —á–∏—Ç–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞.
    
    Args:
        file: –û–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞
        num_lines: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è —á—Ç–µ–Ω–∏—è
        
    Returns:
        –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫
    """
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
    file.seek(0, os.SEEK_END)
    
    # –ü–æ–∑–∏—Ü–∏—è –≤ —Ñ–∞–π–ª–µ
    position = file.tell()
    
    # –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫
    lines = []
    
    # –ß–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∫–æ–Ω—Ü–∞
    line_count = 0
    while position >= 0 and line_count < num_lines:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø–æ–∑–∏—Ü–∏—é
        file.seek(position)
        
        # –ï—Å–ª–∏ –Ω–µ –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–∏–º–≤–æ–ª
        if position > 0:
            file.seek(position - 1)
        
        # –ß–∏—Ç–∞–µ–º —Å–∏–º–≤–æ–ª
        char = file.read(1)
        
        # –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞,
        # –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫
        if char == '\n' and position != file.tell() - 1:
            line = file.readline()
            lines.append(line.rstrip())
            line_count += 1
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–∏–º–≤–æ–ª—É
        position -= 1
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    return lines[::-1]


async def is_admin_async(user_id: int) -> bool:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –∏–Ω–∞—á–µ False
    """
    return is_admin(user_id) 