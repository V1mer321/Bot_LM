"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞.
"""
import logging
from telegram import Update
from telegram.ext import ContextTypes

from toolbot.config import is_allowed_user, is_admin  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
from toolbot.handlers.admin import process_admin_text_input
from toolbot.services.data_service import search_in_colors, search_in_stores, search_in_skobyanka
from services.text_logging_service import get_text_logging_service

logger = logging.getLogger(__name__)


async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    user_id = update.effective_user.id
    text = update.message.text
    username = update.effective_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    first_name = update.effective_user.first_name or ""
    last_name = update.effective_user.last_name or ""
    chat_id = update.effective_chat.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_state = context.user_data.get('state', 'none')
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
    message_type = 'text'
    if text.startswith('/'):
        message_type = 'command'
    elif user_state and 'admin' in user_state:
        message_type = 'admin_input'
    elif user_state and 'search' in user_state:
        message_type = 'search_query'
    elif user_state and 'feedback' in user_state:
        message_type = 'feedback'
    elif user_state and 'broadcast' in user_state:
        message_type = 'broadcast_input'
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤ SQLite –±–∞–∑—É (–ü–û–õ–ù–´–ô –¢–ï–ö–°–¢)
    try:
        text_logger = get_text_logging_service()
        text_logger.log_text_message(
            user_id=user_id,
            message_text=text,
            username=username,
            first_name=first_name,
            last_name=last_name,
            chat_id=chat_id,
            message_type=message_type,
            is_admin=is_admin(user_id),
            user_state=user_state
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤ SQLite: {e}")
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É (–∫—Ä–æ–º–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
    analytics = context.bot_data.get('analytics')
    if analytics:
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        text_preview = text[:50] + "..." if len(text) > 50 else text
        analytics.log_user_activity(user_id, "text_message", f"@{username}: {text_preview}")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–ü–ï–†–ï–î –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–∞)
    # –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∞–º –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if await process_admin_text_input(update, context):
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ
    if not is_allowed_user(user_id):
        from toolbot.handlers.common import show_error_message
        await show_error_message(update, "access_denied")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    state = context.user_data.get('state')
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    if state == 'awaiting_error_report':
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        from toolbot.handlers.feedback_handlers import process_error_report
        await process_error_report(update, context)
        return
    elif state == 'awaiting_improvement_suggestion':
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
        from toolbot.handlers.feedback_handlers import process_improvement_suggestion
        await process_improvement_suggestion(update, context)
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å)
    analytics = context.bot_data.get('analytics')
    if analytics:
        analytics.log_command("text_search", user_id)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º –ø–æ–∏—Å–∫–∞
    if state == 'searching_colors':
        await process_colors_search(update, context, text)
    elif state == 'searching_stores':
        await process_stores_search(update, context, text)
    elif state == 'searching_skobyanka':
        await process_skobyanka_search(update, context, text)
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await update.message.reply_text(
            "‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
        )


async def process_colors_search(update: Update, context: ContextTypes.DEFAULT_TYPE, query: str) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø–æ —Ü–≤–µ—Ç–∞–º
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    """
    results = await search_in_colors(query)
    
    if results:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for i, result in enumerate(results[:10]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            await update.message.reply_text(
                result,
                parse_mode='Markdown'
            )
            
        if len(results) > 10:
            await update.message.reply_text(
                f"üîç –ù–∞–π–¥–µ–Ω–æ –µ—â—ë {len(results) - 10} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."
            )
    else:
        await update.message.reply_text(
            "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å."
        )


async def process_stores_search(update: Update, context: ContextTypes.DEFAULT_TYPE, query: str) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    """
    results = await search_in_stores(query)
    
    if results:
        await update.message.reply_text(
            f"*üè™ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É:* '{query}'\n",
            parse_mode='Markdown'
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for i, result in enumerate(results[:10]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            await update.message.reply_text(
                result,
                parse_mode='Markdown'
            )
            
        if len(results) > 10:
            await update.message.reply_text(
                f"üîç –ù–∞–π–¥–µ–Ω–æ –µ—â—ë {len(results) - 10} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."
            )
    else:
        await update.message.reply_text(
            "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å."
        )


async def process_skobyanka_search(update: Update, context: ContextTypes.DEFAULT_TYPE, query: str) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø–æ —Å–∫–æ–±—è–Ω–∫–µ
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    """
    results = await search_in_skobyanka(query)
    
    if results:
        await update.message.reply_text(
            f"*üîß –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ —Å–∫–æ–±—è–Ω–∫–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É:* '{query}'\n",
            parse_mode='Markdown'
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for i, result in enumerate(results[:10]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            await update.message.reply_text(
                result,
                parse_mode='Markdown'
            )
            
        if len(results) > 10:
            await update.message.reply_text(
                f"üîç –ù–∞–π–¥–µ–Ω–æ –µ—â—ë {len(results) - 10} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."
            )
    else:
        await update.message.reply_text(
            "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å."
        ) 