"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞.
"""
import logging
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (—Ç–µ–ø–µ—Ä—å –æ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω-ID)
from toolbot.config import is_admin, add_user_to_whitelist, remove_user_from_whitelist, load_config, add_admin

logger = logging.getLogger(__name__)


async def admin_panel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    """
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é)
    if not is_admin(user_id):
        await update.message.reply_text(
            "‚õî *–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω*\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            parse_mode='Markdown'
        )
        return

    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    analytics = context.bot_data.get('analytics')
    if analytics:
        analytics.log_command("admin_panel", user_id)

    keyboard = [
        ["üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", "üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"],
        ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞", "üëÄ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"],
        ["üïí Real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "üëë –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"],
        ["üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º", "üìù –õ–æ–≥–∏ —Ç–µ–∫—Å—Ç–æ–≤"],
        ["üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—ã", "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "*üõ†Ô∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        "‚Ä¢ üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å - –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—à–∏–±–æ–∫ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π\n"
        "‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞ - –∞–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞\n"
        "‚Ä¢ üëÄ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Ö–æ–¥–æ–≤ –∏ –¥–µ–π—Å—Ç–≤–∏–π\n"
        "‚Ä¢ üïí Real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ - —Å–∏—Å—Ç–µ–º–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
        "‚Ä¢ üëë –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞\n"
        "‚Ä¢ üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º - –º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
        "‚Ä¢ üìù –õ–æ–≥–∏ —Ç–µ–∫—Å—Ç–æ–≤ - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—ã - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö\n\n"
        "üí° _–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏_",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def user_management_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    """
    user_id = update.effective_user.id

    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    keyboard = [
        ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"],
        ["üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"],
        ["üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "*üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "‚Ä¢ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def add_user_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = update.effective_user.id

    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['state'] = 'awaiting_new_user_id'

    await update.message.reply_text(
        "*‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å.",
        parse_mode='Markdown'
    )


async def remove_user_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = update.effective_user.id

    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    context.user_data['state'] = 'awaiting_remove_user_id'

    await update.message.reply_text(
        "*‚ûñ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.",
        parse_mode='Markdown'
    )


async def add_admin_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    user_id = update.effective_user.id

    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    context.user_data['state'] = 'awaiting_new_admin_id'

    await update.message.reply_text(
        "*üëë –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
        "‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–æ–º!",
        parse_mode='Markdown'
    )


async def list_users_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    config_data = load_config()  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞–ª–æ —Å –º–æ–¥—É–ª–µ–º config
    whitelist = config_data.get('whitelist', [])
    admins = config_data.get('admins', [])

    if not whitelist:
        await update.message.reply_text("‚ùå –í —Å–ø–∏—Å–∫–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    message = "*üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n"
    
    for idx, uid in enumerate(whitelist, 1):
        admin_mark = "üëë " if uid in admins else ""
        message += f"{idx}. {admin_mark}ID: `{uid}`\n"

    message += "\nüí° _–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –æ—Ç–º–µ—á–µ–Ω—ã –∑–Ω–∞—á–∫–æ–º_ üëë"

    await update.message.reply_text(
        message,
        parse_mode='Markdown'
    )


async def back_to_admin_panel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    """
    await admin_panel_handler(update, context)


async def process_admin_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        
    Returns:
        True –µ—Å–ª–∏ –≤–≤–æ–¥ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    user_id = update.effective_user.id
    text = update.message.text
    state = context.user_data.get('state')
    
    if not is_admin(user_id):
        return False
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if state == 'awaiting_new_user_id':
        try:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ –º–∏–Ω—É—Å–∞
            clean_text = ''.join(c for c in text.strip() if c.isdigit() or c == '-')
            if not clean_text or clean_text == '-':
                raise ValueError("–ü—É—Å—Ç–æ–π ID")
            
            new_user_id = int(clean_text)
            
            if add_user_to_whitelist(new_user_id):
                await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {new_user_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
                
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.pop('state', None)
            return True
        except (ValueError, TypeError):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789 –∏–ª–∏ -123456789)")
            return True
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    elif state == 'awaiting_remove_user_id':
        try:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ –º–∏–Ω—É—Å–∞
            clean_text = ''.join(c for c in text.strip() if c.isdigit() or c == '-')
            if not clean_text or clean_text == '-':
                raise ValueError("–ü—É—Å—Ç–æ–π ID")
            
            user_id_to_remove = int(clean_text)
            
            if remove_user_from_whitelist(user_id_to_remove):
                await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id_to_remove} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
                
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.pop('state', None)
            return True
        except (ValueError, TypeError):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789 –∏–ª–∏ -123456789)")
            return True
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    elif state == 'awaiting_new_admin_id':
        try:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ –º–∏–Ω—É—Å–∞
            clean_text = ''.join(c for c in text.strip() if c.isdigit() or c == '-')
            if not clean_text or clean_text == '-':
                raise ValueError("–ü—É—Å—Ç–æ–π ID")
            
            new_admin_id = int(clean_text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            config_data = load_config()
            current_admins = config_data.get('admins', []) if config_data else []
            
            if new_admin_id in current_admins:
                await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {new_admin_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            elif add_admin(new_admin_id):
                await update.message.reply_text(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {new_admin_id} —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!\n"
                    f"üëë –¢–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."
                )
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
                
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.pop('state', None)
            return True
        except (ValueError, TypeError):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789 –∏–ª–∏ -123456789)")
            return True
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    elif state == 'awaiting_broadcast_message':
        if text.strip():
            await send_broadcast_message(update, context, text.strip())
            return True
        else:
            await update.message.reply_text("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return True
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
    elif state == 'awaiting_broadcast_confirmation':
        if text == "‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å":
            await execute_broadcast(update, context)
            return True
        elif text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.pop('broadcast_text', None)
            context.user_data.pop('broadcast_users', None)
            context.user_data.pop('state', None)
            
            await update.message.reply_text(
                "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=ReplyKeyboardMarkup([
                    ["üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", "üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"],
                    ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞", "üëÄ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"],
                    ["üïí Real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "üëë –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"],
                    ["üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º", "üìù –õ–æ–≥–∏ —Ç–µ–∫—Å—Ç–æ–≤"],
                    ["üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—ã", "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"]
                ], resize_keyboard=True)
            )
            return True
        else:
            await update.message.reply_text("‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: '‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å' –∏–ª–∏ '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å'")
            return True
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ª–æ–≥–∞—Ö
    elif state == 'awaiting_text_search_query':
        if text.strip():
            await perform_text_search(update, context, text.strip())
            return True
        else:
            await update.message.reply_text("‚ùå –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return True
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    elif state == 'awaiting_user_messages_id':
        try:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ –º–∏–Ω—É—Å–∞
            clean_text = ''.join(c for c in text.strip() if c.isdigit() or c == '-')
            if not clean_text or clean_text == '-':
                raise ValueError("–ü—É—Å—Ç–æ–π ID")
            
            target_user_id = int(clean_text)
            await show_user_messages(update, context, target_user_id)
            return True
        except (ValueError, TypeError):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789 –∏–ª–∏ -123456789)")
            return True
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
    elif state == 'awaiting_user_search_id':
        try:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ –º–∏–Ω—É—Å–∞
            clean_text = ''.join(c for c in text.strip() if c.isdigit() or c == '-')
            if not clean_text or clean_text == '-':
                raise ValueError("–ü—É—Å—Ç–æ–π ID")
            
            search_user_id = int(clean_text)
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            analytics = context.bot_data.get('analytics')
            if not analytics:
                await update.message.reply_text("‚ùå –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                context.user_data.pop('state', None)
                return True
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_stats = analytics.get_user_stats(search_user_id)
            activity_log = analytics.get_user_activity_log(search_user_id, limit=10)
            
            if user_stats.get('requests', 0) == 0:
                await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {search_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.")
                context.user_data.pop('state', None)
                return True
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            import datetime
            import time
            
            first_seen = user_stats.get('first_seen', 0)
            last_seen = user_stats.get('last_seen', first_seen)
            total_requests = user_stats.get('requests', 0)
            commands = user_stats.get('commands', {})
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
            first_seen_dt = datetime.datetime.fromtimestamp(first_seen)
            last_seen_dt = datetime.datetime.fromtimestamp(last_seen)
            
            first_seen_str = first_seen_dt.strftime("%d.%m.%Y %H:%M")
            last_seen_str = last_seen_dt.strftime("%d.%m.%Y %H:%M")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            current_time = time.time()
            time_diff = current_time - last_seen
            if time_diff < 3600:  # –º–µ–Ω–µ–µ —á–∞—Å–∞
                status = "üü¢ –í —Å–µ—Ç–∏"
            elif time_diff < 86400:  # –º–µ–Ω–µ–µ –¥–Ω—è
                status = "üü° –ë—ã–ª —Å–µ–≥–æ–¥–Ω—è"
            elif time_diff < 604800:  # –º–µ–Ω–µ–µ –Ω–µ–¥–µ–ª–∏
                status = "üü† –ë—ã–ª –Ω–∞ –Ω–µ–¥–µ–ª–µ"
            else:
                status = "üî¥ –î–∞–≤–Ω–æ –Ω–µ –∑–∞—Ö–æ–¥–∏–ª"
            
            message = f"üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {search_user_id}\n\n"
            message += f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
            message += f"üë§ –ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥: {first_seen_str}\n"
            message += f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: {last_seen_str}\n"
            message += f"üìû –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}\n\n"
            
            # –¢–æ–ø –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if commands:
                message += "üîù –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                sorted_commands = sorted(commands.items(), key=lambda x: x[1], reverse=True)
                for cmd, count in sorted_commands[:5]:
                    cmd_safe = cmd.replace('\\', '\\\\').replace('*', '\\*').replace('_', '\\_').replace('`', '\\`').replace('[', '\\[').replace(']', '\\]').replace('(', '\\(').replace(')', '\\)').replace('~', '\\~').replace('>', '\\>').replace('#', '\\#').replace('+', '\\+').replace('-', '\\-').replace('=', '\\=').replace('|', '\\|').replace('{', '\\{').replace('}', '\\}').replace('.', '\\.').replace('!', '\\!')
                    message += f"‚Ä¢ {cmd_safe} \\- {count}x\n"
                message += "\n"
            
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            if activity_log:
                message += "üìù –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:\n"
                for activity in activity_log[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π
                    timestamp = activity.get('timestamp', 0)
                    activity_type = activity.get('type', 'unknown')
                    details = activity.get('details', '')
                    
                    activity_dt = datetime.datetime.fromtimestamp(timestamp)
                    activity_str = activity_dt.strftime("%d.%m %H:%M")
                    
                    # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    short_details = details[:30] + "..." if len(details) > 30 else details
                    details_safe = short_details.replace('\\', '\\\\').replace('*', '\\*').replace('_', '\\_').replace('`', '\\`').replace('[', '\\[').replace(']', '\\]').replace('(', '\\(').replace(')', '\\)').replace('~', '\\~').replace('>', '\\>').replace('#', '\\#').replace('+', '\\+').replace('-', '\\-').replace('=', '\\=').replace('|', '\\|').replace('{', '\\{').replace('}', '\\}').replace('.', '\\.').replace('!', '\\!')
                    
                    message += f"‚Ä¢ {activity_str} \\- {activity_type}: {details_safe}\n"
            
            await update.message.reply_text(
                message,
                parse_mode='MarkdownV2'
            )
                
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.pop('state', None)
            return True
        except (ValueError, TypeError):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789 –∏–ª–∏ -123456789)")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
            context.user_data.pop('state', None)
            return True
    
    return False


async def feedback_management_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
    """
    user_id = update.effective_user.id

    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    keyboard = [
        ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"],
        ["üêõ –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—à–∏–±–æ–∫", "üí° –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"],
        ["üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "*üí¨ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        "‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π\n"
        "‚Ä¢ üêõ –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—à–∏–±–æ–∫ - –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö\n"
        "‚Ä¢ üí° –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π - –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é\n\n"
        "üí° _–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏_",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def feedback_stats_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    """
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ feedback_handlers
    from toolbot.handlers.feedback_handlers import view_feedback_stats_handler
    await view_feedback_stats_handler(update, context)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = [["üîô –ù–∞–∑–∞–¥ –∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üìã _–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞_",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def errors_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—à–∏–±–æ–∫
    """
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ feedback_handlers
    from toolbot.handlers.feedback_handlers import view_errors_handler
    await view_errors_handler(update, context)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = [["üîô –ù–∞–∑–∞–¥ –∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üìã _–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞_",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def suggestions_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    """
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ feedback_handlers
    from toolbot.handlers.feedback_handlers import view_suggestions_handler
    await view_suggestions_handler(update, context)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = [["üîô –ù–∞–∑–∞–¥ –∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üìã _–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞_",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def back_to_feedback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
    """
    await feedback_management_handler(update, context)


async def search_statistics_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∏—Å–∫–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
    """
    user_id = update.effective_user.id

    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        from services.search_statistics import get_stats_service
        stats_service = get_stats_service()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        success_stats = stats_service.get_search_success_rate()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤
        failed_stats = stats_service.get_failed_searches_stats()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–∏—Å–∫–∏
        recent_failed = stats_service.get_recent_failed_searches(limit=5)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        message = "*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º*\n\n"
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        message += "*üéØ –û–±—â–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*\n"
        message += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤: {success_stats.get('total_searches', 0)}\n"
        message += f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤: {success_stats.get('successful_searches', 0)}\n"
        message += f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–æ–±—â–∏–ª–∏ –æ –Ω–µ—É–¥–∞—á–∞—Ö: {success_stats.get('user_reported_failures', 0)}\n"
        success_rate = success_stats.get('success_rate_percent', 0)
        message += f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate}%%\n"
        message += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å—Ö–æ–∂–µ—Å—Ç—å: {success_stats.get('average_similarity', 0):.3f}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤
        message += "*‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ—É–¥–∞—á:*\n"
        message += f"‚Ä¢ –í—Å–µ–≥–æ –∂–∞–ª–æ–±: {failed_stats.get('total_failed_searches', 0)}\n"
        
        # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ—É–¥–∞—á–∞–º–∏
        top_users = failed_stats.get('top_users_with_failures', [])
        if top_users:
            message += f"‚Ä¢ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ—É–¥–∞—á–∞–º–∏:\n"
            for user in top_users[:3]:
                username = user.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                message += f"  - {username} (ID: {user['user_id']}): {user['failed_count']} –Ω–µ—É–¥–∞—á\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
        daily_stats = failed_stats.get('daily_stats', {})
        if daily_stats:
            message += f"\n‚Ä¢ –ù–µ—É–¥–∞—á–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏:\n"
            for date, count in list(daily_stats.items())[:5]:
                message += f"  - {date}: {count} –Ω–µ—É–¥–∞—á\n"
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–∏—Å–∫–∏
        if recent_failed:
            message += f"\n*üîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–∏—Å–∫–∏:*\n"
            for i, search in enumerate(recent_failed[:3], 1):
                username = search.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                timestamp = search.get('timestamp', '')[:10]  # –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞
                feedback = search.get('feedback_type', 'unknown')
                comment = search.get('user_comment', '')
                
                message += f"{i}. {username} ({timestamp})\n"
                if comment:
                    message += f"   üí¨ \"{comment[:50]}...\"\n"
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = [
            ["üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"],
            ["üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∂–∞–ª–æ–±—ã", "üìà –¢—Ä–µ–Ω–¥—ã –ø–æ–∏—Å–∫–∞"],
            ["üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∏—Å–∫–∞: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∏—Å–∫–∞.\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π."
        )


async def detailed_search_stats_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∏—Å–∫–∞"""
    user_id = update.effective_user.id

    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        from services.search_statistics import get_stats_service
        stats_service = get_stats_service()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        recent_failed = stats_service.get_recent_failed_searches(limit=10)
        
        if not recent_failed:
            await update.message.reply_text("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–∏—Å–∫–∞—Ö.")
            return
        
        message = "*üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤*\n\n"
        
        for i, search in enumerate(recent_failed, 1):
            username = search.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            user_id_str = search.get('user_id', 'unknown')
            timestamp = search.get('timestamp', '')[:16]  # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
            feedback_type = search.get('feedback_type', 'unknown')
            comment = search.get('user_comment', '')
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
            results = search.get('search_results', [])
            if results:
                best_similarity = max([r.get('similarity', 0) for r in results])
                results_count = len(results)
            else:
                best_similarity = 0
                results_count = 0
            
            message += f"*{i}. {username}* (ID: {user_id_str})\n"
            message += f"üìÖ {timestamp}\n"
            message += f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {results_count}, –ª—É—á—à–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å: {best_similarity:.3f}\n"
            
            if comment:
                message += f"üí¨ \"{comment}\"\n"
            
            message += "‚îÄ" * 30 + "\n"
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(message) > 3500:
                message += f"\n... –∏ –µ—â–µ {len(recent_failed) - i} –∑–∞–ø–∏—Å–µ–π"
                break
        
        await update.message.reply_text(
            message,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


async def recent_complaints_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∂–∞–ª–æ–±"""
    user_id = update.effective_user.id

    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        from services.search_statistics import get_stats_service
        stats_service = get_stats_service()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∂–∞–ª–æ–±—ã —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
        all_failed = stats_service.get_recent_failed_searches(limit=20)
        complaints_with_comments = [
            search for search in all_failed 
            if search.get('user_comment') and search.get('user_comment').strip()
        ]
        
        if not complaints_with_comments:
            await update.message.reply_text("üìù –ù–µ—Ç –∂–∞–ª–æ–± —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏.")
            return
        
        message = "*üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∂–∞–ª–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n"
        
        for i, search in enumerate(complaints_with_comments[:5], 1):
            username = search.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            timestamp = search.get('timestamp', '')[:10]
            comment = search.get('user_comment', '')
            
            message += f"*{i}. {username}* ({timestamp})\n"
            message += f"üí¨ \"{comment}\"\n\n"
        
        await update.message.reply_text(
            message,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∂–∞–ª–æ–±: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∂–∞–ª–æ–±.")


async def user_activity_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    keyboard = [
        ["üìà –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "üìã –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"],
        ["üîç –ü–æ–∏—Å–∫ –ø–æ ID", "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
        ["üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "*üëÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:\n"
        "‚Ä¢ üìà *–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏* - –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π\n"
        "‚Ä¢ üìã *–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏* - –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π\n"
        "‚Ä¢ üîç *–ü–æ–∏—Å–∫ –ø–æ ID* - –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n"
        "‚Ä¢ üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞* - —Å–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def active_users_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    """
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    analytics = context.bot_data.get('analytics')
    if not analytics:
        await update.message.reply_text("‚ùå –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    try:
        import datetime
        
        recent_users = analytics.get_recent_users(days=7)
        
        if not recent_users:
            await update.message.reply_text("üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        message = "*üìà –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)*\n\n"
        
        for i, user_data in enumerate(recent_users[:20], 1):  # –¢–æ–ø-20
            try:
                user_id_val = user_data.get("user_id", 0)
                last_seen = user_data.get("last_seen", 0)
                total_requests = user_data.get("total_requests", 0)
                recent_activity = user_data.get("recent_activity", [])
                recent_activity_count = len(recent_activity) if recent_activity else 0
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                try:
                    last_seen_dt = datetime.datetime.fromtimestamp(last_seen)
                    last_seen_str = last_seen_dt.strftime("%d.%m %H:%M")
                except (OSError, ValueError):
                    last_seen_str = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
                message += f"{i}. ID: `{user_id_val}`\n"
                message += f"   –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: {last_seen_str}\n"
                message += f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}\n"
                message += f"   –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é: {recent_activity_count}\n\n"
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {i}: {e}")
                continue
        
        if len(recent_users) > 20:
            message += f"*...–∏ –µ—â—ë {len(recent_users) - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*"
        
        await update.message.reply_text(
            message,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        import traceback
        logger.error(f"–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n"
            f"–î–µ—Ç–∞–ª–∏: {str(e)}"
        )


async def all_users_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    """
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    analytics = context.bot_data.get('analytics')
    if not analytics:
        await update.message.reply_text("‚ùå –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    try:
        import datetime
        import time
        
        stats = analytics.get_stats()
        if not stats:
            await update.message.reply_text("üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
            
        users = stats.get("users", {})
        
        if not users:
            await update.message.reply_text("üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        user_list = []
        for user_id_str, user_data in users.items():
            try:
                if not user_data or not isinstance(user_data, dict):
                    continue
                    
                last_seen = user_data.get("last_seen", user_data.get("first_seen", 0))
                first_seen = user_data.get("first_seen", 0)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
                if not isinstance(last_seen, (int, float)) or not isinstance(first_seen, (int, float)):
                    continue
                    
                user_list.append({
                    "user_id": int(user_id_str),
                    "last_seen": last_seen,
                    "total_requests": user_data.get("requests", 0),
                    "first_seen": first_seen
                })
            except (ValueError, TypeError) as e:
                logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str}: {e}")
                continue
        
        if not user_list:
            await update.message.reply_text("üìã –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        user_list.sort(key=lambda x: x["last_seen"], reverse=True)
        
        message = f"*üìã –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(user_list)} —á–µ–ª.)*\n\n"
        
        current_time = time.time()
        
        for i, user_data in enumerate(user_list[:30], 1):  # –ü–µ—Ä–≤—ã–µ 30
            try:
                user_id_val = user_data["user_id"]
                last_seen = user_data["last_seen"]
                total_requests = user_data["total_requests"]
                first_seen = user_data["first_seen"]
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                time_diff = current_time - last_seen
                if time_diff < 3600:  # –º–µ–Ω–µ–µ —á–∞—Å–∞
                    status = "üü¢ –æ–Ω–ª–∞–π–Ω"
                elif time_diff < 86400:  # –º–µ–Ω–µ–µ –¥–Ω—è
                    status = "üü° —Å–µ–≥–æ–¥–Ω—è"
                elif time_diff < 604800:  # –º–µ–Ω–µ–µ –Ω–µ–¥–µ–ª–∏
                    status = "üü† –Ω–∞ –Ω–µ–¥–µ–ª–µ"
                else:
                    status = "üî¥ –¥–∞–≤–Ω–æ"
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ
                try:
                    first_seen_dt = datetime.datetime.fromtimestamp(first_seen)
                    first_seen_str = first_seen_dt.strftime("%d.%m.%y")
                except (OSError, ValueError):
                    first_seen_str = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
                message += f"{i}. ID: `{user_id_val}` {status}\n"
                message += f"   –ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥: {first_seen_str}\n"
                message += f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}\n\n"
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {i}: {e}")
                continue
        
        if len(user_list) > 30:
            message += f"*...–∏ –µ—â—ë {len(user_list) - 30} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n"
        
        message += "üí° _–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ü–æ–∏—Å–∫ –ø–æ ID'_"
        
        await update.message.reply_text(
            message,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        import traceback
        logger.error(f"–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
            f"–î–µ—Ç–∞–ª–∏: {str(e)}"
        )


async def search_user_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
    """
    user_id = update.effective_user.id

    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['state'] = 'awaiting_user_search_id'

    await update.message.reply_text(
        "*üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:",
        parse_mode='Markdown'
    )


async def activity_stats_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    """
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    analytics = context.bot_data.get('analytics')
    if not analytics:
        await update.message.reply_text("‚ùå –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    try:
        import datetime
        
        summary = analytics.get_summary()
        
        if not summary:
            await update.message.reply_text("üìä –î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
            return
        
        uptime_days = summary.get("uptime_days", 0)
        total_requests = summary.get("total_requests", 0)
        unique_users = summary.get("unique_users", 0)
        active_today = summary.get("active_today", 0)
        active_week = summary.get("active_week", 0)
        
        message = "*üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏*\n\n"
        message += f"‚è± *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:* {uptime_days:.1f} –¥–Ω–µ–π\n"
        message += f"üìû *–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤:* {total_requests}\n"
        message += f"üë• *–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {unique_users}\n"
        message += f"üü¢ *–ê–∫—Ç–∏–≤–Ω—ã —Å–µ–≥–æ–¥–Ω—è:* {active_today}\n"
        message += f"üìÖ *–ê–∫—Ç–∏–≤–Ω—ã –∑–∞ –Ω–µ–¥–µ–ª—é:* {active_week}\n\n"
        
        # –¢–æ–ø –∫–æ–º–∞–Ω–¥
        top_commands = summary.get("top_commands", [])
        if top_commands:
            message += "*üîù –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            for i, (cmd, count) in enumerate(top_commands[:5], 1):  # –¢–æ–ª—å–∫–æ —Ç–æ–ø-5
                message += f"{i}. `{cmd}` - {count}x\n"
            message += "\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —Ñ–æ—Ç–æ
        photo_searches = summary.get("photo_searches", {})
        if photo_searches and isinstance(photo_searches, dict):
            total_photo = photo_searches.get("total", 0)
            success_photo = photo_searches.get("success", 0)
            
            if total_photo > 0:
                success_rate = (success_photo / total_photo) * 100
                message += f"üì∏ *–ü–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ç–æ:*\n"
                message += f"   –í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤: {total_photo}\n"
                message += f"   –£—Å–ø–µ—à–Ω—ã—Ö: {success_photo}\n"
                message += f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%%\n"
        
        await update.message.reply_text(
            message,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        import traceback
        logger.error(f"–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n"
            f"–î–µ—Ç–∞–ª–∏: {str(e)}"
        )


async def update_databases_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
    """
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        analytics = context.bot_data.get('analytics')
        if analytics:
            analytics.log_command("update_databases", user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        status_message = await update.message.reply_text(
            "üîÑ *–ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö...*\n\n"
            "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
            parse_mode='Markdown'
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–∏—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
        import os
        import sqlite3
        from datetime import datetime
        
        db_path = "data/unified_products.db"
        csv_path = "data/txt_export/unified_products.csv"
        txt_path = "data/txt_export/unified_products.txt"
        
        status_info = "üìä *–°—Ç–∞—Ç—É—Å –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö:*\n\n"
        
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º SQLite –±–∞–∑—É
        if os.path.exists(db_path):
            try:
                conn = sqlite3.connect(db_path)
                cursor = conn.cursor()
                cursor.execute("SELECT COUNT(*) FROM products")
                count = cursor.fetchone()[0]
                
                file_size = os.path.getsize(db_path) / (1024 * 1024)  # –ú–ë
                mod_time = datetime.fromtimestamp(os.path.getmtime(db_path))
                mod_time_str = mod_time.strftime('%d.%m.%Y %H:%M')
                
                status_info += f"‚úÖ *SQLite –±–∞–∑–∞:* {count:,} —Ç–æ–≤–∞—Ä–æ–≤\n"
                status_info += f"   –†–∞–∑–º–µ—Ä: {file_size:.1f} –ú–ë\n"
                status_info += f"   –û–±–Ω–æ–≤–ª–µ–Ω–∞: {mod_time_str}\n\n"
                
                conn.close()
            except Exception as e:
                status_info += f"‚ùå *SQLite –±–∞–∑–∞:* –û—à–∏–±–∫–∞ - {str(e)}\n\n"
        else:
            status_info += f"‚ùå *SQLite –±–∞–∑–∞:* –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º TXT —ç–∫—Å–ø–æ—Ä—Ç
        if os.path.exists(txt_path):
            file_size = os.path.getsize(txt_path) / (1024 * 1024)  # –ú–ë
            mod_time = datetime.fromtimestamp(os.path.getmtime(txt_path))
            
            with open(txt_path, 'r', encoding='utf-8') as f:
                lines = sum(1 for _ in f) - 1  # –º–∏–Ω—É—Å –∑–∞–≥–æ–ª–æ–≤–æ–∫
            
            mod_time_str = mod_time.strftime('%d.%m.%Y %H:%M')
            status_info += f"‚úÖ *TXT —ç–∫—Å–ø–æ—Ä—Ç:* {lines:,} —Ç–æ–≤–∞—Ä–æ–≤\n"
            status_info += f"   –†–∞–∑–º–µ—Ä: {file_size:.1f} –ú–ë\n"
            status_info += f"   –û–±–Ω–æ–≤–ª–µ–Ω: {mod_time_str}\n\n"
        else:
            status_info += f"‚ùå *TXT —ç–∫—Å–ø–æ—Ä—Ç:* –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CSV —ç–∫—Å–ø–æ—Ä—Ç
        if os.path.exists(csv_path):
            file_size = os.path.getsize(csv_path) / (1024 * 1024)  # –ú–ë
            mod_time = datetime.fromtimestamp(os.path.getmtime(csv_path))
            
            mod_time_str = mod_time.strftime('%d.%m.%Y %H:%M')
            status_info += f"‚úÖ *CSV —ç–∫—Å–ø–æ—Ä—Ç:* –¥–æ—Å—Ç—É–ø–µ–Ω\n"
            status_info += f"   –†–∞–∑–º–µ—Ä: {file_size:.1f} –ú–ë\n"
            status_info += f"   –û–±–Ω–æ–≤–ª–µ–Ω: {mod_time_str}\n\n"
        else:
            status_info += f"‚ùå *CSV —ç–∫—Å–ø–æ—Ä—Ç:* –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n"
        
        status_info += "üí° *–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* –û—Å–Ω–æ–≤–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (SQLite) –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n"
        status_info += "TXT –∏ CSV —Ñ–∞–π–ª—ã –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await status_message.edit_text(
            status_info,
            parse_mode='Markdown'
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å TXT", callback_data="recreate_txt")],
            [InlineKeyboardButton("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å", callback_data="check_integrity")],
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="back_to_admin")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üõ†Ô∏è *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        logger.error(f"–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö.\n"
            f"–î–µ—Ç–∞–ª–∏: {str(e)}"
        )


async def realtime_monitoring_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    """
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    keyboard = [
        ["üìä –î–∞—à–±–æ—Ä–¥ —Å–∏—Å—Ç–µ–º—ã", "üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"],
        ["‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "üö® –ê–ª–µ—Ä—Ç—ã –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"],
        ["üìà –ò—Å—Ç–æ—Ä–∏—è –º–µ—Ç—Ä–∏–∫", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"],
        ["üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "*üïí Real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥*\n\n"
        "–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏:\n\n"
        "‚Ä¢ üìä –î–∞—à–±–æ—Ä–¥ —Å–∏—Å—Ç–µ–º—ã - —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ CPU, GPU, RAM\n"
        "‚Ä¢ üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - –∫—Ç–æ —Å–µ–π—á–∞—Å –æ–Ω–ª–∞–π–Ω\n"
        "‚Ä¢ ‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤\n"
        "‚Ä¢ üö® –ê–ª–µ—Ä—Ç—ã - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã\n"
        "‚Ä¢ üìà –ò—Å—Ç–æ—Ä–∏—è –º–µ—Ç—Ä–∏–∫ - –≥—Ä–∞—Ñ–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–∞—Å—ã\n"
        "‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤\n\n"
        "üí° _–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥_",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def system_dashboard_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    """
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        from toolbot.services.monitoring import monitoring
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞
        dashboard_data = monitoring.get_dashboard_data()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        current_time = datetime.now()
        uptime_hours = dashboard_data['uptime_seconds'] // 3600
        uptime_minutes = (dashboard_data['uptime_seconds'] % 3600) // 60
        
        message = f"*üìä –°–∏—Å—Ç–µ–º–Ω—ã–π –¥–∞—à–±–æ—Ä–¥* `{current_time.hour:02d}:{current_time.minute:02d}:{current_time.second:02d}`\n\n"
        message += f"‚è± *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:* {uptime_hours}—á {uptime_minutes}–º\n\n"
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        system = dashboard_data['system']
        
        # CPU
        cpu = system.get('cpu', {})
        cpu_usage = cpu.get('usage_percent', 0)
        cpu_emoji = "üî•" if cpu_usage > 80 else "‚ö°" if cpu_usage > 50 else "‚úÖ"
        message += f"{cpu_emoji} *CPU:* {cpu_usage:.1f}%%\n"
        
        if cpu.get('frequency_mhz'):
            message += f"   –ß–∞—Å—Ç–æ—Ç–∞: {cpu['frequency_mhz']:.0f} MHz\n"
        message += f"   –Ø–¥—Ä–∞: {cpu.get('cores_logical', '?')} –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö\n\n"
        
        # –ü–∞–º—è—Ç—å
        memory = system.get('memory', {})
        mem_usage = memory.get('usage_percent', 0)
        mem_emoji = "üî•" if mem_usage > 85 else "‚ö†Ô∏è" if mem_usage > 70 else "‚úÖ"
        message += f"{mem_emoji} *RAM:* {mem_usage:.1f}%%\n"
        message += f"   –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {memory.get('used_gb', 0):.1f} / {memory.get('total_gb', 0):.1f} –ì–ë\n"
        message += f"   –°–≤–æ–±–æ–¥–Ω–æ: {memory.get('available_gb', 0):.1f} –ì–ë\n\n"
        
        # GPU (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        gpu = system.get('gpu')
        if gpu:
            gpu_usage = gpu.get('usage_percent', 0)
            gpu_temp = gpu.get('temperature_c', 0)
            gpu_mem_usage = gpu.get('memory_usage_percent', 0)
            
            gpu_emoji = "üî•" if gpu_temp > 80 or gpu_usage > 90 else "‚ö°" if gpu_usage > 70 else "‚úÖ"
            message += f"{gpu_emoji} *GPU:* {gpu.get('name', 'Unknown')}\n"
            message += f"   –ó–∞–≥—Ä—É–∑–∫–∞: {gpu_usage:.1f}%%\n"
            
            if gpu_temp > 0:
                message += f"   –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {gpu_temp}¬∞C\n"
                
            if 'memory_total_mb' in gpu:
                total_gb = gpu['memory_total_mb'] / 1024
                used_gb = gpu.get('memory_allocated_mb', gpu.get('memory_used_mb', 0)) / 1024
                message += f"   VRAM: {used_gb:.1f} / {total_gb:.1f} –ì–ë ({gpu_mem_usage:.1f}%%)\n"
            message += "\n"
        else:
            message += "‚ùå *GPU:* –ù–µ –¥–æ—Å—Ç—É–ø–µ–Ω\n\n"
        
        # –î–∏—Å–∫
        disk = system.get('disk', {})
        disk_usage = disk.get('usage_percent', 0)
        disk_emoji = "üî•" if disk_usage > 90 else "‚ö†Ô∏è" if disk_usage > 80 else "‚úÖ"
        message += f"{disk_emoji} *–î–∏—Å–∫:* {disk_usage:.1f}%%\n"
        message += f"   –°–≤–æ–±–æ–¥–Ω–æ: {disk.get('free_gb', 0):.1f} / {disk.get('total_gb', 0):.1f} –ì–ë\n\n"
        
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        activity = dashboard_data['activity']
        message += f"üë• *–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:* {activity['active_now']}\n"
        message += f"üìû *–ó–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ —á–∞—Å:* {activity['requests_last_hour']}\n"
        message += f"üÜï *–ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è:* {activity['new_users_today']}\n\n"
        
        # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        performance = dashboard_data['performance']
        if not performance.get('no_data'):
            avg_time = performance.get('avg_response_time_ms', 0)
            success_rate = performance.get('success_rate_percent', 0)
            
            perf_emoji = "üî•" if avg_time > 1000 else "‚ö†Ô∏è" if avg_time > 500 else "‚úÖ"
            message += f"{perf_emoji} *–°—Ä–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç:* {avg_time:.0f}–º—Å\n"
            message += f"‚úÖ *–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:* {success_rate:.1f}%%\n"
            message += f"üî¢ *–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤:* {performance.get('total_requests', 0)}\n\n"
        
        # –ê–ª–µ—Ä—Ç—ã
        alerts = dashboard_data.get('alerts', [])
        if alerts:
            message += "üö® *–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã:*\n"
            for alert in alerts[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                emoji = "üî•" if alert['type'] == 'critical' else "‚ö†Ô∏è"
                message += f"{emoji} {alert['message']}\n"
            if len(alerts) > 3:
                message += f"... –∏ –µ—â–µ {len(alerts) - 3} –∞–ª–µ—Ä—Ç–æ–≤\n"
        else:
            message += "‚úÖ *–ê–ª–µ—Ä—Ç—ã:* –í—Å–µ –≤ –Ω–æ—Ä–º–µ\n"
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_dashboard")],
            [InlineKeyboardButton("üìà –ò—Å—Ç–æ—Ä–∏—è", callback_data="metrics_history"),
             InlineKeyboardButton("üö® –í—Å–µ –∞–ª–µ—Ä—Ç—ã", callback_data="all_alerts")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_monitoring")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –¥–∞—à–±–æ—Ä–¥–µ: {e}")
        import traceback
        logger.error(f"–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n{str(e)}"
        )


async def active_users_realtime_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    """
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        from toolbot.services.monitoring import monitoring
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        active_users = monitoring.user_activity_monitor.get_active_users(30)
        activity_stats = monitoring.user_activity_monitor.get_activity_statistics()
        queue_status = monitoring.user_activity_monitor.get_request_queue_status()
        
        current_time = datetime.now()
        message = f"*üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏* `{current_time.hour:02d}:{current_time.minute:02d}:{current_time.second:02d}`\n\n"
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        message += f"üü¢ *–°–µ–π—á–∞—Å –æ–Ω–ª–∞–π–Ω:* {len(active_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        message += f"üìä *–ó–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ 5 –º–∏–Ω:* {queue_status['recent_5min']}\n"
        message += f"‚ö° *–°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞:* {queue_status['avg_per_minute']:.1f} req/min\n\n"
        
        if active_users:
            message += "*üî• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω):*\n\n"
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            sorted_users = sorted(
                active_users.items(),
                key=lambda x: x[1]['minutes_ago']
            )
            
            for user_id_active, user_data in sorted_users[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
                minutes_ago = user_data['minutes_ago']
                activity_type = user_data['activity_type']
                
                # –≠–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                activity_emoji = {
                    'photo_search': 'üì∏',
                    'text_search': 'üîç',
                    'catalog_browse': 'üìã',
                    'admin_panel': '‚öôÔ∏è',
                    'start': 'üöÄ',
                    'help': '‚ùì'
                }.get(activity_type, 'üí¨')
                
                # –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                if minutes_ago == 0:
                    time_str = "—Å–µ–π—á–∞—Å"
                elif minutes_ago < 5:
                    time_str = f"{minutes_ago}–º –Ω–∞–∑–∞–¥"
                else:
                    time_str = f"{minutes_ago}–º –Ω–∞–∑–∞–¥"
                
                message += f"{activity_emoji} `{user_id_active}` - {time_str}\n"
                message += f"   ‚Ü≥ {activity_type}\n"
            
            if len(active_users) > 10:
                message += f"\n... –∏ –µ—â–µ {len(active_users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        else:
            message += "üò¥ *–°–µ–π—á–∞—Å –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç –æ–Ω–ª–∞–π–Ω*\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        message += f"\nüìÖ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:*\n"
        message += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {activity_stats['requests_today']}\n"
        message += f"‚Ä¢ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {activity_stats['new_users_today']}\n"
        message += f"‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤—Å–µ–≥–æ: {activity_stats['total_registered_users']}\n"
        
        # –ö–Ω–æ–ø–∫–∏
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_active_users")],
            [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="detailed_activity_stats")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_monitoring")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö:\n{str(e)}"
        )


async def performance_monitoring_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    """
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        from toolbot.services.monitoring import monitoring
        
        performance_stats = monitoring.performance_monitor.get_performance_stats()
        system_metrics = monitoring.system_monitor.get_current_metrics()
        
        current_time = datetime.now()
        message = f"*‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å* `{current_time.hour:02d}:{current_time.minute:02d}:{current_time.second:02d}`\n\n"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        avg_time = 0
        success_rate = 100
        
        if performance_stats.get('no_data'):
            message += "üìä *–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏*\n\n"
            message += "–î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –ø–µ—Ä–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–æ—Ç—É."
        else:
            # –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            avg_time = performance_stats.get('avg_response_time_ms', 0)
            success_rate = performance_stats.get('success_rate_percent', 0)
            total_requests = performance_stats.get('total_requests', 0)
            total_errors = performance_stats.get('total_errors', 0)
            
            # –≠–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            time_emoji = "üî•" if avg_time > 1000 else "‚ö†Ô∏è" if avg_time > 500 else "‚úÖ"
            success_emoji = "üî•" if success_rate < 90 else "‚ö†Ô∏è" if success_rate < 95 else "‚úÖ"
            
            message += f"{time_emoji} *–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:* {avg_time:.1f}–º—Å\n"
            message += f"{success_emoji} *–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:* {success_rate:.1f}%%\n"
            message += f"üìä *–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤:* {total_requests:,}\n"
            message += f"‚ùå *–û—à–∏–±–æ–∫:* {total_errors}\n\n"
            
            # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π
            model_stats = performance_stats.get('model_stats', {})
            if model_stats:
                message += "*üß† –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π:*\n"
                for model_name, stats in model_stats.items():
                    avg_inference = stats['avg_inference_ms']
                    total_runs = stats['total_runs']
                    
                    model_emoji = "üöÄ" if avg_inference < 100 else "‚ö°" if avg_inference < 300 else "‚ö†Ô∏è"
                    message += f"{model_emoji} {model_name}:\n"
                    message += f"   ‚Ü≥ {avg_inference:.1f}–º—Å (–∑–∞–ø—É—Å–∫–æ–≤: {total_runs})\n"
                message += "\n"
        
        # GPU –º–µ—Ç—Ä–∏–∫–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        gpu_data = system_metrics.get('gpu')
        if gpu_data:
            message += "*üéÆ GPU –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:*\n"
            message += f"‚Ä¢ –ú–æ–¥–µ–ª—å: {gpu_data.get('name', 'Unknown')}\n"
            
            if 'usage_percent' in gpu_data:
                usage = gpu_data['usage_percent']
                usage_emoji = "üî•" if usage > 90 else "‚ö°" if usage > 70 else "‚úÖ"
                message += f"‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞: {usage_emoji} {usage:.1f}%%\n"
                
            if 'temperature_c' in gpu_data:
                temp = gpu_data['temperature_c']
                temp_emoji = "üî•" if temp > 80 else "‚ö†Ô∏è" if temp > 70 else "‚úÖ"
                message += f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp_emoji} {temp}¬∞C\n"
                
            if 'memory_usage_percent' in gpu_data:
                mem_usage = gpu_data['memory_usage_percent']
                mem_emoji = "üî•" if mem_usage > 90 else "‚ö†Ô∏è" if mem_usage > 80 else "‚úÖ"
                message += f"‚Ä¢ VRAM: {mem_emoji} {mem_usage:.1f}%%\n"
            
            message += "\n"
        
        # –¢—Ä–µ–Ω–¥—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è)
        message += "*üìà –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:*\n"
        
        # CPU
        cpu_usage = system_metrics.get('cpu', {}).get('usage_percent', 0)
        cpu_emoji = "üî•" if cpu_usage > 80 else "‚ö°" if cpu_usage > 50 else "‚úÖ"
        message += f"{cpu_emoji} CPU: {cpu_usage:.1f}%%\n"
        
        # –ü–∞–º—è—Ç—å
        mem_usage = system_metrics.get('memory', {}).get('usage_percent', 0)
        mem_emoji = "üî•" if mem_usage > 85 else "‚ö†Ô∏è" if mem_usage > 70 else "‚úÖ"
        message += f"{mem_emoji} RAM: {mem_usage:.1f}%%\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        recommendations = []
        
        if avg_time > 1000:
            recommendations.append("üîß –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –≤—ã—Å–æ–∫–æ–µ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É GPU")
        if success_rate < 95:
            recommendations.append("‚ö†Ô∏è –ù–∏–∑–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –æ—à–∏–±–æ–∫")
        if cpu_usage > 80:
            recommendations.append("üî• –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU - –≤–æ–∑–º–æ–∂–Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ")
        if mem_usage > 85:
            recommendations.append("üíæ –í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ RAM - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏")
            
        if recommendations:
            message += "\n*üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
            for rec in recommendations:
                message += f"‚Ä¢ {rec}\n"
        
        # –ö–Ω–æ–ø–∫–∏
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_performance")],
            [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏", callback_data="detailed_metrics")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_monitoring")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:\n{str(e)}"
        )


async def back_to_monitoring_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    """
    await realtime_monitoring_handler(update, context)


async def metrics_history_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã
    """
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        from toolbot.services.monitoring import monitoring
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–µ—Ç—Ä–∏–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
        metrics_history = monitoring.system_monitor.get_metrics_history(60)
        
        if not metrics_history:
            await update.message.reply_text(
                "üìà *–ò—Å—Ç–æ—Ä–∏—è –º–µ—Ç—Ä–∏–∫*\n\n"
                "–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω–∞ –Ω–µ–¥–∞–≤–Ω–æ.\n"
                "–ò—Å—Ç–æ—Ä–∏—è –±—É–¥–µ—Ç –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.",
                parse_mode='Markdown'
            )
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã
        cpu_values = [m['metrics']['cpu']['usage_percent'] for m in metrics_history if 'cpu' in m['metrics']]
        memory_values = [m['metrics']['memory']['usage_percent'] for m in metrics_history if 'memory' in m['metrics']]
        
        message = "*üìà –ò—Å—Ç–æ—Ä–∏—è –º–µ—Ç—Ä–∏–∫ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å)*\n\n"
        
        if cpu_values:
            cpu_avg = sum(cpu_values) / len(cpu_values)
            cpu_max = max(cpu_values)
            cpu_min = min(cpu_values)
            message += f"**üíª CPU:**\n"
            message += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ: {cpu_avg:.1f}%%\n"
            message += f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: {cpu_max:.1f}%%\n"
            message += f"‚Ä¢ –ú–∏–Ω–∏–º—É–º: {cpu_min:.1f}%%\n\n"
        
        if memory_values:
            mem_avg = sum(memory_values) / len(memory_values)
            mem_max = max(memory_values)
            mem_min = min(memory_values)
            message += f"**üíæ RAM:**\n"
            message += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ: {mem_avg:.1f}%%\n"
            message += f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: {mem_max:.1f}%%\n"
            message += f"‚Ä¢ –ú–∏–Ω–∏–º—É–º: {mem_min:.1f}%%\n\n"
        
        message += f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(metrics_history)}\n"
        message += f"‚è∞ –ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(metrics_history) * 5} –º–∏–Ω—É—Ç"
        
        await update.message.reply_text(message, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –º–µ—Ç—Ä–∏–∫: {e}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –º–µ—Ç—Ä–∏–∫:\n{str(e)}"
        )


async def alerts_notifications_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∞–ª–µ—Ä—Ç—ã –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    """
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        from toolbot.services.monitoring import monitoring
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤
        dashboard_data = monitoring.get_dashboard_data()
        alerts = dashboard_data.get('alerts', [])
        
        message = "*üö® –ê–ª–µ—Ä—Ç—ã –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è*\n\n"
        
        if alerts:
            message += f"**–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã ({len(alerts)}):**\n\n"
            
            for i, alert in enumerate(alerts, 1):
                alert_type = alert['type']
                alert_message = alert['message']
                timestamp = alert['timestamp'][:16]  # –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
                
                emoji = "üî•" if alert_type == 'critical' else "‚ö†Ô∏è"
                message += f"{emoji} **{i}.** {alert_message}\n"
                message += f"   ‚è∞ {timestamp}\n\n"
        else:
            message += "‚úÖ **–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –Ω–µ—Ç**\n\n"
            message += "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ."
        
        message += "\n**‚öôÔ∏è –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:**\n"
        message += f"‚Ä¢ CPU: > 90%%\n"
        message += f"‚Ä¢ RAM: > 85%%\n"
        message += f"‚Ä¢ GPU: > 95%%\n"
        message += f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ GPU: > 80¬∞C\n"
        message += f"‚Ä¢ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: > 1000–º—Å\n"
        message += f"‚Ä¢ –û—à–∏–±–∫–∏: > 10%%"
        
        await update.message.reply_text(message, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞–ª–µ—Ä—Ç–∞—Ö: {e}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤:\n{str(e)}"
        )


async def monitoring_settings_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    """
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        from toolbot.services.monitoring import monitoring
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è uptime
        dashboard_data = monitoring.get_dashboard_data()
        thresholds = monitoring.alert_thresholds
        
        message = "*‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞*\n\n"
        message += "**üîß –¢–µ–∫—É—â–∏–µ –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:**\n\n"
        
        message += f"üíª **CPU Usage:** {thresholds['cpu_usage']}%%\n"
        message += f"üíæ **Memory Usage:** {thresholds['memory_usage']}%%\n"
        message += f"üéÆ **GPU Usage:** {thresholds['gpu_usage']}%%\n"
        message += f"üå°Ô∏è **GPU Temperature:** {thresholds['gpu_temperature']}¬∞C\n"
        message += f"‚è±Ô∏è **Response Time:** {thresholds['response_time_ms']}–º—Å\n"
        message += f"‚ùå **Error Rate:** {thresholds['error_rate_percent']}%%\n\n"
        
        message += "**üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:**\n"
        message += f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–±–æ—Ä–∞: 5 —Å–µ–∫—É–Ω–¥\n"
        message += f"‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è: 24 —á–∞—Å–∞ (1440 –∑–∞–ø–∏—Å–µ–π)\n"
        message += f"‚Ä¢ –õ–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 30 –º–∏–Ω—É—Ç\n"
        message += f"‚Ä¢ –õ–∏–º–∏—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: 1000 –∑–∞–ø–∏—Å–µ–π\n\n"
        
        message += "**üîÑ –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:**\n"
        uptime = dashboard_data.get('uptime_seconds', 0)
        uptime_hours = uptime // 3600
        uptime_minutes = (uptime % 3600) // 60
        message += f"‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç: {uptime_hours}—á {uptime_minutes}–º\n"
        # –ù—É–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        try:
            from toolbot.services.monitoring import GPU_AVAILABLE, TORCH_AVAILABLE
        except ImportError:
            GPU_AVAILABLE, TORCH_AVAILABLE = False, False
            
        message += f"‚Ä¢ GPU –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if GPU_AVAILABLE else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n"
        message += f"‚Ä¢ PyTorch –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if TORCH_AVAILABLE else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}"
        
        await update.message.reply_text(message, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n{str(e)}"
        ) 


async def broadcast_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    """
    user_id = update.effective_user.id

    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    context.user_data['state'] = 'awaiting_broadcast_message'

    await update.message.reply_text(
        "*üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞.\n\n"
        "‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –∫–æ–≥–¥–∞-–ª–∏–±–æ –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –±–æ—Ç–æ–º!\n\n"
        "üí° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è *Markdown* —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
        "‚Ä¢ `*–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç*`\n"
        "‚Ä¢ `_–∫—É—Ä—Å–∏–≤_`\n"
        "‚Ä¢ `` `–∫–æ–¥` ``\n"
        "‚Ä¢ `[—Å—Å—ã–ª–∫–∞](URL)`\n\n"
        "üö´ –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin",
        parse_mode='Markdown'
    )


async def send_broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    """
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        analytics = context.bot_data.get('analytics')
        if not analytics:
            await update.message.reply_text("‚ùå –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return

        stats = analytics.get_stats()
        users = stats.get("users", {})
        
        if not users:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_ids = [int(uid) for uid in users.keys()]
        total_users = len(user_ids)
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        confirm_message = (
            f"*üì¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n"
            f"**–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:** {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
            f"**–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:**\n"
            f"```\n{message_text}\n```\n\n"
            f"‚ö†Ô∏è *–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?*"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        context.user_data['broadcast_text'] = message_text
        context.user_data['broadcast_users'] = user_ids
        context.user_data['state'] = 'awaiting_broadcast_confirmation'
        
        keyboard = [
            ["‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        
        await update.message.reply_text(
            confirm_message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏:\n{str(e)}"
        )


async def execute_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        broadcast_text = context.user_data.get('broadcast_text')
        user_ids = context.user_data.get('broadcast_users', [])
        
        if not broadcast_text or not user_ids:
            await update.message.reply_text("‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress_message = await update.message.reply_text(
            f"üì§ **–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...**\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(user_ids)}\n"
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: 0/{len(user_ids)}",
            parse_mode='Markdown'
        )

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        sent_count = 0
        failed_count = 0
        blocked_count = 0
        failed_users = []

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Ä—Ü–∏—è–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
        import asyncio
        for i, target_user_id in enumerate(user_ids):
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await context.bot.send_message(
                    chat_id=target_user_id,
                    text=broadcast_text,
                    parse_mode='Markdown'
                )
                sent_count += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
                if (i + 1) % 10 == 0 or i == len(user_ids) - 1:
                    await progress_message.edit_text(
                        f"üì§ **–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞—Å—Å—ã–ª–∫–∞...**\n"
                        f"–í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(user_ids)}\n"
                        f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
                        f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n"
                        f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {blocked_count}\n"
                        f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {i+1}/{len(user_ids)} ({((i+1)/len(user_ids)*100):.1f}%)",
                        parse_mode='Markdown'
                    )
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã
                await asyncio.sleep(0.05)  # 50–º—Å –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                
            except Exception as e:
                error_str = str(e).lower()
                if "blocked" in error_str or "bot was blocked" in error_str:
                    blocked_count += 1
                else:
                    failed_count += 1
                    failed_users.append((target_user_id, str(e)))
                
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")

        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        success_rate = (sent_count / len(user_ids)) * 100
        
        final_report = (
            f"üìä **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
            f"**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_ids)}\n"
            f"‚Ä¢ ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
            f"‚Ä¢ üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {blocked_count}\n"
            f"‚Ä¢ ‚ùå –û—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏: {failed_count}\n"
            f"‚Ä¢ üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%\n\n"
        )
        
        if failed_users:
            final_report += f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –æ—à–∏–±–∫–∞–º–∏:** {len(failed_users)} —á–µ–ª.\n"
            if len(failed_users) <= 5:
                for uid, error in failed_users:
                    final_report += f"‚Ä¢ ID {uid}: {error[:50]}...\n"
            else:
                final_report += f"‚Ä¢ –ü–µ—Ä–≤—ã–µ 5 –∏–∑ {len(failed_users)} –æ—à–∏–±–æ–∫:\n"
                for uid, error in failed_users[:5]:
                    final_report += f"  - ID {uid}: {error[:40]}...\n"
        
        final_report += f"\n‚è∞ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ~{len(user_ids) * 0.05:.1f} —Å–µ–∫."

        await progress_message.edit_text(final_report, parse_mode='Markdown')
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        analytics = context.bot_data.get('analytics')
        if analytics:
            analytics.log_user_activity(user_id, "broadcast_message", 
                                       f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count}/{len(user_ids)} —Å–æ–æ–±—â–µ–Ω–∏–π")

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data.pop('broadcast_text', None)
        context.user_data.pop('broadcast_users', None)
        context.user_data.pop('state', None)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await update.message.reply_text(
            f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ:\n{str(e)}"
        )
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        context.user_data.pop('broadcast_text', None)
        context.user_data.pop('broadcast_users', None)
        context.user_data.pop('state', None)


async def text_logs_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    user_id = update.effective_user.id

    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    keyboard = [
        ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤", "üîç –ü–æ–∏—Å–∫ –≤ —Ç–µ–∫—Å—Ç–∞—Ö"],
        ["üë§ –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"],
        ["üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤", "üìà –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"],
        ["üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "*üìù –õ–æ–≥–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        "‚Ä¢ üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤* - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "‚Ä¢ üîç *–ü–æ–∏—Å–∫ –≤ —Ç–µ–∫—Å—Ç–∞—Ö* - –ø–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "‚Ä¢ üë§ *–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* - –∏—Å—Ç–æ—Ä–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "‚Ä¢ üìã *–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è* - –Ω–µ–¥–∞–≤–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "‚Ä¢ üßπ *–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤* - —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π\n"
        "‚Ä¢ üìà *–ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏* - –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n\n"
        "üí° _–í—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –≤ SQLite –±–∞–∑—É_",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def text_logs_statistics_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ª–æ–≥–æ–≤
    """
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        from services.text_logging_service import get_text_logging_service
        
        text_logger = get_text_logging_service()
        stats = text_logger.get_statistics()
        
        if not stats:
            await update.message.reply_text("‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return

        message = "*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π*\n\n"
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–∏—Ñ—Ä—ã
        message += f"**–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        message += f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats.get('total_messages', 0)}\n"
        message += f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('unique_users', 0)}\n"
        message += f"‚Ä¢ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞: {stats.get('messages_24h', 0)}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
        message_types = stats.get('message_types', {})
        if message_types:
            message += f"**–ü–æ —Ç–∏–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏–π:**\n"
            for msg_type, count in list(message_types.items())[:7]:  # –¢–æ–ø-7
                type_emoji = {
                    'text': 'üí¨',
                    'command': '‚ö°',
                    'admin_input': 'üëë',
                    'search_query': 'üîç',
                    'feedback': 'üìù',
                    'broadcast_input': 'üì¢'
                }.get(msg_type, 'üìÑ')
                message += f"‚Ä¢ {type_emoji} {msg_type}: {count}\n"
            message += "\n"
        
        # –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        top_users = stats.get('top_users', [])
        if top_users:
            message += f"**–¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n"
            for i, user in enumerate(top_users[:5], 1):
                username_display = f"@{user['username']}" if user['username'] else f"ID {user['user_id']}"
                message += f"{i}. {username_display}: {user['message_count']} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        
        await update.message.reply_text(message, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ —Ç–µ–∫—Å—Ç–æ–≤: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:\n{str(e)}")


async def search_in_texts_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    """
    user_id = update.effective_user.id

    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    context.user_data['state'] = 'awaiting_text_search_query'

    await update.message.reply_text(
        "*üîç –ü–æ–∏—Å–∫ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ª–æ–≥–∞—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n"
        "‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –ü–æ–∏—Å–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ –í–°–ï–ú —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º!\n\n"
        "üí° –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:\n"
        "‚Ä¢ `—Ç–æ–≤–∞—Ä` - –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ª–æ–≤–æ–º '—Ç–æ–≤–∞—Ä'\n"
        "‚Ä¢ `/start` - –Ω–∞–π—Ç–∏ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç–∞\n"
        "‚Ä¢ `–æ—à–∏–±–∫–∞` - –Ω–∞–π—Ç–∏ –∂–∞–ª–æ–±—ã –Ω–∞ –æ—à–∏–±–∫–∏\n\n"
        "üö´ –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin",
        parse_mode='Markdown'
    )


async def user_messages_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = update.effective_user.id

    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['state'] = 'awaiting_user_messages_id'

    await update.message.reply_text(
        "*üë§ –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å.\n\n"
        "üìã –ü–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏ –∏ —Ç–∏–ø–∞–º–∏.\n\n"
        "üö´ –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin",
        parse_mode='Markdown'
    )


async def recent_messages_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        from services.text_logging_service import get_text_logging_service
        import sqlite3
        
        text_logger = get_text_logging_service()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
        conn = sqlite3.connect(text_logger.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT user_id, username, message_text, timestamp, message_type, is_admin
            FROM text_messages 
            ORDER BY timestamp DESC
            LIMIT 20
        ''')
        
        messages = cursor.fetchall()
        conn.close()
        
        if not messages:
            await update.message.reply_text("üìã –¢–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç")
            return

        message_text = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
        
        for i, msg in enumerate(messages, 1):
            user_id_msg, username, text, timestamp, msg_type, is_admin_flag = msg
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            from datetime import datetime
            try:
                dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                time_str = dt.strftime("%H:%M")
            except:
                time_str = timestamp[:16]
            
            # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            type_emoji = {
                'text': 'üí¨',
                'command': '‚ö°',
                'admin_input': 'üëë',
                'search_query': 'üîç',
                'feedback': 'üìù',
                'broadcast_input': 'üì¢'
            }.get(msg_type, 'üìÑ')
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            text_short = text[:50] + "..." if len(text) > 50 else text
            text_safe = text_short.replace('\\', '\\\\').replace('*', '\\*').replace('_', '\\_').replace('`', '\\`').replace('[', '\\[').replace(']', '\\]').replace('(', '\\(').replace(')', '\\)').replace('~', '\\~').replace('>', '\\>').replace('#', '\\#').replace('+', '\\+').replace('-', '\\-').replace('=', '\\=').replace('|', '\\|').replace('{', '\\{').replace('}', '\\}').replace('.', '\\.').replace('!', '\\!')
            
            # –û—Ç–º–µ—Ç–∫–∞ –∞–¥–º–∏–Ω–∞
            admin_mark = " üëë" if is_admin_flag else ""
            username_display = f"@{username}" if username else f"ID{user_id_msg}"
            
            message_text += f"{i}\\. {type_emoji} {time_str} {username_display}{admin_mark}\n"
            message_text += f"   {text_safe}\n\n"
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(message_text) > 3000:
                message_text += f"\\.\\.\\. –∏ –µ—â—ë {len(messages) - i} —Å–æ–æ–±—â–µ–Ω–∏–π"
                break

        await update.message.reply_text(message_text, parse_mode='MarkdownV2')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ Markdown –ø—Ä–∏ –æ—à–∏–±–∫–µ
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}"
        await update.message.reply_text(error_msg)


async def cleanup_old_texts_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ª–æ–≥–æ–≤
    """
    user_id = update.effective_user.id

    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    keyboard = [
        ["üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π"],
        ["üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã", "üîô –ù–∞–∑–∞–¥ –∫ –ª–æ–≥–∞–º"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "*üßπ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π*\n\n"
        "‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –£–¥–∞–ª–µ–Ω–Ω—ã–µ –ª–æ–≥–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
        "‚Ä¢ –°—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞\n"
        "‚Ä¢ –°—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π - –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞\n"
        "‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã - —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n\n"
        "üí° _–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ –æ—á–∏—â–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏_",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def perform_text_search(update: Update, context: ContextTypes.DEFAULT_TYPE, query: str) -> None:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    """
    try:
        from services.text_logging_service import get_text_logging_service
        
        text_logger = get_text_logging_service()
        results = text_logger.search_messages(query, limit=20)
        
        if not results:
            await update.message.reply_text(f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            context.user_data.pop('state', None)
            return

        message_text = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: '{query}'\n\n"
        message_text += f"–ù–∞–π–¥–µ–Ω–æ: {len(results)} —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
        
        for i, result in enumerate(results[:15], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15
            user_id_res = result['user_id']
            username = result['username']
            text = result['text']
            timestamp = result['timestamp']
            msg_type = result['type']
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            from datetime import datetime
            try:
                dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                time_str = dt.strftime("%d.%m %H:%M")
            except:
                time_str = timestamp[:16]
            
            # –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–±–µ–∑ Markdown)
            if len(text) > 100:
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –∏—Å–∫–æ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                pos = text.lower().find(query.lower())
                start = max(0, pos - 30)
                end = min(len(text), pos + len(query) + 30)
                context_text = text[start:end]
                if start > 0:
                    context_text = "..." + context_text
                if end < len(text):
                    context_text = context_text + "..."
                display_text = context_text
            else:
                display_text = text
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            text_safe = display_text.replace('\\', '\\\\').replace('*', '\\*').replace('_', '\\_').replace('`', '\\`').replace('[', '\\[').replace(']', '\\]').replace('(', '\\(').replace(')', '\\)').replace('~', '\\~').replace('>', '\\>').replace('#', '\\#').replace('+', '\\+').replace('-', '\\-').replace('=', '\\=').replace('|', '\\|').replace('{', '\\{').replace('}', '\\}').replace('.', '\\.').replace('!', '\\!')
            
            username_display = f"@{username}" if username else f"ID{user_id_res}"
            
            message_text += f"{i}\\. {time_str} {username_display} \\({msg_type}\\)\n"
            message_text += f"   {text_safe}\n\n"
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(message_text) > 3000:
                message_text += f"\\.\\.\\. –∏ –µ—â—ë {len(results) - i} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
                break

        await update.message.reply_text(message_text, parse_mode='MarkdownV2')
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data.pop('state', None)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ —Ç–µ–∫—Å—Ç–∞—Ö: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ Markdown –ø—Ä–∏ –æ—à–∏–±–∫–µ
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}"
        await update.message.reply_text(error_msg)
        context.user_data.pop('state', None)


async def show_user_messages(update: Update, context: ContextTypes.DEFAULT_TYPE, target_user_id: int) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        from services.text_logging_service import get_text_logging_service
        
        text_logger = get_text_logging_service()
        messages = text_logger.get_user_messages(target_user_id, limit=20)
        
        if not messages:
            await update.message.reply_text(f"üë§ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {target_user_id} –Ω–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
            context.user_data.pop('state', None)
            return

        message_text = f"üë§ –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {target_user_id}\n\n"
        message_text += f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
        
        for i, msg in enumerate(messages, 1):
            timestamp = msg['timestamp']
            text = msg['text']
            msg_type = msg['type']
            state = msg['state']
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            from datetime import datetime
            try:
                dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                time_str = dt.strftime("%d.%m %H:%M")
            except:
                time_str = timestamp[:16]
            
            # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            type_emoji = {
                'text': 'üí¨',
                'command': '‚ö°',
                'admin_input': 'üëë',
                'search_query': 'üîç',
                'feedback': 'üìù',
                'broadcast_input': 'üì¢'
            }.get(msg_type, 'üìÑ')
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            text_short = text[:80] + "..." if len(text) > 80 else text
            # –ü–æ–ª–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown
            text_safe = text_short.replace('\\', '\\\\').replace('*', '\\*').replace('_', '\\_').replace('`', '\\`').replace('[', '\\[').replace(']', '\\]').replace('(', '\\(').replace(')', '\\)').replace('~', '\\~').replace('>', '\\>').replace('#', '\\#').replace('+', '\\+').replace('-', '\\-').replace('=', '\\=').replace('|', '\\|').replace('{', '\\{').replace('}', '\\}').replace('.', '\\.').replace('!', '\\!')
            
            state_info = f" [{state}]" if state and state != 'none' else ""
            
            message_text += f"{i}\\. {type_emoji} {time_str}{state_info}\n"
            message_text += f"   {text_safe}\n\n"
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(message_text) > 3000:
                message_text += f"\\.\\.\\. –∏ –µ—â—ë {len(messages) - i} —Å–æ–æ–±—â–µ–Ω–∏–π"
                break

        await update.message.reply_text(message_text, parse_mode='MarkdownV2')
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data.pop('state', None)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ Markdown –ø—Ä–∏ –æ—à–∏–±–∫–µ
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}"
        await update.message.reply_text(error_msg)
        context.user_data.pop('state', None)