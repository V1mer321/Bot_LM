"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞.
"""
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (—Ç–µ–ø–µ—Ä—å –æ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω-ID)
from toolbot.config import is_admin, add_user_to_whitelist, remove_user_from_whitelist, load_config, add_admin

logger = logging.getLogger(__name__)


async def admin_panel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    """
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é)
    if not is_admin(user_id):
        await update.message.reply_text(
            "‚õî *–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω*\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            parse_mode='Markdown'
        )
        return

    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    analytics = context.bot_data.get('analytics')
    if analytics:
        analytics.log_command("admin_panel", user_id)

    keyboard = [
        ["üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", "üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"],
        ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞", "üëÄ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"],
        ["üëë –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"],
        ["üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—ã"],
        ["üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "*üõ†Ô∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        "‚Ä¢ üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å - –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—à–∏–±–æ–∫ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π\n"
        "‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞ - –∞–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞\n"
        "‚Ä¢ üëÄ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Ö–æ–¥–æ–≤ –∏ –¥–µ–π—Å—Ç–≤–∏–π\n"
        "‚Ä¢ üëë –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞\n"
        "‚Ä¢ üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—ã - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö\n\n"
        "üí° _–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏_",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def user_management_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    """
    user_id = update.effective_user.id

    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    keyboard = [
        ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"],
        ["üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"],
        ["üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "*üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "‚Ä¢ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def add_user_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = update.effective_user.id

    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['state'] = 'awaiting_new_user_id'

    await update.message.reply_text(
        "*‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å.",
        parse_mode='Markdown'
    )


async def remove_user_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = update.effective_user.id

    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    context.user_data['state'] = 'awaiting_remove_user_id'

    await update.message.reply_text(
        "*‚ûñ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.",
        parse_mode='Markdown'
    )


async def add_admin_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    user_id = update.effective_user.id

    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    context.user_data['state'] = 'awaiting_new_admin_id'

    await update.message.reply_text(
        "*üëë –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
        "‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–æ–º!",
        parse_mode='Markdown'
    )


async def list_users_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    config_data = load_config()  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞–ª–æ —Å –º–æ–¥—É–ª–µ–º config
    whitelist = config_data.get('whitelist', [])
    admins = config_data.get('admins', [])

    if not whitelist:
        await update.message.reply_text("‚ùå –í —Å–ø–∏—Å–∫–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    message = "*üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n"
    
    for idx, uid in enumerate(whitelist, 1):
        admin_mark = "üëë " if uid in admins else ""
        message += f"{idx}. {admin_mark}ID: `{uid}`\n"

    message += "\nüí° _–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –æ—Ç–º–µ—á–µ–Ω—ã –∑–Ω–∞—á–∫–æ–º_ üëë"

    await update.message.reply_text(
        message,
        parse_mode='Markdown'
    )


async def back_to_admin_panel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    """
    await admin_panel_handler(update, context)


async def process_admin_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        
    Returns:
        True –µ—Å–ª–∏ –≤–≤–æ–¥ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    user_id = update.effective_user.id
    text = update.message.text
    state = context.user_data.get('state')
    
    if not is_admin(user_id):
        return False
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    if state == 'awaiting_new_user_id':
        try:
            new_user_id = int(text.strip())
            
            if add_user_to_whitelist(new_user_id):
                await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {new_user_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
                
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.pop('state', None)
            return True
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
            return True
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    elif state == 'awaiting_remove_user_id':
        try:
            user_id_to_remove = int(text.strip())
            
            if remove_user_from_whitelist(user_id_to_remove):
                await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id_to_remove} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
                
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.pop('state', None)
            return True
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
            return True
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    elif state == 'awaiting_new_admin_id':
        try:
            new_admin_id = int(text.strip())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            config_data = load_config()
            current_admins = config_data.get('admins', []) if config_data else []
            
            if new_admin_id in current_admins:
                await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {new_admin_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            elif add_admin(new_admin_id):
                await update.message.reply_text(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {new_admin_id} —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!\n"
                    f"üëë –¢–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."
                )
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
                
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.pop('state', None)
            return True
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
            return True
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
    elif state == 'awaiting_user_search_id':
        try:
            search_user_id = int(text.strip())
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            analytics = context.bot_data.get('analytics')
            if not analytics:
                await update.message.reply_text("‚ùå –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                context.user_data.pop('state', None)
                return True
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_stats = analytics.get_user_stats(search_user_id)
            activity_log = analytics.get_user_activity_log(search_user_id, limit=10)
            
            if user_stats.get('requests', 0) == 0:
                await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {search_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.")
                context.user_data.pop('state', None)
                return True
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            import datetime
            import time
            
            first_seen = user_stats.get('first_seen', 0)
            last_seen = user_stats.get('last_seen', first_seen)
            total_requests = user_stats.get('requests', 0)
            commands = user_stats.get('commands', {})
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
            first_seen_dt = datetime.datetime.fromtimestamp(first_seen)
            last_seen_dt = datetime.datetime.fromtimestamp(last_seen)
            
            first_seen_str = first_seen_dt.strftime("%d.%m.%Y %H:%M")
            last_seen_str = last_seen_dt.strftime("%d.%m.%Y %H:%M")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            current_time = time.time()
            time_diff = current_time - last_seen
            if time_diff < 3600:  # –º–µ–Ω–µ–µ —á–∞—Å–∞
                status = "üü¢ –í —Å–µ—Ç–∏"
            elif time_diff < 86400:  # –º–µ–Ω–µ–µ –¥–Ω—è
                status = "üü° –ë—ã–ª —Å–µ–≥–æ–¥–Ω—è"
            elif time_diff < 604800:  # –º–µ–Ω–µ–µ –Ω–µ–¥–µ–ª–∏
                status = "üü† –ë—ã–ª –Ω–∞ –Ω–µ–¥–µ–ª–µ"
            else:
                status = "üî¥ –î–∞–≤–Ω–æ –Ω–µ –∑–∞—Ö–æ–¥–∏–ª"
            
            message = f"*üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {search_user_id}*\n\n"
            message += f"üìä *–°—Ç–∞—Ç—É—Å:* {status}\n"
            message += f"üë§ *–ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥:* {first_seen_str}\n"
            message += f"‚è∞ *–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥:* {last_seen_str}\n"
            message += f"üìû *–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤:* {total_requests}\n\n"
            
            # –¢–æ–ø –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if commands:
                message += "*üîù –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
                sorted_commands = sorted(commands.items(), key=lambda x: x[1], reverse=True)
                for cmd, count in sorted_commands[:5]:
                    message += f"‚Ä¢ `{cmd}` - {count}x\n"
                message += "\n"
            
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            if activity_log:
                message += "*üìù –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*\n"
                for activity in activity_log[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π
                    timestamp = activity.get('timestamp', 0)
                    activity_type = activity.get('type', 'unknown')
                    details = activity.get('details', '')
                    
                    activity_dt = datetime.datetime.fromtimestamp(timestamp)
                    activity_str = activity_dt.strftime("%d.%m %H:%M")
                    
                    # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    short_details = details[:30] + "..." if len(details) > 30 else details
                    
                    message += f"‚Ä¢ {activity_str} - {activity_type}: {short_details}\n"
            
            await update.message.reply_text(
                message,
                parse_mode='Markdown'
            )
                
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.pop('state', None)
            return True
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
            return True
    
    return False


async def feedback_management_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
    """
    user_id = update.effective_user.id

    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    keyboard = [
        ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"],
        ["üêõ –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—à–∏–±–æ–∫", "üí° –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"],
        ["üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "*üí¨ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        "‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π\n"
        "‚Ä¢ üêõ –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—à–∏–±–æ–∫ - –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö\n"
        "‚Ä¢ üí° –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π - –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é\n\n"
        "üí° _–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏_",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def feedback_stats_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    """
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ feedback_handlers
    from toolbot.handlers.feedback_handlers import view_feedback_stats_handler
    await view_feedback_stats_handler(update, context)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = [["üîô –ù–∞–∑–∞–¥ –∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üìã _–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞_",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def errors_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—à–∏–±–æ–∫
    """
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ feedback_handlers
    from toolbot.handlers.feedback_handlers import view_errors_handler
    await view_errors_handler(update, context)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = [["üîô –ù–∞–∑–∞–¥ –∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üìã _–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞_",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def suggestions_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    """
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ feedback_handlers
    from toolbot.handlers.feedback_handlers import view_suggestions_handler
    await view_suggestions_handler(update, context)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = [["üîô –ù–∞–∑–∞–¥ –∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üìã _–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞_",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def back_to_feedback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
    """
    await feedback_management_handler(update, context)


async def search_statistics_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∏—Å–∫–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
    """
    user_id = update.effective_user.id

    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        from services.search_statistics import get_stats_service
        stats_service = get_stats_service()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        success_stats = stats_service.get_search_success_rate()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤
        failed_stats = stats_service.get_failed_searches_stats()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–∏—Å–∫–∏
        recent_failed = stats_service.get_recent_failed_searches(limit=5)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        message = "*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º*\n\n"
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        message += "*üéØ –û–±—â–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*\n"
        message += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤: {success_stats.get('total_searches', 0)}\n"
        message += f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤: {success_stats.get('successful_searches', 0)}\n"
        message += f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–æ–±—â–∏–ª–∏ –æ –Ω–µ—É–¥–∞—á–∞—Ö: {success_stats.get('user_reported_failures', 0)}\n"
        message += f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_stats.get('success_rate_percent', 0)}%\n"
        message += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å—Ö–æ–∂–µ—Å—Ç—å: {success_stats.get('average_similarity', 0):.3f}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤
        message += "*‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ—É–¥–∞—á:*\n"
        message += f"‚Ä¢ –í—Å–µ–≥–æ –∂–∞–ª–æ–±: {failed_stats.get('total_failed_searches', 0)}\n"
        
        # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ—É–¥–∞—á–∞–º–∏
        top_users = failed_stats.get('top_users_with_failures', [])
        if top_users:
            message += f"‚Ä¢ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ—É–¥–∞—á–∞–º–∏:\n"
            for user in top_users[:3]:
                username = user.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                message += f"  - {username} (ID: {user['user_id']}): {user['failed_count']} –Ω–µ—É–¥–∞—á\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
        daily_stats = failed_stats.get('daily_stats', {})
        if daily_stats:
            message += f"\n‚Ä¢ –ù–µ—É–¥–∞—á–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏:\n"
            for date, count in list(daily_stats.items())[:5]:
                message += f"  - {date}: {count} –Ω–µ—É–¥–∞—á\n"
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–∏—Å–∫–∏
        if recent_failed:
            message += f"\n*üîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–∏—Å–∫–∏:*\n"
            for i, search in enumerate(recent_failed[:3], 1):
                username = search.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                timestamp = search.get('timestamp', '')[:10]  # –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞
                feedback = search.get('feedback_type', 'unknown')
                comment = search.get('user_comment', '')
                
                message += f"{i}. {username} ({timestamp})\n"
                if comment:
                    message += f"   üí¨ \"{comment[:50]}...\"\n"
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = [
            ["üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"],
            ["üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∂–∞–ª–æ–±—ã", "üìà –¢—Ä–µ–Ω–¥—ã –ø–æ–∏—Å–∫–∞"],
            ["üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∏—Å–∫–∞: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∏—Å–∫–∞.\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π."
        )


async def detailed_search_stats_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∏—Å–∫–∞"""
    user_id = update.effective_user.id

    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        from services.search_statistics import get_stats_service
        stats_service = get_stats_service()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        recent_failed = stats_service.get_recent_failed_searches(limit=10)
        
        if not recent_failed:
            await update.message.reply_text("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–∏—Å–∫–∞—Ö.")
            return
        
        message = "*üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤*\n\n"
        
        for i, search in enumerate(recent_failed, 1):
            username = search.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            user_id_str = search.get('user_id', 'unknown')
            timestamp = search.get('timestamp', '')[:16]  # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
            feedback_type = search.get('feedback_type', 'unknown')
            comment = search.get('user_comment', '')
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
            results = search.get('search_results', [])
            if results:
                best_similarity = max([r.get('similarity', 0) for r in results])
                results_count = len(results)
            else:
                best_similarity = 0
                results_count = 0
            
            message += f"*{i}. {username}* (ID: {user_id_str})\n"
            message += f"üìÖ {timestamp}\n"
            message += f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {results_count}, –ª—É—á—à–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å: {best_similarity:.3f}\n"
            
            if comment:
                message += f"üí¨ \"{comment}\"\n"
            
            message += "‚îÄ" * 30 + "\n"
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(message) > 3500:
                message += f"\n... –∏ –µ—â–µ {len(recent_failed) - i} –∑–∞–ø–∏—Å–µ–π"
                break
        
        await update.message.reply_text(
            message,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


async def recent_complaints_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∂–∞–ª–æ–±"""
    user_id = update.effective_user.id

    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        from services.search_statistics import get_stats_service
        stats_service = get_stats_service()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∂–∞–ª–æ–±—ã —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
        all_failed = stats_service.get_recent_failed_searches(limit=20)
        complaints_with_comments = [
            search for search in all_failed 
            if search.get('user_comment') and search.get('user_comment').strip()
        ]
        
        if not complaints_with_comments:
            await update.message.reply_text("üìù –ù–µ—Ç –∂–∞–ª–æ–± —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏.")
            return
        
        message = "*üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∂–∞–ª–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n"
        
        for i, search in enumerate(complaints_with_comments[:5], 1):
            username = search.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            timestamp = search.get('timestamp', '')[:10]
            comment = search.get('user_comment', '')
            
            message += f"*{i}. {username}* ({timestamp})\n"
            message += f"üí¨ \"{comment}\"\n\n"
        
        await update.message.reply_text(
            message,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∂–∞–ª–æ–±: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∂–∞–ª–æ–±.")


async def user_activity_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    keyboard = [
        ["üìà –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "üìã –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"],
        ["üîç –ü–æ–∏—Å–∫ –ø–æ ID", "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
        ["üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "*üëÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:\n"
        "‚Ä¢ üìà *–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏* - –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π\n"
        "‚Ä¢ üìã *–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏* - –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π\n"
        "‚Ä¢ üîç *–ü–æ–∏—Å–∫ –ø–æ ID* - –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n"
        "‚Ä¢ üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞* - —Å–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def active_users_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    """
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    analytics = context.bot_data.get('analytics')
    if not analytics:
        await update.message.reply_text("‚ùå –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    try:
        import datetime
        
        recent_users = analytics.get_recent_users(days=7)
        
        if not recent_users:
            await update.message.reply_text("üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        message = "*üìà –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)*\n\n"
        
        for i, user_data in enumerate(recent_users[:20], 1):  # –¢–æ–ø-20
            try:
                user_id_val = user_data.get("user_id", 0)
                last_seen = user_data.get("last_seen", 0)
                total_requests = user_data.get("total_requests", 0)
                recent_activity = user_data.get("recent_activity", [])
                recent_activity_count = len(recent_activity) if recent_activity else 0
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                try:
                    last_seen_dt = datetime.datetime.fromtimestamp(last_seen)
                    last_seen_str = last_seen_dt.strftime("%d.%m %H:%M")
                except (OSError, ValueError):
                    last_seen_str = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
                message += f"{i}. ID: `{user_id_val}`\n"
                message += f"   –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: {last_seen_str}\n"
                message += f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}\n"
                message += f"   –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é: {recent_activity_count}\n\n"
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {i}: {e}")
                continue
        
        if len(recent_users) > 20:
            message += f"*...–∏ –µ—â—ë {len(recent_users) - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*"
        
        await update.message.reply_text(
            message,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        import traceback
        logger.error(f"–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n"
            f"–î–µ—Ç–∞–ª–∏: {str(e)}"
        )


async def all_users_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    """
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    analytics = context.bot_data.get('analytics')
    if not analytics:
        await update.message.reply_text("‚ùå –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    try:
        import datetime
        import time
        
        stats = analytics.get_stats()
        if not stats:
            await update.message.reply_text("üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
            
        users = stats.get("users", {})
        
        if not users:
            await update.message.reply_text("üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        user_list = []
        for user_id_str, user_data in users.items():
            try:
                if not user_data or not isinstance(user_data, dict):
                    continue
                    
                last_seen = user_data.get("last_seen", user_data.get("first_seen", 0))
                first_seen = user_data.get("first_seen", 0)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
                if not isinstance(last_seen, (int, float)) or not isinstance(first_seen, (int, float)):
                    continue
                    
                user_list.append({
                    "user_id": int(user_id_str),
                    "last_seen": last_seen,
                    "total_requests": user_data.get("requests", 0),
                    "first_seen": first_seen
                })
            except (ValueError, TypeError) as e:
                logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str}: {e}")
                continue
        
        if not user_list:
            await update.message.reply_text("üìã –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        user_list.sort(key=lambda x: x["last_seen"], reverse=True)
        
        message = f"*üìã –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(user_list)} —á–µ–ª.)*\n\n"
        
        current_time = time.time()
        
        for i, user_data in enumerate(user_list[:30], 1):  # –ü–µ—Ä–≤—ã–µ 30
            try:
                user_id_val = user_data["user_id"]
                last_seen = user_data["last_seen"]
                total_requests = user_data["total_requests"]
                first_seen = user_data["first_seen"]
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                time_diff = current_time - last_seen
                if time_diff < 3600:  # –º–µ–Ω–µ–µ —á–∞—Å–∞
                    status = "üü¢ –æ–Ω–ª–∞–π–Ω"
                elif time_diff < 86400:  # –º–µ–Ω–µ–µ –¥–Ω—è
                    status = "üü° —Å–µ–≥–æ–¥–Ω—è"
                elif time_diff < 604800:  # –º–µ–Ω–µ–µ –Ω–µ–¥–µ–ª–∏
                    status = "üü† –Ω–∞ –Ω–µ–¥–µ–ª–µ"
                else:
                    status = "üî¥ –¥–∞–≤–Ω–æ"
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ
                try:
                    first_seen_dt = datetime.datetime.fromtimestamp(first_seen)
                    first_seen_str = first_seen_dt.strftime("%d.%m.%y")
                except (OSError, ValueError):
                    first_seen_str = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
                message += f"{i}. ID: `{user_id_val}` {status}\n"
                message += f"   –ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥: {first_seen_str}\n"
                message += f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}\n\n"
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {i}: {e}")
                continue
        
        if len(user_list) > 30:
            message += f"*...–∏ –µ—â—ë {len(user_list) - 30} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n"
        
        message += "üí° _–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ü–æ–∏—Å–∫ –ø–æ ID'_"
        
        await update.message.reply_text(
            message,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        import traceback
        logger.error(f"–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
            f"–î–µ—Ç–∞–ª–∏: {str(e)}"
        )


async def search_user_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
    """
    user_id = update.effective_user.id

    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['state'] = 'awaiting_user_search_id'

    await update.message.reply_text(
        "*üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:",
        parse_mode='Markdown'
    )


async def activity_stats_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    """
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    analytics = context.bot_data.get('analytics')
    if not analytics:
        await update.message.reply_text("‚ùå –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    try:
        import datetime
        
        summary = analytics.get_summary()
        
        if not summary:
            await update.message.reply_text("üìä –î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
            return
        
        uptime_days = summary.get("uptime_days", 0)
        total_requests = summary.get("total_requests", 0)
        unique_users = summary.get("unique_users", 0)
        active_today = summary.get("active_today", 0)
        active_week = summary.get("active_week", 0)
        
        message = "*üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏*\n\n"
        message += f"‚è± *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:* {uptime_days:.1f} –¥–Ω–µ–π\n"
        message += f"üìû *–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤:* {total_requests}\n"
        message += f"üë• *–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {unique_users}\n"
        message += f"üü¢ *–ê–∫—Ç–∏–≤–Ω—ã —Å–µ–≥–æ–¥–Ω—è:* {active_today}\n"
        message += f"üìÖ *–ê–∫—Ç–∏–≤–Ω—ã –∑–∞ –Ω–µ–¥–µ–ª—é:* {active_week}\n\n"
        
        # –¢–æ–ø –∫–æ–º–∞–Ω–¥
        top_commands = summary.get("top_commands", [])
        if top_commands:
            message += "*üîù –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            for i, (cmd, count) in enumerate(top_commands[:5], 1):  # –¢–æ–ª—å–∫–æ —Ç–æ–ø-5
                message += f"{i}. `{cmd}` - {count}x\n"
            message += "\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —Ñ–æ—Ç–æ
        photo_searches = summary.get("photo_searches", {})
        if photo_searches and isinstance(photo_searches, dict):
            total_photo = photo_searches.get("total", 0)
            success_photo = photo_searches.get("success", 0)
            
            if total_photo > 0:
                success_rate = (success_photo / total_photo) * 100
                message += f"üì∏ *–ü–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ç–æ:*\n"
                message += f"   –í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤: {total_photo}\n"
                message += f"   –£—Å–ø–µ—à–Ω—ã—Ö: {success_photo}\n"
                message += f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%\n"
        
        await update.message.reply_text(
            message,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        import traceback
        logger.error(f"–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n"
            f"–î–µ—Ç–∞–ª–∏: {str(e)}"
        )


async def update_databases_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
    """
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        analytics = context.bot_data.get('analytics')
        if analytics:
            analytics.log_command("update_databases", user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        status_message = await update.message.reply_text(
            "üîÑ *–ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö...*\n\n"
            "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
            parse_mode='Markdown'
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–∏—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
        import os
        import sqlite3
        from datetime import datetime
        
        db_path = "data/unified_products.db"
        csv_path = "data/txt_export/unified_products.csv"
        txt_path = "data/txt_export/unified_products.txt"
        
        status_info = "üìä *–°—Ç–∞—Ç—É—Å –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö:*\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º SQLite –±–∞–∑—É
        if os.path.exists(db_path):
            try:
                conn = sqlite3.connect(db_path)
                cursor = conn.cursor()
                cursor.execute("SELECT COUNT(*) FROM products")
                count = cursor.fetchone()[0]
                
                file_size = os.path.getsize(db_path) / (1024 * 1024)  # –ú–ë
                mod_time = datetime.fromtimestamp(os.path.getmtime(db_path))
                
                status_info += f"‚úÖ *SQLite –±–∞–∑–∞:* {count:,} —Ç–æ–≤–∞—Ä–æ–≤\n"
                status_info += f"   –†–∞–∑–º–µ—Ä: {file_size:.1f} –ú–ë\n"
                status_info += f"   –û–±–Ω–æ–≤–ª–µ–Ω–∞: {mod_time.strftime('%d.%m.%Y %H:%M')}\n\n"
                
                conn.close()
            except Exception as e:
                status_info += f"‚ùå *SQLite –±–∞–∑–∞:* –û—à–∏–±–∫–∞ - {str(e)}\n\n"
        else:
            status_info += f"‚ùå *SQLite –±–∞–∑–∞:* –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º TXT —ç–∫—Å–ø–æ—Ä—Ç
        if os.path.exists(txt_path):
            file_size = os.path.getsize(txt_path) / (1024 * 1024)  # –ú–ë
            mod_time = datetime.fromtimestamp(os.path.getmtime(txt_path))
            
            with open(txt_path, 'r', encoding='utf-8') as f:
                lines = sum(1 for _ in f) - 1  # –º–∏–Ω—É—Å –∑–∞–≥–æ–ª–æ–≤–æ–∫
            
            status_info += f"‚úÖ *TXT —ç–∫—Å–ø–æ—Ä—Ç:* {lines:,} —Ç–æ–≤–∞—Ä–æ–≤\n"
            status_info += f"   –†–∞–∑–º–µ—Ä: {file_size:.1f} –ú–ë\n"
            status_info += f"   –û–±–Ω–æ–≤–ª–µ–Ω: {mod_time.strftime('%d.%m.%Y %H:%M')}\n\n"
        else:
            status_info += f"‚ùå *TXT —ç–∫—Å–ø–æ—Ä—Ç:* –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CSV —ç–∫—Å–ø–æ—Ä—Ç
        if os.path.exists(csv_path):
            file_size = os.path.getsize(csv_path) / (1024 * 1024)  # –ú–ë
            mod_time = datetime.fromtimestamp(os.path.getmtime(csv_path))
            
            status_info += f"‚úÖ *CSV —ç–∫—Å–ø–æ—Ä—Ç:* –¥–æ—Å—Ç—É–ø–µ–Ω\n"
            status_info += f"   –†–∞–∑–º–µ—Ä: {file_size:.1f} –ú–ë\n"
            status_info += f"   –û–±–Ω–æ–≤–ª–µ–Ω: {mod_time.strftime('%d.%m.%Y %H:%M')}\n\n"
        else:
            status_info += f"‚ùå *CSV —ç–∫—Å–ø–æ—Ä—Ç:* –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n"
        
        status_info += "üí° *–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* –û—Å–Ω–æ–≤–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (SQLite) –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n"
        status_info += "TXT –∏ CSV —Ñ–∞–π–ª—ã –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await status_message.edit_text(
            status_info,
            parse_mode='Markdown'
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å TXT", callback_data="recreate_txt")],
            [InlineKeyboardButton("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å", callback_data="check_integrity")],
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="back_to_admin")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üõ†Ô∏è *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        logger.error(f"–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö.\n"
            f"–î–µ—Ç–∞–ª–∏: {str(e)}"
        ) 