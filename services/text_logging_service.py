"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ SQLite
"""
import sqlite3
import logging
import os
from datetime import datetime
from typing import Optional

logger = logging.getLogger(__name__)

class TextLoggingService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ SQLite"""
    
    def __init__(self, db_path='data/text_messages.db'):
        self.db_path = db_path
        self._init_database()
    
    def _init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤"""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            os.makedirs(os.path.dirname(self.db_path), exist_ok=True)
            
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS text_messages (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    username TEXT,
                    first_name TEXT,
                    last_name TEXT,
                    chat_id INTEGER,
                    message_text TEXT NOT NULL,
                    message_type TEXT DEFAULT 'text',
                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                    is_admin BOOLEAN DEFAULT 0,
                    user_state TEXT,
                    message_length INTEGER,
                    has_mentions BOOLEAN DEFAULT 0,
                    has_urls BOOLEAN DEFAULT 0
                )
            ''')
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_user_id ON text_messages(user_id)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_timestamp ON text_messages(timestamp)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_message_type ON text_messages(message_type)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_is_admin ON text_messages(is_admin)')
            
            conn.commit()
            conn.close()
            logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {self.db_path}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    def log_text_message(self, user_id: int, message_text: str, username: str = None, 
                        first_name: str = None, last_name: str = None, chat_id: int = None,
                        message_type: str = 'text', is_admin: bool = False, user_state: str = None):
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            username: Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            first_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            last_name: –§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            chat_id: ID —á–∞—Ç–∞
            message_type: –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (text, command, admin_input, search_query, etc.)
            is_admin: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            user_state: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–æ—Ç–µ
        """
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_length = len(message_text)
            has_mentions = '@' in message_text
            has_urls = any(url in message_text.lower() for url in ['http://', 'https://', 'www.', 't.me/'])
            
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO text_messages 
                (user_id, username, first_name, last_name, chat_id, message_text, 
                 message_type, is_admin, user_state, message_length, has_mentions, has_urls)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (user_id, username, first_name, last_name, chat_id, message_text,
                  message_type, is_admin, user_state, message_length, has_mentions, has_urls))
            
            conn.commit()
            conn.close()
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            text_preview = message_text[:100] + "..." if len(message_text) > 100 else message_text
            logger.debug(f"üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç {user_id} (@{username}): {text_preview}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –æ—Ç {user_id}: {e}")

    def get_user_messages(self, user_id: int, limit: int = 50) -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT timestamp, message_text, message_type, user_state
                FROM text_messages 
                WHERE user_id = ?
                ORDER BY timestamp DESC
                LIMIT ?
            ''', (user_id, limit))
            
            messages = cursor.fetchall()
            conn.close()
            
            return [
                {
                    'timestamp': msg[0],
                    'text': msg[1],
                    'type': msg[2],
                    'state': msg[3]
                }
                for msg in messages
            ]
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return []

    def get_statistics(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            cursor.execute('SELECT COUNT(*) FROM text_messages')
            total_messages = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(DISTINCT user_id) FROM text_messages')
            unique_users = cursor.fetchone()[0]
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏–π
            cursor.execute('''
                SELECT message_type, COUNT(*) 
                FROM text_messages 
                GROUP BY message_type 
                ORDER BY COUNT(*) DESC
            ''')
            message_types = dict(cursor.fetchall())
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)
            cursor.execute('''
                SELECT COUNT(*) 
                FROM text_messages 
                WHERE timestamp >= datetime('now', '-24 hours')
            ''')
            messages_24h = cursor.fetchone()[0]
            
            # –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute('''
                SELECT user_id, username, COUNT(*) as message_count
                FROM text_messages 
                GROUP BY user_id 
                ORDER BY message_count DESC 
                LIMIT 10
            ''')
            top_users = cursor.fetchall()
            
            conn.close()
            
            return {
                'total_messages': total_messages,
                'unique_users': unique_users,
                'messages_24h': messages_24h,
                'message_types': message_types,
                'top_users': [
                    {
                        'user_id': user[0],
                        'username': user[1],
                        'message_count': user[2]
                    }
                    for user in top_users
                ]
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}

    def search_messages(self, query: str, limit: int = 100) -> list:
        """–ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Ç–µ–∫—Å—Ç—É"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT user_id, username, message_text, timestamp, message_type
                FROM text_messages 
                WHERE message_text LIKE ?
                ORDER BY timestamp DESC
                LIMIT ?
            ''', (f'%{query}%', limit))
            
            results = cursor.fetchall()
            conn.close()
            
            return [
                {
                    'user_id': result[0],
                    'username': result[1],
                    'text': result[2],
                    'timestamp': result[3],
                    'type': result[4]
                }
                for result in results
            ]
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return []

    def cleanup_old_messages(self, days: int = 30) -> int:
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                DELETE FROM text_messages 
                WHERE timestamp < datetime('now', '-{} days')
            '''.format(days))
            
            deleted_count = cursor.rowcount
            conn.commit()
            conn.close()
            
            logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π)")
            return deleted_count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return 0

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
text_logger = TextLoggingService()

def get_text_logging_service() -> TextLoggingService:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤"""
    return text_logger 