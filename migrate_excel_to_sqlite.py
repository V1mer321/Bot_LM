#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ Excel —Ñ–∞–π–ª–æ–≤ –≤ SQLite
–ü–µ—Ä–µ–≤–æ–¥–∏—Ç skobyanka.xlsx –∏ table_2.xlsx –≤ —Ç–∞–±–ª–∏—Ü—ã –ë–î
"""

import pandas as pd
import sqlite3
import os
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def create_database_connection(db_path="data/excel_data.db"):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(db_path)
        logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î {db_path} —É—Å–ø–µ—à–Ω–æ")
        return conn
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        raise

def migrate_skobyanka_to_db(conn):
    """–ú–∏–≥—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞ skobyanka.xlsx –≤ —Ç–∞–±–ª–∏—Ü—É skobyanka_products"""
    
    excel_file = "data/skobyanka.xlsx"
    if not os.path.exists(excel_file):
        logger.error(f"‚ùå –§–∞–π–ª {excel_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        df = pd.read_excel(excel_file)
        logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª skobyanka.xlsx: {len(df)} —Å—Ç—Ä–æ–∫")
        
        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö - —É–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        df_clean = df.dropna(subset=['–ê—Ä—Ç–∏–∫—É–ª', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'])
        logger.info(f"üßπ –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {len(df_clean)} —Å—Ç—Ä–æ–∫")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        create_table_sql = """
        CREATE TABLE IF NOT EXISTS skobyanka_products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            article_code TEXT NOT NULL,
            name TEXT NOT NULL,
            quantity_kg REAL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        """
        
        cursor = conn.cursor()
        cursor.execute(create_table_sql)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_skobyanka_article ON skobyanka_products(article_code);")
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_skobyanka_name ON skobyanka_products(name);")
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
        cursor.execute("DELETE FROM skobyanka_products")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        for _, row in df_clean.iterrows():
            cursor.execute("""
                INSERT INTO skobyanka_products (article_code, name, quantity_kg)
                VALUES (?, ?, ?)
            """, (
                str(row['–ê—Ä—Ç–∏–∫—É–ª']).replace('.0', '') if pd.notna(row['–ê—Ä—Ç–∏–∫—É–ª']) else None,
                str(row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']) if pd.notna(row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']) else None,
                float(row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–≥']) if pd.notna(row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–≥']) else None
            ))
        
        conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cursor.execute("SELECT COUNT(*) FROM skobyanka_products")
        count = cursor.fetchone()[0]
        logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ skobyanka_products —Å–æ–∑–¥–∞–Ω–∞: {count} –∑–∞–ø–∏—Å–µ–π")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ skobyanka: {e}")
        conn.rollback()
        return False

def migrate_table2_to_db(conn):
    """–ú–∏–≥—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞ table_2.xlsx –≤ —Ç–∞–±–ª–∏—Ü—É stores"""
    
    excel_file = "data/table_2.xlsx"
    if not os.path.exists(excel_file):
        logger.error(f"‚ùå –§–∞–π–ª {excel_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        df = pd.read_excel(excel_file)
        logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª table_2.xlsx: {len(df)} —Å—Ç—Ä–æ–∫")
        
        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö - —É–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        df_clean = df.dropna(subset=['–ö–æ–¥', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'])
        logger.info(f"üßπ –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {len(df_clean)} —Å—Ç—Ä–æ–∫")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        create_table_sql = """
        CREATE TABLE IF NOT EXISTS stores (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            code TEXT NOT NULL,
            name TEXT NOT NULL,
            department TEXT,
            phone_numbers TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        """
        
        cursor = conn.cursor()
        cursor.execute(create_table_sql)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_stores_code ON stores(code);")
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_stores_name ON stores(name);")
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_stores_department ON stores(department);")
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
        cursor.execute("DELETE FROM stores")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        for _, row in df_clean.iterrows():
            cursor.execute("""
                INSERT INTO stores (code, name, department, phone_numbers)
                VALUES (?, ?, ?, ?)
            """, (
                str(row['–ö–æ–¥']) if pd.notna(row['–ö–æ–¥']) else None,
                str(row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']) if pd.notna(row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']) else None,
                str(row['–û—Ç–¥–µ–ª']) if pd.notna(row['–û—Ç–¥–µ–ª']) else None,
                str(row['–ù–æ–º–µ—Ä–∞']) if pd.notna(row['–ù–æ–º–µ—Ä–∞']) else None
            ))
        
        conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cursor.execute("SELECT COUNT(*) FROM stores")
        count = cursor.fetchone()[0]
        logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ stores —Å–æ–∑–¥–∞–Ω–∞: {count} –∑–∞–ø–∏—Å–µ–π")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ table_2: {e}")
        conn.rollback()
        return False

def create_search_functions(conn):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    
    cursor = conn.cursor()
    
    # –°–æ–∑–¥–∞–µ–º view –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ —Å–∫–æ–±—è–Ω–∫–µ
    cursor.execute("""
        CREATE VIEW IF NOT EXISTS skobyanka_search AS
        SELECT 
            id,
            article_code,
            name,
            quantity_kg,
            CASE 
                WHEN quantity_kg > 0 THEN '–í –Ω–∞–ª–∏—á–∏–∏'
                ELSE '–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'
            END as availability_status
        FROM skobyanka_products
        ORDER BY name;
    """)
    
    # –°–æ–∑–¥–∞–µ–º view –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º
    cursor.execute("""
        CREATE VIEW IF NOT EXISTS stores_search AS
        SELECT 
            id,
            code,
            name,
            department,
            phone_numbers,
            CASE 
                WHEN phone_numbers IS NOT NULL AND phone_numbers != '' THEN '–ï—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω'
                ELSE '–ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
            END as contact_status
        FROM stores
        ORDER BY name;
    """)
    
    conn.commit()
    logger.info("‚úÖ –°–æ–∑–¥–∞–Ω–∞ views –¥–ª—è –ø–æ–∏—Å–∫–∞")

def verify_migration(conn):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É skobyanka_products
    cursor.execute("SELECT COUNT(*) FROM skobyanka_products")
    skobyanka_count = cursor.fetchone()[0]
    
    cursor.execute("SELECT name FROM skobyanka_products LIMIT 3")
    skobyanka_samples = cursor.fetchall()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É stores
    cursor.execute("SELECT COUNT(*) FROM stores")
    stores_count = cursor.fetchone()[0]
    
    cursor.execute("SELECT name FROM stores LIMIT 3")
    stores_samples = cursor.fetchall()
    
    print("\n" + "="*50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–ò–ì–†–ê–¶–ò–ò:")
    print("="*50)
    print(f"üîß –°–∫–æ–±—è–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è: {skobyanka_count} –∑–∞–ø–∏—Å–µ–π")
    print("   –ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤:")
    for sample in skobyanka_samples:
        print(f"   - {sample[0]}")
    
    print(f"\nüè™ –ú–∞–≥–∞–∑–∏–Ω—ã/–æ—Ç–¥–µ–ª—ã: {stores_count} –∑–∞–ø–∏—Å–µ–π")
    print("   –ü—Ä–∏–º–µ—Ä—ã –º–∞–≥–∞–∑–∏–Ω–æ–≤:")
    for sample in stores_samples:
        print(f"   - {sample[0]}")
    
    return skobyanka_count > 0 and stores_count > 0

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é Excel —Ñ–∞–π–ª–æ–≤ –≤ SQLite")
    print("="*50)
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    conn = create_database_connection()
    
    try:
        # –ú–∏–≥—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞ skobyanka.xlsx
        print("\n1. –ú–∏–≥—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞ skobyanka.xlsx...")
        skobyanka_success = migrate_skobyanka_to_db(conn)
        
        # –ú–∏–≥—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞ table_2.xlsx
        print("\n2. –ú–∏–≥—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞ table_2.xlsx...")
        table2_success = migrate_table2_to_db(conn)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        print("\n3. –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –∏ views...")
        create_search_functions(conn)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏...")
        success = verify_migration(conn)
        
        if success and skobyanka_success and table2_success:
            print("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            print("1. –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–¥ –ø–æ–∏—Å–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏")
            print("2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø–æ–∏—Å–∫ –ø–æ —Å–∫–æ–±—è–Ω—ã–º –∏–∑–¥–µ–ª–∏—è–º")
            print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø–æ–∏—Å–∫ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º")
            print(f"4. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: data/excel_data.db")
        else:
            print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
            
    finally:
        conn.close()

if __name__ == "__main__":
    main() 